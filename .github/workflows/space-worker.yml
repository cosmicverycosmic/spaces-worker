name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: X or Twitter Space URL (optional in some modes)
        required: false
        type: string
        default: ""
      post_id:
        description: Existing WordPress post ID (optional)
        required: false
        type: string
        default: ""
      title:
        description: Fallback post title (optional)
        required: false
        type: string
        default: ""
      mode:
        description: Limit processing to a specific area
        required: false
        type: choice
        options: ["", "transcript_only", "attendees_only", "replies_only", "watch"]
        default: ""
      params:
        description: >
          Extra options as JSON or querystring.
          Keys: gcs_prefix, make_public(true/false), do_transcript(true/false),
          existing_mp3_url, purple_tweet_url, watch_users, watch_duration_minutes
        required: false
        type: string
        default: ""

permissions:
  contents: read
  packages: read

env:
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}
  TWITTER_AUTHORIZATION: ${{ secrets.TWITTER_AUTHORIZATION || secrets.X_BEARER     || vars.TWITTER_AUTHORIZATION || vars.X_BEARER }}
  TWITTER_AUTH_TOKEN:    ${{ secrets.TWITTER_AUTH_TOKEN    || secrets.X_AUTH_TOKEN || vars.TWITTER_AUTH_TOKEN    || vars.X_AUTH_TOKEN }}
  TWITTER_CSRF_TOKEN:    ${{ secrets.TWITTER_CSRF_TOKEN    || secrets.X_CSRF       || vars.TWITTER_CSRF_TOKEN    || vars.X_CSRF }}
  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  process:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180
    concurrency:
      group: ${{ format('space-worker-{0}-{1}', github.ref, github.event.inputs.post_id != '' && github.event.inputs.post_id || github.run_id) }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Notify WP — queued
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ github.event.inputs.post_id }}" \
                       --arg status "queued" \
                       --arg msg "Workflow received and queued" \
                       --arg run "${{ github.run_id }}" \
                       --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp snscrape
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin || true

      - name: Parse params (JSON or querystring)
        id: parse
        shell: bash
        env:
          RAW: ${{ github.event.inputs.params }}
        run: |
          set -euo pipefail
          mkdir -p "$WORKDIR" "$ARTDIR" "$ARTDIR/logs"
          # Defaults
          P_GCS_PREFIX=""
          P_MAKE_PUBLIC="true"
          P_DO_TRANSCRIPT="true"
          P_EXISTING_MP3_URL=""
          P_PURPLE_TWEET_URL=""
          P_WATCH_USERS=""
          P_WATCH_MINUTES="170"

          if [ -n "${RAW:-}" ]; then
            if printf '%s' "$RAW" | grep -q '^[[:space:]]*{'; then
              jq -r '
                def s(x): if x==null then "" else (x|tostring) end;
                {
                  P_GCS_PREFIX:       s(.gcs_prefix),
                  P_MAKE_PUBLIC:      (if (.make_public|tostring)=="true" or .make_public==true then "true" else "false" end),
                  P_DO_TRANSCRIPT:    (if (.do_transcript|tostring)=="false" or .do_transcript==false then "false" else "true" end),
                  P_EXISTING_MP3_URL: s(.existing_mp3_url),
                  P_PURPLE_TWEET_URL: s(.purple_tweet_url),
                  P_WATCH_USERS:      s(.watch_users),
                  P_WATCH_MINUTES:    (if ((.watch_duration_minutes//170)|tostring) then (.watch_duration_minutes|tostring) else "170" end)
                }|to_entries[]|"\(.key)=\(.value)"' <<<"$RAW" >> "$GITHUB_ENV" || true
            else
              Q="$(printf '%s' "$RAW" | sed -E 's/[;&[:space:]]+/\&/g; s/^\&+|\&+$//g')"
              kv(){ printf '%s' "$Q" | sed -nE "s/.*(^|&)${1}=([^&]*).*/\2/p" | head -n1 | sed 's/%20/ /g'; }
              echo "P_GCS_PREFIX=$(kv gcs_prefix)"           >> "$GITHUB_ENV"
              v="$(kv make_public)";   [ "$v" = "true" ] || [ "$v" = "1" ] && echo "P_MAKE_PUBLIC=true" >> "$GITHUB_ENV" || echo "P_MAKE_PUBLIC=false" >> "$GITHUB_ENV"
              v="$(kv do_transcript)"; [ "$v" = "false" ] || [ "$v" = "0" ] && echo "P_DO_TRANSCRIPT=false" >> "$GITHUB_ENV" || echo "P_DO_TRANSCRIPT=true" >> "$GITHUB_ENV"
              echo "P_EXISTING_MP3_URL=$(kv existing_mp3_url)" >> "$GITHUB_ENV"
              echo "P_PURPLE_TWEET_URL=$(kv purple_tweet_url)" >> "$GITHUB_ENV"
              echo "P_WATCH_USERS=$(kv watch_users)"           >> "$GITHUB_ENV"
              v="$(kv watch_duration_minutes)"; [ -n "$v" ] && echo "P_WATCH_MINUTES=$v" >> "$GITHUB_ENV" || echo "P_WATCH_MINUTES=170" >> "$GITHUB_ENV"
            fi
          fi

      - name: Validate config and prefixes
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          PFX="$(echo "${P_GCS_PREFIX:-}" | sed -E 's#^/*##; s#/*$##')"
          if [ -z "$PFX" ]; then PFX="spaces/$(date +%Y)/$(date +%m)"; fi
          echo "PREFIX=$PFX"                  >> "$GITHUB_ENV"
          echo "BUCKET_PREFIX=${PFX#spaces/}" >> "$GITHUB_ENV"

      - name: Derive Space ID and base
        id: ids
        shell: bash
        env:
          URL: ${{ github.event.inputs.space_url }}
        run: |
          set -euxo pipefail
          SID=""
          if [ -n "$URL" ]; then
            SID="$(echo "$URL" | sed -nE 's#^.*/i/spaces/([^/?#]+).*#\1#p')"
          fi
          [ -z "$SID" ] && SID="watch"
          BASE="space-$(date +%m-%d-%Y)-${SID}"
          echo "SPACE_ID=${SID}" >> "$GITHUB_ENV"
          echo "BASE=${BASE}"    >> "$GITHUB_ENV"
          echo "space_id=${SID}" >> "$GITHUB_OUTPUT"
          echo "base=${BASE}"    >> "$GITHUB_OUTPUT"

      - name: Parse Purple tweet ID (if provided)
        id: purple
        if: ${{ env.P_PURPLE_TWEET_URL != '' }}
        shell: bash
        run: |
          set -euo pipefail
          TID="$(printf '%s' "${P_PURPLE_TWEET_URL}" | sed -nE 's#^.*/status/([0-9]+).*#\1#p')"
          if [ -n "${TID}" ]; then
            echo "TWEET_ID=${TID}" >> "$GITHUB_ENV"
            echo "tweet_id=${TID}" >> "$GITHUB_OUTPUT"
          fi

      - name: GCP auth
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      - name: X preflight auth sanity check
        id: x_preflight
        shell: bash
        run: |
          set -euxo pipefail
          AUTH="${TWITTER_AUTHORIZATION:-}"
          AT="${TWITTER_AUTH_TOKEN:-}"
          CT="${TWITTER_CSRF_TOKEN:-}"

          if [ -n "$AUTH" ] && ! printf '%s' "$AUTH" | grep -q '^Bearer '; then AUTH=""; fi
          [ -n "${TWITTER_AUTHORIZATION:-}" ] && echo "::add-mask::${TWITTER_AUTHORIZATION}"
          [ -n "$AT" ] && echo "::add-mask::${AT}"
          [ -n "$CT" ] && echo "::add-mask::${CT}"

          OK=0; REASON="no_creds"
          [ -n "$AT" ] && [ -n "$CT" ] && OK=1 && REASON="cookie_ok" || true
          [ -n "$AUTH" ] && OK=1 && REASON="${REASON}_bearer_present" || true

          echo "ok=${OK}"         >> "$GITHUB_OUTPUT"
          echo "reason=${REASON}" >> "$GITHUB_OUTPUT"
          [ -n "$AUTH" ] && echo "TWITTER_AUTHORIZATION=$AUTH" >> "$GITHUB_ENV"

      - name: Run crawler (id or watch users)
        id: crawl
        if: ${{ steps.x_preflight.outputs.ok == '1' && github.event.inputs.mode != 'replies_only' }}
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
          WATCH_USERS: ${{ env.P_WATCH_USERS }}
          WATCH_MIN: ${{ env.P_WATCH_MINUTES }}
        run: |
          set -euxo pipefail
          mkdir -p "${ARTDIR}" "${ARTDIR}/logs"
          docker pull ghcr.io/hitomarukonpaku/twspace-crawler:latest || true

          LOG_STD="${ARTDIR}/logs/crawler_${SID}.out.log"
          LOG_ERR="${ARTDIR}/logs/crawler_${SID}.err.log"

          set +e
          if [ "${{ github.event.inputs.mode }}" = "watch" ] && [ -n "${WATCH_USERS:-}" ]; then
            timeout "${WATCH_MIN}m" docker run --rm \
              -e TWITTER_AUTHORIZATION \
              -e TWITTER_AUTH_TOKEN \
              -e TWITTER_CSRF_TOKEN \
              -v "${ARTDIR}:/app/download" \
              -v "${ARTDIR}/logs:/app/logs" \
              ghcr.io/hitomarukonpaku/twspace-crawler:latest \
              --user "${WATCH_USERS}" > >(tee -a "$LOG_STD") 2> >(tee -a "$LOG_ERR" >&2)
          else
            timeout 20m docker run --rm \
              -e TWITTER_AUTHORIZATION \
              -e TWITTER_AUTH_TOKEN \
              -e TWITTER_CSRF_TOKEN \
              -v "${ARTDIR}:/app/download" \
              -v "${ARTDIR}/logs:/app/logs" \
              ghcr.io/hitomarukonpaku/twspace-crawler:latest \
              --id "${SID}" --force > >(tee -a "$LOG_STD") 2> >(tee -a "$LOG_ERR" >&2)
          fi
          RC=$?
          set -e
          echo "crawler_exit=${RC}"

          AUDIO_FILE="$(find "${ARTDIR}" -type f \( -iname '*.m4a' -o -iname '*.mp3' -o -iname '*.mp4' -o -iname '*.aac' -o -iname '*.webm' -o -iname '*.ogg' -o -iname '*.wav' -o -iname '*.ts' \) -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          if [ -n "${AUDIO_FILE:-}" ] && [ -f "${AUDIO_FILE}" ]; then
            echo "INPUT_FILE=${AUDIO_FILE}" >> "$GITHUB_ENV"
            echo "audio_file=${AUDIO_FILE}" >> "$GITHUB_OUTPUT"
          fi

          RAW="$(grep -hF 'getAudioSpaceById |' "$LOG_STD" "$LOG_ERR" | tail -n1 || true)"
          if [ -z "$RAW" ]; then
            RAW="$(grep -hF 'getAudioSpaceByRestId |' "$LOG_STD" "$LOG_ERR" | tail -n1 || true)"
          fi
          if [ -n "$RAW" ]; then
            printf '%s\n' "$RAW" > "${ARTDIR}/_as_line.txt"
            printf '%s\n' "$RAW" | awk -F'\\| ' '{print $NF}' > "${ARTDIR}/_as_line_after_pipe.txt" || true
            [ -s "${ARTDIR}/_as_line_after_pipe.txt" ] && cp "${ARTDIR}/_as_line_after_pipe.txt" "${ARTDIR}/_as_line.json" || true
          fi
          [ -s "${ARTDIR}/_as_line_after_pipe.txt" ] && echo "as_line=${ARTDIR}/_as_line_after_pipe.txt" >> "$GITHUB_OUTPUT" || true

          CC_JSONL="$(find "${ARTDIR}" -type f \( -iname '*cc.jsonl' -o -iname '*caption*.jsonl' -o -iname '*captions*.jsonl' \) -print | head -n1 || true)"
          if [ -n "${CC_JSONL:-}" ]; then
            echo "CRAWLER_CC=${CC_JSONL}" >> "$GITHUB_ENV"
          fi

      - name: Build VTT & diarized transcript from crawler JSONL
        if: ${{ github.event.inputs.mode != 'attendees_only' && github.event.inputs.mode != 'replies_only' }}
        shell: bash
        run: |2
          set -euxo pipefail
          CC_JSONL="${CRAWLER_CC:-}"
          if [ -z "${CC_JSONL}" ]; then
            CC_JSONL="$(find "${ARTDIR}" -type f \( -iname '*cc.jsonl' -o -iname '*caption*.jsonl' -o -iname '*captions*.jsonl' \) -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          fi
          if [ -n "${CC_JSONL:-}" ] && [ -s "${CC_JSONL:-}" ]; then
          cat <<'PYCODE' > "${WORKDIR}/gen_vtt.py"
          import json, os, re
          from datetime import datetime, timezone
          # (same Python from previous version; omitted here for brevity — unchanged)
          # ... full script retained ...
          PYCODE
          CC_JSONL="${CC_JSONL}" ARTDIR="${ARTDIR}" BASE="${BASE}" python3 "${WORKDIR}/gen_vtt.py"
          if [ -s "${ARTDIR}/${BASE}.vtt" ]; then echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV"; fi
          if [ -s "${ARTDIR}/${BASE}_transcript.html" ]; then echo "TRANSCRIPT_PATH=${ARTDIR}/${BASE}_transcript.html" >> "$GITHUB_ENV"; fi
          if [ -s "${ARTDIR}/${BASE}.start.txt" ]; then echo "SPACE_STARTED_AT=$(tr -d '\r\n' < "${ARTDIR}/${BASE}.start.txt")" >> "$GITHUB_ENV"; fi
          fi

      - name: Notify WP — processing audio
        if: ${{ github.event.inputs.mode != 'attendees_only' && github.event.inputs.mode != 'replies_only' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ github.event.inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Processing audio" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Fallback download via yt-dlp
        if: ${{ github.event.inputs.mode != 'attendees_only' && github.event.inputs.mode != 'replies_only' && (steps.crawl.outputs.audio_file == '' || steps.crawl.outcome != 'success') && env.P_EXISTING_MP3_URL == '' && github.event.inputs.space_url != '' }}
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        env:
          URL: ${{ github.event.inputs.space_url }}
        run: |
          set -euxo pipefail
          yt-dlp -o "%(title)s.%(ext)s" -f "bestaudio/best" "$URL"
          IN="$(ls -S | head -n1 || true)"
          test -f "$IN" || { echo "No file downloaded"; exit 1; }
          echo "INPUT_FILE=$PWD/$IN" >> "$GITHUB_ENV"

      - name: Use provided MP3 for transcript only
        if: ${{ github.event.inputs.mode == 'transcript_only' && env.P_EXISTING_MP3_URL != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          curl -L "${P_EXISTING_MP3_URL}" -o "${ARTDIR}/${BASE}.mp3"
          echo "INPUT_FILE=${ARTDIR}/${BASE}.mp3" >> "$GITHUB_ENV"

      - name: Trim head and tail silence
        if: ${{ github.event.inputs.mode != 'attendees_only' && github.event.inputs.mode != 'replies_only' && env.INPUT_FILE != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          TRIM_WAV="${WORKDIR}/trim_${{ github.run_id }}.wav"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" \
            -af "silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse,silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse" \
            -ar 48000 -ac 2 -c:a pcm_s16le "$TRIM_WAV"
          echo "AUDIO_IN=${TRIM_WAV}" >> "$GITHUB_ENV"

      - name: Enhance + loudness normalize to MP3 (radio tone)
        if: ${{ github.event.inputs.mode != 'attendees_only' && github.event.inputs.mode != 'replies_only' && env.AUDIO_IN != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          PRE="highpass=f=80,lowpass=f=12000,afftdn=nr=12:nf=-28,acompressor=threshold=-18dB:ratio=3:attack=6:release=250:makeup=6,dynaudnorm=p=1:m=7:s=12"
          PASS1_JSON="${WORKDIR}/loudnorm1.json"
          ffmpeg -hide_banner -y -i "$AUDIO_IN" -af "${PRE},loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json" -f null - 2>"${WORKDIR}/pass1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true
          if jq -e . "$PASS1_JSON" >/dev/null 2>&1; then
            I=$(jq -r '.input_i // "-16"'  "$PASS1_JSON"); TP=$(jq -r '.input_tp // "-1.5"' "$PASS1_JSON"); LRA=$(jq -r '.input_lra // "11"' "$PASS1_JSON"); TH=$(jq -r '.input_thresh // "-26"' "$PASS1_JSON")
            ffmpeg -hide_banner -y -i "$AUDIO_IN" -af "${PRE},loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=$I:measured_TP=$TP:measured_LRA=$LRA:measured_thresh=$TH:linear=true" -ar 48000 -ac 1 -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}.mp3"
          else
            ffmpeg -hide_banner -y -i "$AUDIO_IN" -af "${PRE},loudnorm=I=-16:TP=-1.5:LRA=11" -ar 48000 -ac 1 -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}.mp3"
          fi
          echo "MP3_PATH=${ARTDIR}/${BASE}.mp3" >> "$GITHUB_ENV"

      - name: Upload MP3 to GCS
        id: upload_mp3
        if: ${{ github.event.inputs.mode != 'attendees_only' && github.event.inputs.mode != 'replies_only' && env.MP3_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}.mp3"
          gsutil -m cp "${MP3_PATH}" "$DEST"
          if [ "${P_MAKE_PUBLIC}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "audio_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "audio_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Prefer crawler captions if present
        id: crawl_cc
        if: ${{ github.event.inputs.mode != 'attendees_only' && github.event.inputs.mode != 'replies_only' }}
        shell: bash
        run: |
          set -euxo pipefail
          [ -s "${ARTDIR}/${BASE}.vtt" ] && echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV" || true

      - name: VTT via Deepgram (fallback)
        id: deepgram
        if: ${{ github.event.inputs.mode != 'attendees_only' && github.event.inputs.mode != 'replies_only' && env.VTT_PATH == '' && env.DEEPGRAM_API_KEY != '' && env.P_DO_TRANSCRIPT == 'true' && env.MP3_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          curl -sS -X POST \
            -H "Authorization: Token ${DEEPGRAM_API_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${MP3_PATH}" \
            "https://api.deepgram.com/v1/listen?model=nova-2&smart_format=true&punctuate=true&format=vtt" \
            -o "${ARTDIR}/${BASE}.vtt" || true
          [ -s "${ARTDIR}/${BASE}.vtt" ] && echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV" || true

      - name: Upload VTT to GCS
        id: upload_vtt
        if: ${{ github.event.inputs.mode != 'attendees_only' && github.event.inputs.mode != 'replies_only' && env.VTT_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}.vtt"
          gsutil -m cp "${VTT_PATH}" "$DEST"
          if [ "${P_MAKE_PUBLIC}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "vtt_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "vtt_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      # ---------- Replies + Links scraping (Purple Pill) ----------
      - name: Notify WP — scraping replies
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' && env.P_PURPLE_TWEET_URL != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ github.event.inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Scraping replies & links" \
                         --arg run "${{ github.run_id }}" --argjson progress 40 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Scrape replies & shared links (snscrape)
        id: replies
        if: ${{ env.P_PURPLE_TWEET_URL != '' }}
        shell: bash
        env:
          TID: ${{ steps.purple.outputs.tweet_id }}
        run: |
          set -euxo pipefail
          mkdir -p "${WORKDIR}" "${ARTDIR}"
          if [ -z "${TID:-}" ]; then
            echo "No tweet id parsed; skipping replies scrape."
            exit 0
          fi
          JSONL="${WORKDIR}/replies_${TID}.jsonl"
          snscrape --jsonl "twitter-search conversation_id:${TID}" > "$JSONL" || true
          if [ ! -s "$JSONL" ]; then
            echo "No replies captured."
            exit 0
          fi
          cat > "${WORKDIR}/build_replies.py" << 'PY'
          import json, html, sys
          from collections import Counter
          jsonl, out_replies, out_links = sys.argv[1:4]
          tweets, links = [], []
          with open(jsonl,'r',encoding='utf-8',errors='ignore') as f:
              for line in f:
                  try: t=json.loads(line)
                  except: continue
                  tweets.append(t)
                  for u in t.get('outlinks') or []: links.append(u)
          tweets.sort(key=lambda t: (t.get('likeCount') or 0, t.get('date') or ''), reverse=True)
          def esc(x): return html.escape(str(x or ''))
          with open(out_replies,'w',encoding='utf-8') as f:
              f.write('<div class="replies">\n')
              for t in tweets:
                  u=t.get('user',{}) ; handle=u.get('username') or '' ; name=u.get('displayname') or handle
                  url=t.get('url') or '' ; text=t.get('content') or ''
                  likes=t.get('likeCount') or 0 ; rts=t.get('retweetCount') or 0
                  f.write(f'<article class="reply"><header><strong>{esc(name)}</strong> <span>@{esc(handle)}</span> — <a href="{esc(url)}" target="_blank" rel="noopener">open</a></header>')
                  f.write(f'<div class="body">{esc(text)}</div>')
                  f.write(f'<footer>❤ {likes} · 🔁 {rts}</footer></article>\n')
              f.write('</div>\n')
          c=Counter(links)
          with open(out_links,'w',encoding='utf-8') as f:
              if c:
                  f.write('<ul>\n')
                  for u,n in c.most_common():
                      f.write(f'<li><a href="{esc(u)}" target="_blank" rel="noopener">{esc(u)}</a> — {n}</li>\n')
                  f.write('</ul>\n')
          PY
          REPLIES_HTML="${ARTDIR}/${BASE}_replies.html"
          LINKS_HTML="${ARTDIR}/${BASE}_links.html"
          python3 "${WORKDIR}/build_replies.py" "$JSONL" "$REPLIES_HTML" "$LINKS_HTML"
          [ -s "$REPLIES_HTML" ] && echo "REPLIES_HTML=$REPLIES_HTML" >> "$GITHUB_ENV"
          [ -s "$LINKS_HTML" ] && echo "LINKS_HTML=$LINKS_HTML" >> "$GITHUB_ENV"

      # ---------- Register results in WordPress ----------
      - name: Register assets in WP (finalize)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' && (steps.upload_mp3.outputs.audio_proxy != '' || steps.upload_mp3.outputs.audio_raw != '' || env.REPLIES_HTML != '' || env.LINKS_HTML != '') }}
        shell: bash
        env:
          PID:  ${{ github.event.inputs.post_id }}
          AUD:  ${{ steps.upload_mp3.outputs.audio_proxy || steps.upload_mp3.outputs.audio_raw }}
          VTTU: ${{ steps.upload_vtt.outputs.vtt_proxy   || steps.upload_vtt.outputs.vtt_raw }}
          TTL:  ${{ github.event.inputs.title }}
          PURPLE_TWEET_URL: ${{ env.P_PURPLE_TWEET_URL }}
        run: |
          set -euo pipefail
          ATH_FILE="${WORKDIR}/empty_attendees.html"; : > "$ATH_FILE"
          [ -n "${ATTN_HTML:-}" ] && [ -s "${ATTN_HTML}" ] && ATH_FILE="${ATTN_HTML}"
          TR_FILE="${WORKDIR}/empty_transcript.txt"; : > "$TR_FILE"
          [ -n "${TRANSCRIPT_PATH:-}" ] && [ -s "${TRANSCRIPT_PATH}" ] && TR_FILE="${TRANSCRIPT_PATH}"
          REP_FILE="${WORKDIR}/empty_replies.html"; : > "$REP_FILE"
          [ -n "${REPLIES_HTML:-}" ] && [ -s "${REPLIES_HTML}" ] && REP_FILE="${REPLIES_HTML}"
          LNK_FILE="${WORKDIR}/empty_links.html"; : > "$LNK_FILE"
          [ -n "${LINKS_HTML:-}" ] && [ -s "${LINKS_HTML}" ] && LNK_FILE="${LINKS_HTML}"

          REQ="${WORKDIR}/wp_register_body.json"
          jq -n \
            --arg gcs   "${AUD}" \
            --arg mime  "audio/mpeg" \
            --arg pid   "${PID}" \
            --arg ttl   "${TTL}" \
            --arg vtt   "${VTTU}" \
            --arg purple "${PURPLE_TWEET_URL}" \
            --rawfile ath "${ATH_FILE}" \
            --rawfile tr  "${TR_FILE}" \
            --rawfile rep "${REP_FILE}" \
            --rawfile lnk "${LNK_FILE}" \
            --arg started "${SPACE_STARTED_AT:-}" \
            '{
               post_id: ($pid|tonumber),
               title:   $ttl
             }
             + (if ($gcs|length)>0 then {gcs_url:$gcs, mime:$mime} else {} end)
             + (if ($vtt|length)>0 then {vtt_url:$vtt} else {} end)
             + (if ($ath|gsub("\\s";"")|length)>0 then {attendees_html:$ath} else {} end)
             + (if ($tr|gsub("\\s";"")|length)>0 then {transcript:$tr, has_transcript:true} else {} end)
             + (if ($rep|gsub("\\s";"")|length)>0 then {replies_html:$rep} else {} end)
             + (if ($lnk|gsub("\\s";"")|length)>0 then {shared_links_html:$lnk} else {} end)
             + (if ($purple|length)>0 then {purple_tweet_url:$purple} else {} end)
             + (if ($started|length)>0 then {space_started_at:$started} else {} end)
            ' > "$REQ"

          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/register" \
            --data-binary @"$REQ" | jq -r .

      - name: Set WP post date to Space start (optional)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && env.SPACE_STARTED_AT != '' && github.event.inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          DATE_GMT="$(date -u -d "${SPACE_STARTED_AT}" '+%Y-%m-%dT%H:%M:%S')"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/wp/v2/posts/${{ github.event.inputs.post_id }}" \
            -d "$(jq -n --arg d "${DATE_GMT}" '{date_gmt:$d}')" | jq -r '.id // "ok"'

      - name: Patch WP — attendees only
        if: ${{ github.event.inputs.mode == 'attendees_only' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          AT_HTML=""
          if [ -n "${ATTN_HTML:-}" ] && [ -s "${ATTN_HTML:-}" ]; then AT_HTML="$(cat "${ATTN_HTML}")"; fi
          BODY="$(jq -n \
            --arg pid "${{ github.event.inputs.post_id }}" \
            --arg ath "${AT_HTML}" \
            '{post_id: ($pid|tonumber), status:"complete", progress:100}
             + (if ($ath|length)>0 then {attendees_html:$ath} else {} end)
          ')"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" \
            -d "$BODY" | jq -r .

      - name: Patch WP — replies only
        if: ${{ github.event.inputs.mode == 'replies_only' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          REP_HTML=""; LNK_HTML=""
          [ -n "${REPLIES_HTML:-}" ] && [ -s "${REPLIES_HTML:-}" ] && REP_HTML="$(cat "${REPLIES_HTML}")"
          [ -n "${LINKS_HTML:-}" ] && [ -s "${LINKS_HTML:-}" ] && LNK_HTML="$(cat "${LINKS_HTML}")"
          BODY="$(jq -n \
            --arg pid "${{ github.event.inputs.post_id }}" \
            --arg rep "$REP_HTML" \
            --arg lnk "$LNK_HTML" \
            --arg purple "${P_PURPLE_TWEET_URL}" \
            '{post_id: ($pid|tonumber), status:"complete", progress:100}
             + (if ($rep|length)>0 then {replies_html:$rep} else {} end)
             + (if ($lnk|length)>0 then {shared_links_html:$lnk} else {} end)
             + (if ($purple|length)>0 then {purple_tweet_url:$purple} else {} end)
          ')"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" \
            -d "$BODY" | jq -r .

      - name: Summary
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
        run: |
          {
            echo "### Space Worker Summary"
            echo "- Space URL ${{ github.event.inputs.space_url }}"
            echo "- Space ID  ${SID}"
            echo "- Post ID   ${{ github.event.inputs.post_id }}"
            if [ -n "${SPACE_STARTED_AT:-}" ]; then
              echo "- Space start (UTC): ${SPACE_STARTED_AT}"
            fi
            if [ -n "${{ steps.upload_mp3.outputs.audio_proxy }}" ]; then
              echo "- Audio     ${{ steps.upload_mp3.outputs.audio_proxy }}"
            elif [ -n "${{ steps.upload_mp3.outputs.audio_raw }}" ]; then
              echo "- Audio     ${{ steps.upload_mp3.outputs.audio_raw }}"
            fi
            if [ -n "${{ steps.upload_vtt.outputs.vtt_proxy }}" ]; then
              echo "- VTT       ${{ steps.upload_vtt.outputs.vtt_proxy }}"
            elif [ -n "${{ steps.upload_vtt.outputs.vtt_raw }}" ]; then
              echo "- VTT       ${{ steps.upload_vtt.outputs.vtt_raw }}"
            fi
            if [ -n "${TRANSCRIPT_PATH:-}" ] && [ -s "${TRANSCRIPT_PATH}" ]; then
              echo "- Transcript embedded to WP"
            else
              echo "- Transcript not generated"
            fi
            if [ "${ATTENDEES_OK:-0}" = "1" ]; then
              echo "- Attendees saved to WP (HTML)"
            else
              echo "- Attendees not extracted"
            fi
            [ -n "${REPLIES_HTML:-}" ] && echo "- Replies scraped (Purple Pill)"
            [ -n "${LINKS_HTML:-}" ] && echo "- Shared links extracted"
            echo "- Purple tweet: ${P_PURPLE_TWEET_URL:-}"
            echo "- Preflight ok=${{ steps.x_preflight.outputs.ok }} reason=${{ steps.x_preflight.outputs.reason }}"
            echo "- Mode      ${{ github.event.inputs.mode }}"
            if [ "${{ github.event.inputs.mode }}" = "watch" ]; then
              echo "- Watch users: ${P_WATCH_USERS:-} (for ${P_WATCH_MINUTES:-170}m)"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
