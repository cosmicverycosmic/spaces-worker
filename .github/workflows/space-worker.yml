name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: "X (Twitter) Space URL (https://x.com/i/spaces/...)"
        required: true
        type: string
      title:
        description: "Post title to use in WordPress (fallback if no post_id)"
        required: false
        type: string
        default: ""
      post_id:
        description: "Existing WP post_id to register assets to (optional)"
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: "GCS prefix/folder (e.g. spaces/2025/02)"
        required: false
        type: string
        default: ""
      make_public:
        description: "Set GCS objects to public?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      do_transcript:
        description: "Generate diarized transcript + VTT via Deepgram?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      wp_marker:
        description: "Opaque marker from WP (optional)"
        required: false
        type: string
        default: ""

permissions:
  contents: read

concurrency:
  group: ${{ format('space-worker-{0}-{1}', github.ref, inputs.post_id != '' && inputs.post_id || github.run_id) }}
  cancel-in-progress: false

env:
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}
  # Proxy used when saving to WP
  PROXY_BASE:       ${{ secrets.PROXY_BASE || vars.PROXY_BASE || 'https://media.chbmp.org' }}
  PROXY_PREFIX:     ${{ secrets.PROXY_PREFIX || vars.PROXY_PREFIX || '' }}
  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  run:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Start / ping WP (queued)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "queued" \
                       --arg msg "Workflow received and queued." \
                       --arg run "${{ github.run_id }}" --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps (ffmpeg, jq, yt-dlp, gcloud)
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk

      - name: Validate secrets / normalize prefix
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR"
          PFX="$(echo "${{ inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"
          echo "prefix=${PFX}" >> "$GITHUB_OUTPUT"

      - name: Ping (preflight starting)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Preflight: verifying WP auth, GCS access, and bucket permissions…" \
                       --arg run "${{ github.run_id }}" --argjson progress 5 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: GCP auth (service account)
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s\n' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      - name: Preflight: bucket ok + tiny upload
        id: preflight
        shell: bash
        env:
          PREFIX: ${{ steps.cfg.outputs.prefix }}
        run: |
          set -euxo pipefail
          gsutil ls -b "gs://${GCS_BUCKET}" >/dev/null
          echo "ok $(date -Iseconds) run=${GITHUB_RUN_ID}" > "${ARTDIR}/_preflight-${GITHUB_RUN_ID}.txt"
          if [ -n "$PREFIX" ]; then
            TEST="gs://${GCS_BUCKET}/${PREFIX}/_preflight/_preflight-${GITHUB_RUN_ID}.txt"
          else
            TEST="gs://${GCS_BUCKET}/_preflight/_preflight-${GITHUB_RUN_ID}.txt"
          fi
          gsutil cp "${ARTDIR}/_preflight-${GITHUB_RUN_ID}.txt" "${TEST}"
          gsutil acl ch -u AllUsers:R "${TEST}" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          gsutil rm -f "${TEST}" || true
          echo "ok=1" >> "$GITHUB_OUTPUT"

      - name: Ping (preflight ok)
        if: ${{ steps.preflight.outputs.ok == '1' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Preflight passed: WP & GCS verified. Proceeding…" \
                       --arg run "${{ github.run_id }}" --argjson progress 9 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (downloading)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Downloading Space audio…" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Download Space audio (yt-dlp bestaudio)
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          yt-dlp -o "%(title)s.%(ext)s" -f "bestaudio/best" "$URL"
          IN="$(ls -S | head -n1 || true)"
          test -f "$IN" || { echo "No file downloaded"; exit 1; }
          echo "INPUT_FILE=$PWD/$IN" >> "$GITHUB_ENV"

      - name: Ping (downloaded)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SIZE=$(stat -c%s "$INPUT_FILE" 2>/dev/null || echo 0)
          MSG="Downloaded: $(basename "$INPUT_FILE") (${SIZE} bytes)"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 25 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (normalizing)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Trimming dead air & loudness-normalizing to MP3…" \
                         --arg run "${{ github.run_id }}" --argjson progress 30 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Loudness normalization + dead-air trim → MP3
        shell: bash
        env:
          TS: ${{ github.run_id }}
        run: |
          set -euxo pipefail
          PASS1_JSON="${WORKDIR}/loudnorm_pass1_${TS}.json"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" -af loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json -f null - 2>"${WORKDIR}/pass1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true
          ILOG="$(cat "$PASS1_JSON" 2>/dev/null || echo '{}')"
          ME_I=$(jq -r '.input_i // "-16"'    <<<"$ILOG")
          ME_TP=$(jq -r '.input_tp // "-1.5"' <<<"$ILOG")
          ME_LRA=$(jq -r '.input_lra // "11"'  <<<"$ILOG")
          ME_THR=$(jq -r '.input_thresh // "-26"'<<<"$ILOG")

          BASE="space-$(date +%Y%m%d-%H%M%S)-${TS}"
          echo "BASE=${BASE}" >> "$GITHUB_ENV"

          OUT_MP3="${ARTDIR}/${BASE}.mp3"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" \
            -af "silenceremove=start_periods=1:start_duration=0.5:start_threshold=-45dB,areverse,silenceremove=start_periods=1:start_duration=0.5:start_threshold=-45dB,areverse,loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=${ME_I}:measured_TP=${ME_TP}:measured_LRA=${ME_LRA}:measured_thresh=${ME_THR}:print_format=summary" \
            -ar 48000 -ac 2 -codec:a libmp3lame -b:a 128k "$OUT_MP3"
          echo "OUT_MP3=$OUT_MP3" >> "$GITHUB_ENV"

      - name: Ping (encoded)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SIZE=$(stat -c%s "$OUT_MP3" 2>/dev/null || echo 0)
          MSG="MP3 ready: $(basename "$OUT_MP3") (${SIZE} bytes)"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 50 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (uploading MP3)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Uploading MP3 to GCS…" \
                         --arg run "${{ github.run_id }}" --argjson progress 55 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Upload MP3 to GCS
        id: upload_mp3
        shell: bash
        env:
          PREFIX: ${{ steps.cfg.outputs.prefix }}
        run: |
          set -euxo pipefail
          if [ -n "$PREFIX" ]; then
            DEST="gs://${GCS_BUCKET}/${PREFIX}/${BASE}.mp3"
            PUB_URL="https://storage.googleapis.com/${GCS_BUCKET}/${PREFIX}/${BASE}.mp3"
          else
            DEST="gs://${GCS_BUCKET}/${BASE}.mp3"
            PUB_URL="https://storage.googleapis.com/${GCS_BUCKET}/${BASE}.mp3"
          fi
          gsutil cp "$OUT_MP3" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          echo "gcs_url=${PUB_URL}" >> "$GITHUB_OUTPUT"

      - name: Ping (uploaded MP3)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          MSG="GCS MP3: ${{ steps.upload_mp3.outputs.gcs_url }}"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 60 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (transcribing)
        if: ${{ inputs.do_transcript == 'true' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Deepgram: diarized transcript & VTT…" \
                         --arg run "${{ github.run_id }}" --argjson progress 70 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Transcript + grouped paragraphs & VTT
        id: tx
        if: ${{ inputs.do_transcript == 'true' }}
        shell: bash
        env:
          DG_KEY: ${{ env.DEEPGRAM_API_KEY }}
        run: |
          set -euxo pipefail
          test -n "$DG_KEY" || { echo "DEEPGRAM_API_KEY not set"; exit 1; }
          DG_JSON="${ARTDIR}/dg.json"
          TX_PATH="${ARTDIR}/${BASE}.txt"
          VTT_PATH="${ARTDIR}/${BASE}.vtt"

          curl -sS -X POST "https://api.deepgram.com/v1/listen?smart_format=true&model=nova-2&diarize=true&utterances=true" \
            -H "Authorization: Token ${DG_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${OUT_MP3}" > "${DG_JSON}"

          # Build a tiny python file without heredocs (YAML-safe)
          TXPY="${WORKDIR}/make_tx_vtt.py"
          printf '%s\n' '#!/usr/bin/env python3' \
          'import json, sys' \
          'dg, tx, vtt = sys.argv[1:]' \
          'data=json.load(open(dg,encoding="utf-8"))' \
          'def vt(t):' \
          '    h=int(t//3600); t-=h*3600; m=int(t//60); s=t-m*60; ms=int(round((s-int(s))*1000)); return f"{h:02d}:{m:02d}:{int(s):02d}.{ms:03d}"' \
          'utts=data.get("results",{}).get("utterances") or []' \
          'if not utts:' \
          '    alts=data.get("results",{}).get("channels",[{"alternatives":[{}]}])[0]["alternatives"][0]' \
          '    utts=[{"speaker":0,"start":0.0,"end":alts.get("duration",0.0),"transcript":alts.get("transcript","").strip()}]' \
          'paras=[]; cues=[]' \
          'cur=None; buf=[]; s=e=None' \
          'for u in utts:' \
          '    sp=int(u.get("speaker",0)); t=(u.get("transcript") or "").strip(); st=float(u.get("start") or 0.0); en=float(u.get("end") or st)' \
          '    if not t: continue' \
          '    if cur is None: cur=sp; buf=[t]; s=st; e=en' \
          '    elif sp==cur: buf.append(t); e=en' \
          '    else: txt=" ".join(buf).strip(); paras.append((cur,txt)); cues.append((s,e,cur,txt)); cur=sp; buf=[t]; s=st; e=en' \
          'if buf: txt=" ".join(buf).strip(); paras.append((cur,txt)); cues.append((s,e,cur,txt))' \
          'open(tx,"w",encoding="utf-8").write("".join([f"Speaker {sp+1}: {txt}\\n\\n" for sp,txt in paras]))' \
          'f=open(vtt,"w",encoding="utf-8"); f.write("WEBVTT\\n\\n")' \
          '[f.write(f"{vt(s)} --> {vt(e)}\\nSpeaker {sp+1}: {txt}\\n\\n") for s,e,sp,txt in cues]; f.close()' \
          > "$TXPY"

          python3 "$TXPY" "$DG_JSON" "$TX_PATH" "$VTT_PATH"
          echo "TX_PATH=${TX_PATH}"   >> "$GITHUB_ENV"
          echo "VTT_PATH=${VTT_PATH}" >> "$GITHUB_ENV"

      - name: Ping (transcribed)
        if: ${{ steps.tx.outcome == 'success' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Transcript & grouped VTT created." \
                       --arg run "${{ github.run_id }}" --argjson progress 80 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (uploading VTT)
        if: ${{ steps.tx.outcome == 'success' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Uploading VTT to GCS…" \
                       --arg run "${{ github.run_id }}" --argjson progress 85 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Upload VTT to GCS
        id: upload_vtt
        if: ${{ steps.tx.outcome == 'success' }}
        shell: bash
        env:
          PREFIX: ${{ steps.cfg.outputs.prefix }}
        run: |
          set -euxo pipefail
          test -f "${VTT_PATH}" || { echo "No VTT produced"; exit 1; }
          if [ -n "$PREFIX" ]; then
            DEST="gs://${GCS_BUCKET}/${PREFIX}/${BASE}.vtt"
            PUB_VTT="https://storage.googleapis.com/${GCS_BUCKET}/${PREFIX}/${BASE}.vtt"
          else
            DEST="gs://${GCS_BUCKET}/${BASE}.vtt"
            PUB_VTT="https://storage.googleapis.com/${GCS_BUCKET}/${BASE}.vtt"
          fi
          gsutil cp "${VTT_PATH}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          echo "vtt_url=${PUB_VTT}" >> "$GITHUB_OUTPUT"

      - name: Scrape /peek attendees → HTML
        id: peek
        shell: bash
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euo pipefail
          ATTH="${ARTDIR}/attendees.html"
          curl -sSL -A "Mozilla/5.0" "${URL%/}/peek" -o "${ARTDIR}/peek.html" || true
          PYTMP="${WORKDIR}/peek_to_html.py"
          printf '%s\n' 'import re, sys, html' \
          'src, outp = sys.argv[1], sys.argv[2]' \
          'raw=open(src,"r",encoding="utf-8",errors="ignore").read() if src else ""' \
          'host=[]; cohosts=[]; speakers=[]' \
          'def add(lst, handle, name=""):' \
          '    h=handle.strip("@"); url=f"https://x.com/{h}"' \
          '    label=f"{name.strip()} (@{h})" if name.strip() else f"@{h}"' \
          '    lst.append((url,label))' \
          'def uniq(lst):' \
          '    seen=set(); res=[]' \
          '    for u,l in lst:' \
          '        if (u,l) in seen: continue' \
          '        seen.add((u,l)); res.append((u,l))' \
          '    return res' \
          'for role, handle, name in re.findall(r"(?i)(Host|Co-?hosts?|Speakers?).{0,400}?href=\\"https://x\\.com/([A-Za-z0-9_]+)\\"[^>]*>([^<]{0,120})", raw):' \
          '    role=role.lower()' \
          '    if "co" in role: add(cohosts, handle, name)' \
          '    elif "host" in role: add(host, handle, name)' \
          '    else: add(speakers, handle, name)' \
          'if not (host or cohosts or speakers):' \
          '    for handle, name in re.findall(r"href=\\"https://x\\.com/([A-Za-z0-9_]+)\\".{0,80}?>([^<]{0,120})", raw):' \
          '        add(speakers, handle, name)' \
          'host=uniq(host); cohosts=uniq(cohosts); speakers=uniq(speakers)' \
          'def block(title, items):' \
          '    if not items: return ""' \
          '    lines=[f"  <li><strong>{title}</strong>", "    <ul>"]' \
          '    for u,l in items: lines.append(f"      <li><a href=\\"{u}\\" target=\\"_blank\\">{html.escape(l)}</a></li>")' \
          '    lines += ["    </ul>", "  </li>"]; return "\n".join(lines)' \
          'parts=["<ul>"]' \
          'for title, items in (("Host",host),("Co-hosts",cohosts),("Speakers",speakers)):' \
          '    b=block(title, items)' \
          '    if b: parts.append(b)' \
          'parts.append("</ul>")' \
          'out="".join([p+"\n" for p in parts])' \
          'open(outp,"w",encoding="utf-8").write(out if out.strip()!="<ul></ul>" else "")' \
          > "${PYTMP}"
          python3 "${PYTMP}" "${ARTDIR}/peek.html" "${ATTH}" || true
          if [ -s "$ATTH" ]; then
            echo "attendees_html=${ATTH}" >> "$GITHUB_OUTPUT"
          else
            echo "attendees_html=" >> "$GITHUB_OUTPUT"
          fi

      - name: Ping (registering in WordPress)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Registering assets in WordPress…" \
                       --arg run "${{ github.run_id }}" --argjson progress 95 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Register in WordPress (proxy URL + attendees)
        id: register
        shell: bash
        env:
          WP_URL:  ${{ env.WP_BASE_URL }}
          WP_AUTH: ${{ env.WP_USER }}:${{ env.WP_APP_PASSWORD }}
          GCS_URL: ${{ steps.upload_mp3.outputs.gcs_url }}
          VTT_URL: ${{ steps.upload_vtt.outputs.vtt_url }}
          TITLE_IN:   ${{ inputs.title }}
          POST_ID_IN: ${{ inputs.post_id }}
          PROXY_BASE:   ${{ env.PROXY_BASE }}
          PROXY_PREFIX: ${{ env.PROXY_PREFIX }}
          ATTH_PATH: ${{ steps.peek.outputs.attendees_html }}
        run: |
          set -euxo pipefail
          JFILE="${ARTDIR}/register.json"
          TXFILE="${TX_PATH:-${ARTDIR}/${BASE}.txt}"
          [ -f "$TXFILE" ] || : > "$TXFILE"

          BN="$(basename "${GCS_URL}")"
          if [ -n "${PROXY_PREFIX}" ]; then
            PROXY_URL="${PROXY_BASE%/}/${PROXY_PREFIX#/}/${BN}"
          else
            PROXY_URL="${PROXY_BASE%/}/${BN}"
          fi

          if [ -n "${ATTH_PATH}" ] && [ -s "${ATTH_PATH}" ]; then
            ATTH_JSON=$(jq -Rs . < "${ATTH_PATH}")
          else
            ATTH_JSON="null"
          fi

          jq -n \
            --arg title   "${TITLE_IN}" \
            --arg gcs     "${PROXY_URL}" \
            --arg mime    "audio/mpeg" \
            --arg vtt     "${VTT_URL}" \
            --arg pid     "${POST_ID_IN}" \
            --rawfile tx  "${TXFILE}" \
            --argjson att ${ATTH_JSON} '
            {
              title: ($title // ""),
              gcs_url: $gcs,
              mime: $mime
            }
            + ( ($vtt // "") | select(length>0) | {vtt_url:.} )
            + ( ($tx  // "") | select(length>0) | {transcript:.} )
            + ( if $att != null then {attendees_html:$att} else {} end )
            + ( ($pid|tonumber? // null) as $maybe
                | if $maybe then {post_id:$maybe} else {} end )
          ' > "$JFILE"

          RESP="${ARTDIR}/register.out.json"
          curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
            -X POST "${WP_URL%/}/wp-json/ss3k/v1/register" \
            --data-binary @"${JFILE}" > "${RESP}"

          PERMA=$(jq -r '.permalink // ""' "${RESP}")
          EDIT_URL="${WP_URL%/}/wp-admin/post.php?post=${POST_ID_IN}&action=edit"

          curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
            -X POST "${WP_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${POST_ID_IN}" --arg status "complete" \
                       --arg msg "Worker finished. View: ${PERMA} · Edit: ${EDIT_URL}" \
                       --arg run "${{ github.run_id }}" --argjson progress 100 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

          jq . "${RESP}" || true

      - name: Ping WP on failure
        if: ${{ failure() && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "error" \
                       --arg msg "Worker failed. See GitHub run ${GITHUB_RUN_ID}." \
                       --arg run "${{ github.run_id }}" --argjson progress 100 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Job summary
        if: ${{ always() }}
        shell: bash
        run: |
          {
            echo "### Space Worker Summary"
            echo "- **Space URL:** ${{ inputs.space_url }}"
            echo "- **Post ID:** ${{ inputs.post_id }}"
            echo "- **GCS MP3:** ${{ steps.upload_mp3.outputs.gcs_url }}"
            if [ "${{ steps.upload_vtt.outputs.vtt_url }}" != "" ]; then
              echo "- **GCS VTT:** ${{ steps.upload_vtt.outputs.vtt_url }}"
            fi
            echo "- **Public:** ${{ inputs.make_public }}"
            echo "- **Transcript:** ${{ inputs.do_transcript }}"
          } >> "$GITHUB_STEP_SUMMARY"
