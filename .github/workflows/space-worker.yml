name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: "X (Twitter) Space URL (https://x.com/i/spaces/...)"
        required: true
        type: string
      title:
        description: "Post title to use in WordPress (fallback if no post_id)"
        required: false
        type: string
        default: ""
      post_id:
        description: "Existing WP post_id to register assets to (optional)"
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: "GCS prefix/folder (e.g. spaces/2025/02). Empty = auto spaces/YYYY/MM"
        required: false
        type: string
        default: ""
      make_public:
        description: "Set GCS objects to public?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      do_transcript:
        description: "Generate diarized transcript + VTT via Deepgram?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      wp_marker:
        description: "Opaque marker from WP (optional)"
        required: false
        type: string
        default: ""
      space_id:
        description: "Space ID (e.g. 1kvJpyzZOOkxE); auto-parsed from URL if blank"
        required: false
        type: string
        default: ""
      mode:
        description: "Optional targeted mode (full default)"
        required: false
        type: choice
        options: ["", "transcript_only", "attendees_only"]
        default: ""
      existing_mp3_url:
        description: "For transcript_only: URL of the already-encoded MP3"
        required: false
        type: string
        default: ""

permissions:
  contents: read

concurrency:
  group: ${{ format('space-worker-{0}-{1}', github.ref, inputs.post_id != '' && inputs.post_id || github.run_id) }}
  cancel-in-progress: false

env:
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}
  # Twitter auth (official bearer — preferred)
  TW_BEARER:        ${{ secrets.TW_BEARER        || secrets.TWITTER_BEARER || vars.TW_BEARER || vars.TWITTER_BEARER }}
  # Optional: cookie auth for crawler fallback
  TW_AUTH_TOKEN:    ${{ secrets.TW_AUTH_TOKEN    || vars.TW_AUTH_TOKEN }}
  TW_CSRF_TOKEN:    ${{ secrets.TW_CSRF_TOKEN    || vars.TW_CSRF_TOKEN }}
  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  run:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Start / ping WP (queued)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "queued" \
                       --arg msg "Workflow received and queued." \
                       --arg run "${{ github.run_id }}" --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps (ffmpeg, jq, yt-dlp, gcloud)
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk
          # Docker is available on ubuntu-latest, but ensure it's up for the crawler fallback
          docker --version

      - name: Validate config + normalize prefix
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR"

          # Normalize prefix
          PFX="$(echo "${{ inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"
          if [ -z "$PFX" ]; then
            PFX="spaces/$(date +%Y)/$(date +%m)"
          fi

          # Map to bucket path (drop leading 'spaces/' for the bucket)
          BUCKET_PREFIX="${PFX#spaces/}"

          echo "prefix=${PFX}"          >> "$GITHUB_OUTPUT"
          echo "bucket_prefix=${BUCKET_PREFIX}" >> "$GITHUB_OUTPUT"
          echo "PREFIX=${PFX}"          >> "$GITHUB_ENV"
          echo "BUCKET_PREFIX=${BUCKET_PREFIX}" >> "$GITHUB_ENV"

      - name: GCP auth (service account)
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s\n' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      - name: Resolve Space ID + metadata + basename
        id: ids
        shell: bash
        env:
          URL: ${{ inputs.space_url }}
          SID_IN: ${{ inputs.space_id }}
        run: |
          set -euxo pipefail
          # Derive SPACE_ID
          SID="${SID_IN}"
          if [ -z "$SID" ]; then
            SID="$(echo "$URL" | sed -nE 's#.*(/i/spaces/|spaces/)([^/?#]+).*#\2#p')"
          fi
          test -n "$SID" || { echo "Could not parse space_id from URL or input"; exit 1; }

          # Fetch metadata for started_at via official API if bearer is available
          STARTED=""
          TITLE_META=""
          if [ -n "${TW_BEARER}" ]; then
            META_JSON="${ARTDIR}/space_meta.json"
            curl -sS -H "Authorization: Bearer ${TW_BEARER}" \
              "https://api.twitter.com/2/spaces/${SID}?space.fields=title,created_at,scheduled_start,started_at,ended_at" \
              > "${META_JSON}" || true
            STARTED="$(jq -r '.data.started_at // .data.created_at // .data.scheduled_start // empty' "${META_JSON}" || true)"
            TITLE_META="$(jq -r '.data.title // empty' "${META_JSON}" || true)"
          fi

          # Fallback to current UTC if no timestamp
          if [ -z "$STARTED" ]; then
            STARTED="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          fi

          # Build basename: space-MM-DD-YYYY-<SpaceID>
          MM="$(date -u -d "$STARTED" +%m 2>/dev/null || date -u +%m)"
          DD="$(date -u -d "$STARTED" +%d 2>/dev/null || date -u +%d)"
          YY="$(date -u -d "$STARTED" +%Y 2>/dev/null || date -u +%Y)"
          BASE="space-${MM}-${DD}-${YY}-${SID}"

          echo "space_id=${SID}"      >> "$GITHUB_OUTPUT"
          echo "started_at=${STARTED}" >> "$GITHUB_OUTPUT"
          echo "title_meta=${TITLE_META}" >> "$GITHUB_OUTPUT"
          echo "BASE=${BASE}"          >> "$GITHUB_ENV"

      - name: Ping (downloading)
        if: ${{ inputs.mode != 'transcript_only' && inputs.mode != 'attendees_only' && env.WP_BASE_URL != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Downloading Space audio…" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Download Space audio (yt-dlp bestaudio)
        if: ${{ inputs.mode != 'transcript_only' && inputs.mode != 'attendees_only' }}
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          yt-dlp -o "%(title)s.%(ext)s" -f "bestaudio/best" "$URL"
          IN="$(ls -S | head -n1 || true)"
          test -f "$IN" || { echo "No file downloaded"; exit 1; }
          echo "INPUT_FILE=$PWD/$IN" >> "$GITHUB_ENV"

      - name: Ping (trimming head/tail silence)
        if: ${{ inputs.mode != 'transcript_only' && inputs.mode != 'attendees_only' && env.WP_BASE_URL != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Trimming start/end dead air (pre-normalize)…" \
                         --arg run "${{ github.run_id }}" --argjson progress 28 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Head/tail silence trim (pre-normalize)
        if: ${{ inputs.mode != 'transcript_only' && inputs.mode != 'attendees_only' }}
        shell: bash
        env:
          TS: ${{ github.run_id }}
        run: |
          set -euxo pipefail
          TRIM_WAV="${WORKDIR}/trimmed_${TS}.wav"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" \
            -af "silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse,silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse" \
            -ar 48000 -ac 2 -c:a pcm_s16le "$TRIM_WAV"
          echo "AUDIO_IN=${TRIM_WAV}" >> "$GITHUB_ENV"

      - name: Ping (normalizing)
        if: ${{ inputs.mode != 'transcript_only' && inputs.mode != 'attendees_only' && env.WP_BASE_URL != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Normalizing & encoding to MP3…" \
                         --arg run "${{ github.run_id }}" --argjson progress 30 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Loudness normalization → MP3
        if: ${{ inputs.mode != 'transcript_only' && inputs.mode != 'attendees_only' }}
        shell: bash
        env:
          TS: ${{ github.run_id }}
        run: |
          set -euxo pipefail
          PASS1_JSON="${WORKDIR}/loudnorm_pass1_${TS}.json"
          ffmpeg -hide_banner -y -i "$AUDIO_IN" -af loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json -f null - 2>"${WORKDIR}/pass1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true
          ILOG="$(cat "$PASS1_JSON" 2>/dev/null || echo '{}')"
          ME_I=$(jq -r '.input_i // "-16"'    <<<"$ILOG")
          ME_TP=$(jq -r '.input_tp // "-1.5"' <<<"$ILOG")
          ME_LRA=$(jq -r '.input_lra // "11"'  <<<"$ILOG")
          ME_THR=$(jq -r '.input_thresh // "-26"'<<<"$ILOG")

          # Use resolved BASE from the ids step (already in env)
          OUT_MP3="${ARTDIR}/${BASE}.mp3"
          ffmpeg -hide_banner -y -i "$AUDIO_IN" \
            -af "loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=${ME_I}:measured_TP=${ME_TP}:measured_LRA=${ME_LRA}:measured_thresh=${ME_THR}:print_format=summary" \
            -ar 48000 -ac 2 -codec:a libmp3lame -b:a 128k "$OUT_MP3"
          echo "OUT_MP3=$OUT_MP3" >> "$GITHUB_ENV"

      - name: Use existing MP3 for transcript_only
        if: ${{ inputs.mode == 'transcript_only' && inputs.existing_mp3_url != '' }}
        shell: bash
        env:
          URL: ${{ inputs.existing_mp3_url }}
        run: |
          set -euxo pipefail
          DL="${WORKDIR}/existing.mp3"
          curl -L --fail -o "${DL}" "${URL}"
          echo "OUT_MP3=${DL}" >> "$GITHUB_ENV"

      - name: Ping (uploading MP3)
        if: ${{ inputs.mode != 'transcript_only' && inputs.mode != 'attendees_only' && env.WP_BASE_URL != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Uploading MP3 to GCS…" \
                         --arg run "${{ github.run_id }}" --argjson progress 55 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Upload MP3 to GCS (bucket mapping + proxy URL)
        id: upload_mp3
        if: ${{ inputs.mode != 'transcript_only' && inputs.mode != 'attendees_only' }}
        shell: bash
        env:
          PREFIX:        ${{ steps.cfg.outputs.prefix }}
          BUCKET_PREFIX: ${{ steps.cfg.outputs.bucket_prefix }}
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          RAW_URL="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          PROXY_URL="https://media.chbmp.org/${PREFIX}/${BASE}.mp3"
          gsutil cp "$OUT_MP3" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          echo "raw_url=${RAW_URL}"   >> "$GITHUB_OUTPUT"
          echo "proxy_url=${PROXY_URL}" >> "$GITHUB_OUTPUT"

      - name: Transcript + diarized VTT (Deepgram)
        id: tx
        if: ${{ inputs.do_transcript == 'true' && inputs.mode != 'attendees_only' }}
        shell: bash
        env:
          DG_KEY: ${{ env.DEEPGRAM_API_KEY }}
        run: |
          set -euxo pipefail
          test -n "$DG_KEY" || { echo "DEEPGRAM_API_KEY not set"; exit 1; }
          DG_JSON="${ARTDIR}/dg.json"
          TX_PATH="${ARTDIR}/${BASE}.txt"
          VTT_PATH="${ARTDIR}/${BASE}.vtt"

          curl -sS -X POST "https://api.deepgram.com/v1/listen?smart_format=true&model=nova-2&diarize=true&utterances=true" \
            -H "Authorization: Token ${DG_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${OUT_MP3}" > "${DG_JSON}"

          if jq -e '(.results.utterances? | length) > 0' "${DG_JSON}" >/dev/null; then
            jq -r '.results.utterances[] | "\((.speaker // 0))\t\(.transcript // "")"' "${DG_JSON}" \
            | awk -F '\t' '
              BEGIN{ last=-1; buf="" }
              {
                sp=$1+0; txt=$2;
                gsub(/\r/,"",txt)
                if (sp==last) { if (buf!="") buf=buf " " txt; else buf=txt }
                else { if (last!=-1) printf("Speaker %d: %s\n\n", last+1, buf); last=sp; buf=txt }
              }
              END { if (last!=-1) printf("Speaker %d: %s\n", last+1, buf) }
            ' > "${TX_PATH}"

            {
              echo "WEBVTT"
              echo
              jq -c '.results.utterances[] | {s:(.start // 0), e:(.end // 0), sp:(.speaker // 0), t:(.transcript // "")}' "${DG_JSON}" \
              | awk '
                function to_vtt(t,   h,m,s,ms,tmp){h=int(t/3600);tmp=t-h*3600;m=int(tmp/60);s=tmp-m*60;ms=int((s-int(s))*1000);s=int(s);return sprintf("%02d:%02d:%02d.%03d",h,m,s,ms)}
                { gsub(/[{}]/,""); n=$0
                  match(n, /"s":[^,]*/); sline=substr(n,RSTART,RLENGTH); sub(/"s":/,"",sline); s= sline+0
                  match(n, /"e":[^,]*/); eline=substr(n,RSTART,RLENGTH); sub(/"e":/,"",eline); e= eline+0
                  match(n, /"sp":[^,]*/); pline=substr(n,RSTART,RLENGTH); sub(/"sp":/,"",pline); sp= pline+0
                  match(n, /"t":.*/); tline=substr(n,RSTART+4)
                  if (substr(tline,1,1)=="\"") tline=substr(tline,2)
                  if (substr(tline,length(tline),1)=="\"") tline=substr(tline,1,length(tline)-1)
                  gsub(/\\n/,"\n",tline); gsub(/\\t/,"\t",tline); gsub(/\\"/,"\"",tline); gsub(/\\\\/,"\\",tline)
                  printf("%s --> %s\n", to_vtt(s), to_vtt(e))
                  printf("Speaker %d: %s\n\n", sp+1, tline)
                }'
            } > "${VTT_PATH}"
          else
            jq -r '.results.channels[0].alternatives[0].transcript // ""' "${DG_JSON}" > "${TX_PATH}"
            printf "WEBVTT\n\n" > "${VTT_PATH}"
          fi

          echo "TX_PATH=${TX_PATH}"   >> "$GITHUB_ENV"
          echo "VTT_PATH=${VTT_PATH}" >> "$GITHUB_ENV"

      - name: Upload VTT to GCS (bucket mapping + proxy URL)
        id: upload_vtt
        if: ${{ steps.tx.outcome == 'success' }}
        shell: bash
        env:
          PREFIX:        ${{ steps.cfg.outputs.prefix }}
          BUCKET_PREFIX: ${{ steps.cfg.outputs.bucket_prefix }}
        run: |
          set -euxo pipefail
          test -f "${VTT_PATH}" || { echo "No VTT produced"; exit 1; }
          DEST_VTT="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          RAW_VTT="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          PROXY_VTT="https://media.chbmp.org/${PREFIX}/${BASE}.vtt"
          gsutil cp "${VTT_PATH}" "$DEST_VTT"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST_VTT" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          echo "raw_vtt=${RAW_VTT}"     >> "$GITHUB_OUTPUT"
          echo "proxy_vtt=${PROXY_VTT}" >> "$GITHUB_OUTPUT"

      # --- Attendees: try WP /peek first, then fallback to twspace-crawler if empty ---
      - name: Peek attendees via WP helper
        id: peek
        shell: bash
        env:
          URL:     ${{ inputs.space_url }}
          WP_URL:  ${{ env.WP_BASE_URL }}
          WP_AUTH: ${{ env.WP_USER }}:${{ env.WP_APP_PASSWORD }}
        run: |
          set -euxo pipefail
          ATTN_JSON="${ARTDIR}/attendees.json"
          ATTN_HTML="${ARTDIR}/attendees.html"
          : > "${ATTN_HTML}"
          if [ -n "${WP_URL}" ] && [ -n "${WP_AUTH}" ]; then
            curl -sS -u "${WP_AUTH}" --get --data-urlencode "space_url=${URL}" \
              "${WP_URL%/}/wp-json/ss3k/v1/peek" > "${ATTN_JSON}" || true
            if jq -e '.html? | length>0' "${ATTN_JSON}" >/dev/null 2>&1; then
              jq -r '.html' "${ATTN_JSON}" > "${ATTN_HTML}"
            else
              # Build HTML if role arrays present
              if jq -e '.host? or .cohosts? or .speakers?' "${ATTN_JSON}" >/dev/null 2>&1; then
                {
                  echo "<ul>"
                  echo "  <li><strong>Host</strong><ul>"
                  jq -r '.host[]? | @tsv' "${ATTN_JSON}" | while IFS=$'\t' read -r name handle url; do
                    [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                  done
                  echo "  </ul></li>"
                  echo "  <li><strong>Co-hosts</strong><ul>"
                  jq -r '.cohosts[]? | @tsv' "${ATTN_JSON}" | while IFS=$'\t' read -r name handle url; do
                    [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                  done
                  echo "  </ul></li>"
                  echo "  <li><strong>Speakers</strong><ul>"
                  jq -r '.speakers[]? | @tsv' "${ATTN_JSON}" | while IFS=$'\t' read -r name handle url; do
                    [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                  done
                  echo "  </ul></li>"
                  echo "</ul>"
                } > "${ATTN_HTML}"
              fi
            fi
          fi
          echo "ATTN_HTML=${ATTN_HTML}" >> "$GITHUB_ENV"

      - name: Fallback attendees via twspace-crawler (if still empty)
        id: crawler
        if: ${{ always() }}
        shell: bash
        env:
          SPACE_ID: ${{ steps.ids.outputs.space_id }}
        run: |
          set -euxo pipefail
          # If we already have non-empty attendees.html, skip
          if [ -s "${ATTN_HTML:-}" ] && [ "$(wc -c < "${ATTN_HTML}")" -gt 20 ]; then
            echo "Attendees already present from WP /peek; skipping crawler"
            exit 0
          fi

          # Need at least one auth method
          if [ -z "${TW_BEARER}" ] && { [ -z "${TW_AUTH_TOKEN}" ] || [ -z "${TW_CSRF_TOKEN}" ]; }; then
            echo "No Twitter credentials available for crawler fallback; skipping." >&2
            exit 0
          fi

          docker pull ghcr.io/hitomarukonpaku/twspace-crawler:latest

          # Prepare a temp directory mounted to /out
          mkdir -p "${ARTDIR}"
          # Pass credentials in; the container reads env vars
          DOCKER_ENV=(-e "TWITTER_AUTHORIZATION=Bearer ${TW_BEARER}" -e "TWITTER_AUTH_TOKEN=${TW_AUTH_TOKEN}" -e "TWITTER_CSRF_TOKEN=${TW_CSRF_TOKEN}")

          # Try to dump participants to JSON (the tool's flags vary by version; try common ones)
          set +e
          docker run --rm "${DOCKER_ENV[@]}" -v "${ARTDIR}:/out" ghcr.io/hitomarukonpaku/twspace-crawler:latest \
            --space-id "${SPACE_ID}" --dump --out "/out/crawler.json"
          RC=$?
          set -e

          CRAWL_JSON="${ARTDIR}/crawler.json"
          ATTN_HTML="${ARTDIR}/attendees.html"
          : > "${ATTN_HTML}"

          if [ $RC -eq 0 ] && [ -s "${CRAWL_JSON}" ]; then
            # Heuristic grouping to Host / Co-hosts / Speakers
            # Try multiple shapes: .attendees[], .participants[], .users[]
            jq -c '
              def norm(u):
                {name:(u.name // u.display_name // ""), 
                 handle:(u.screen_name // u.username // u.handle // ""), 
                 url:("https://x.com/" + (u.screen_name // u.username // u.handle // "")),
                 role:( (u.role // u.type // (u.isHost and "host") // (u.isSpeaker and "speaker") // "") | tostring | ascii_downcase )
                };
              def items(src): [ src[]? | norm(.) | select(.handle != "") ];
              {
                host:     (items(.admins) + items(.host) + [items(.attendees)|.[]|select(.role=="host")]) | unique_by(.handle),
                cohosts:  (items(.cohosts) + [items(.attendees)|.[]|select(.role=="cohost" or .role=="co-host")]) | unique_by(.handle),
                speakers: (items(.speakers) + [items(.attendees)|.[]|select(.role=="speaker")]) | unique_by(.handle)
              }' "${CRAWL_JSON}" > "${ARTDIR}/attendees.json" || true

            if [ -s "${ARTDIR}/attendees.json" ]; then
              {
                echo "<ul>"
                echo "  <li><strong>Host</strong><ul>"
                jq -r '.host[]? | [.name, .handle, .url] | @tsv' "${ARTDIR}/attendees.json" \
                  | while IFS=$'\t' read -r n h u; do [ -n "$n" ] && [ -n "$u" ] && echo "    <li><a href=\"$u\" target=\"_blank\">$n (@$h)</a></li>"; done
                echo "  </ul></li>"
                echo "  <li><strong>Co-hosts</strong><ul>"
                jq -r '.cohosts[]? | [.name, .handle, .url] | @tsv' "${ARTDIR}/attendees.json" \
                  | while IFS=$'\t' read -r n h u; do [ -n "$n" ] && [ -n "$u" ] && echo "    <li><a href=\"$u\" target=\"_blank\">$n (@$h)</a></li>"; done
                echo "  </ul></li>"
                echo "  <li><strong>Speakers</strong><ul>"
                jq -r '.speakers[]? | [.name, .handle, .url] | @tsv' "${ARTDIR}/attendees.json" \
                  | while IFS=$'\t' read -r n h u; do [ -n "$n" ] && [ -n "$u" ] && echo "    <li><a href=\"$u\" target=\"_blank\">$n (@$h)</a></li>"; done
                echo "  </ul></li>"
                echo "</ul>"
              } > "${ATTN_HTML}"
            fi
          fi

          echo "ATTN_HTML=${ATTN_HTML}" >> "$GITHUB_ENV"

      # ---------------- Register / Patch in WordPress ----------------

      - name: Compute media URL to register
        id: regmedia
        shell: bash
        run: |
          set -euo pipefail
          MEDIA=""
          if [ -n "${{ steps.upload_mp3.outputs.proxy_url }}" ]; then
            MEDIA="${{ steps.upload_mp3.outputs.proxy_url }}"
          elif [ -n "${{ inputs.existing_mp3_url }}" ]; then
            MEDIA="${{ inputs.existing_mp3_url }}"
          fi
          echo "media=${MEDIA}" >> "$GITHUB_OUTPUT"

      - name: Register in WordPress (final; includes attendees_html if any)
        id: register
        if: ${{ steps.regmedia.outputs.media != '' }}
        shell: bash
        env:
          WP_URL:   ${{ env.WP_BASE_URL }}
          WP_AUTH:  ${{ env.WP_USER }}:${{ env.WP_APP_PASSWORD }}
          MEDIA_URL: ${{ steps.regmedia.outputs.media }}
          VTT_URL:   ${{ steps.upload_vtt.outputs.proxy_vtt }}
          TITLE_IN:  ${{ inputs.title }}
          POST_ID_IN:${{ inputs.post_id }}
        run: |
          set -euxo pipefail
          JFILE="${ARTDIR}/register.json"
          TXFILE="${TX_PATH:-${ARTDIR}/${BASE}.txt}"
          ATFILE="${ATTN_HTML:-}"
          [ -f "$TXFILE" ] || : > "$TXFILE"
          AT_HTML=""
          if [ -n "${ATFILE}" ] && [ -f "${ATFILE}" ]; then
            AT_HTML="$(cat "${ATFILE}")"
          fi

          jq -n \
            --arg title "${TITLE_IN}" \
            --arg media "${MEDIA_URL}" \
            --arg mime  "audio/mpeg" \
            --arg vtt   "${VTT_URL}" \
            --arg pid   "${POST_ID_IN}" \
            --rawfile tx  "${TXFILE}" \
            --arg attendees_html "${AT_HTML}" '
              { title: ($title // ""), gcs_url: $media, mime: $mime }
              + (if ($vtt|length)>0 then {vtt_url:$vtt} else {} end)
              + (if ($tx|length)>0 then {transcript:$tx} else {} end)
              + (if ($attendees_html|length)>0 then {attendees_html:$attendees_html} else {} end)
              + ( ($pid|tonumber? // null) as $maybe
                  | if $maybe then {post_id:$maybe} else {} end )
            ' > "$JFILE"

          RESP="${ARTDIR}/register.out.json"
          curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
            -X POST "${WP_URL%/}/wp-json/ss3k/v1/register" \
            --data-binary @"${JFILE}" > "${RESP}"

          jq . "${RESP}" || true

      - name: Patch attendees only (attendees_only mode)
        if: ${{ steps.regmedia.outputs.media == '' && inputs.mode == 'attendees_only' && env.WP_BASE_URL != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          AT_HTML="$(cat "${ATTN_HTML:-/dev/null}" 2>/dev/null || true)"
          if [ -n "$AT_HTML" ]; then
            curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
              -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" \
              -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg attendees_html "$AT_HTML" \
                         '{post_id: ($pid|tonumber), attendees_html: $attendees_html, status:"complete", progress:100 }')"
          fi

      - name: Set WP publish date to Space start time
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' && steps.ids.outputs.started_at != '' }}
        shell: bash
        env:
          STARTED: ${{ steps.ids.outputs.started_at }}
        run: |
          set -euxo pipefail
          # Use date_gmt; WP will reflect site timezone automatically
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/wp/v2/spaces/${{ inputs.post_id }}" \
            -d "$(jq -n --arg dgmt "${STARTED}" '{date_gmt: $dgmt, status:"publish"}')"

      - name: Final status to WP (complete)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "complete" \
                       --arg msg "Worker finished. See GitHub run ${{ github.run_id }}." \
                       --arg run "${{ github.run_id }}" --argjson progress 100 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping WP on failure
        if: ${{ failure() && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "error" \
                       --arg msg "Worker failed. See GitHub run ${{ github.run_id }}." \
                       --arg run "${{ github.run_id }}" --argjson progress 100 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Job summary
        if: ${{ always() }}
        shell: bash
        run: |
          {
            echo "### Space Worker Summary"
            echo "- **Space URL:** ${{ inputs.space_url }}"
            echo "- **Space ID:**  ${{ steps.ids.outputs.space_id }}"
            echo "- **Post ID:**   ${{ inputs.post_id }}"
            echo "- **BASE:**      ${BASE}"
            if [ -n "${{ steps.upload_mp3.outputs.proxy_url }}" ]; then
              echo "- **Audio (proxy):** ${{ steps.upload_mp3.outputs.proxy_url }}"
              echo "- **Audio (raw):**   ${{ steps.upload_mp3.outputs.raw_url }}"
            elif [ -n "${{ inputs.existing_mp3_url }}" ]; then
              echo "- **Audio (existing):** ${{ inputs.existing_mp3_url }}"
            fi
            if [ -n "${{ steps.upload_vtt.outputs.proxy_vtt }}" ]; then
              echo "- **VTT (proxy):** ${{ steps.upload_vtt.outputs.proxy_vtt }}"
              echo "- **VTT (raw):**   ${{ steps.upload_vtt.outputs.raw_vtt }}"
            fi
            echo "- **Public:**     ${{ inputs.make_public }}"
            echo "- **Transcript:** ${{ inputs.do_transcript }}"
            echo "- **Started at:** ${{ steps.ids.outputs.started_at }}"
          } >> "$GITHUB_STEP_SUMMARY"
