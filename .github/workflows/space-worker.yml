name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: "X (Twitter) Space URL (https://x.com/i/spaces/...)"
        required: true
        type: string
      title:
        description: "Post title to use in WordPress (fallback if no post_id)"
        required: false
        type: string
        default: ""
      post_id:
        description: "Existing WP post_id to register/patch (optional)"
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: "GCS prefix/folder (e.g. spaces/2025/02). Empty = auto spaces/YYYY/MM"
        required: false
        type: string
        default: ""
      make_public:
        description: "Set GCS objects to public?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      do_transcript:
        description: "Generate diarized transcript + VTT via Deepgram? (used when crawler captions unavailable)"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      wp_marker:
        description: "Opaque marker from WP (optional)"
        required: false
        type: string
        default: ""
      space_id:
        description: "Space ID (e.g. 1kvJpyzZOOkxE); auto-parsed from URL if blank"
        required: false
        type: string
        default: ""
      mode:
        description: "Optional targeted mode"
        required: false
        type: choice
        options: ["", "transcript_only", "attendees_only"]
        default: ""
      existing_mp3_url:
        description: "For transcript_only: URL of the already-encoded MP3"
        required: false
        type: string
        default: ""

permissions:
  contents: read
  packages: read

concurrency:
  group: ${{ format('space-worker-{0}-{1}', github.ref, inputs.post_id != '' && inputs.post_id || github.run_id) }}
  cancel-in-progress: false

env:
  # Project secrets/vars
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}

  # X / Twitter auth (optional; crawler prefers these if present)
  TWITTER_AUTHORIZATION: ${{ secrets.TWITTER_AUTHORIZATION || secrets.X_BEARER || vars.TWITTER_AUTHORIZATION || vars.X_BEARER }}
  TWITTER_AUTH_TOKEN:    ${{ secrets.TWITTER_AUTH_TOKEN    || secrets.X_AUTH_TOKEN || vars.TWITTER_AUTH_TOKEN || vars.X_AUTH_TOKEN }}
  TWITTER_CSRF_TOKEN:    ${{ secrets.TWITTER_CSRF_TOKEN    || secrets.X_CSRF       || vars.TWITTER_CSRF_TOKEN || vars.X_CSRF }}

  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  run:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Start / ping WP (queued)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "queued" \
                       --arg msg "Workflow received and queued." \
                       --arg run "${{ github.run_id }}" --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps (ffmpeg, jq, yt-dlp, gcloud) + Docker login
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Validate secrets / normalize prefix (and compute BUCKET_PREFIX)
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR" "$ARTDIR/logs"
          # gcs_prefix: trim slashes; default spaces/YYYY/MM when empty
          PFX="$(echo "${{ inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"
          if [ -z "$PFX" ]; then
            PFX="spaces/$(date +%Y)/$(date +%m)"
          fi
          echo "prefix=${PFX}" >> "$GITHUB_OUTPUT"
          echo "PREFIX=${PFX}" >> "$GITHUB_ENV"
          echo "BUCKET_PREFIX=${PFX#spaces/}" >> "$GITHUB_ENV"

      - name: Derive Space ID and base filename
        id: ids
        shell: bash
        env:
          INP_SPACE_ID: ${{ inputs.space_id }}
          URL:          ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          SID="${INP_SPACE_ID}"
          if [ -z "$SID" ]; then
            SID="$(echo "$URL" | sed -nE 's#^.*/i/spaces/([^/?#]+).*#\1#p')"
          fi
          test -n "$SID" || { echo "Could not parse Space ID"; exit 1; }
          BASE="space-$(date +%m-%d-%Y)-${SID}"
          echo "space_id=${SID}" >> "$GITHUB_OUTPUT"
          echo "BASE=${BASE}"     >> "$GITHUB_OUTPUT"
          echo "SPACE_ID=${SID}"  >> "$GITHUB_ENV"
          echo "BASE=${BASE}"     >> "$GITHUB_ENV"

      - name: GCP auth (service account)
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s\n' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      # ---------- Optional X auth preflight (helps crawler) ----------
      - name: X preflight (auth sanity check)
        id: x_preflight
        shell: bash
        run: |
          set -euxo pipefail
          AUTH="${TWITTER_AUTHORIZATION:-}"
          AT="${TWITTER_AUTH_TOKEN:-}"
          CT="${TWITTER_CSRF_TOKEN:-}"
          if [ -n "$AUTH" ] && ! printf '%s' "$AUTH" | grep -q '^Bearer '; then
            AUTH="Bearer ${AUTH}"
          fi
          [ -n "$AUTH" ] && echo "::add-mask::${AUTH}"
          [ -n "$AT" ]   && echo "::add-mask::${AT}"
          [ -n "$CT" ]   && echo "::add-mask::${CT}"
          OK=0; REASON="no_creds"
          if [ -n "$AUTH" ] || { [ -n "$AT" ] && [ -n "$CT" ]; }; then
            HARGS=()
            [ -n "$AUTH" ] && HARGS+=(-H "Authorization: $AUTH")
            [ -n "$CT" ] && HARGS+=(-H "x-csrf-token: $CT")
            CVAL=""
            [ -n "$AT" ] && CVAL="auth_token=$AT"
            [ -n "$CT" ] && CVAL="${CVAL}; ct0=$CT"
            [ -n "$CVAL" ] && HARGS+=(-H "Cookie: $CVAL")
            HARGS+=(-H "x-twitter-active-user: yes" -H "x-twitter-client-language: en" -H "Referer: https://x.com/home" -H "User-Agent: Mozilla/5.0")
            HTTP=$(curl -sS -o "${ARTDIR}/x_preflight.json" -w "%{http_code}" "https://x.com/i/api/1.1/account/settings.json" "${HARGS[@]}" || echo 000)
            if [ "$HTTP" = "200" ]; then OK=1; else REASON="http_${HTTP}"; fi
          fi
          echo "ok=${OK}"        >> "$GITHUB_OUTPUT"
          echo "reason=${REASON}" >> "$GITHUB_OUTPUT"
          [ -n "$AUTH" ] && echo "TWITTER_AUTHORIZATION=$AUTH" >> "$GITHUB_ENV"

      # ---------- Crawler first (fast exit) ----------
      - name: Ping (crawler attempting)
        if: ${{ steps.x_preflight.outputs.ok == '1' && inputs.mode == '' && env.WP_BASE_URL != '' && inputs.post_id != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "twspace-crawler: fetching audio/captions/metaâ€¦" \
                       --arg run "${{ github.run_id }}" --argjson progress 8 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: twspace-crawler (audio + captions + started_at; fail-fast)
        id: crawl
        if: ${{ steps.x_preflight.outputs.ok == '1' && inputs.mode == '' }}
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
        run: |
          set -euxo pipefail
          mkdir -p "${ARTDIR}" "${ARTDIR}/logs"
          docker pull ghcr.io/hitomarukonpaku/twspace-crawler:latest || true
          set +e
          timeout 60s docker run --rm \
            -e TWITTER_AUTHORIZATION \
            -e TWITTER_AUTH_TOKEN \
            -e TWITTER_CSRF_TOKEN \
            -v "${ARTDIR}:/app/download" \
            -v "${ARTDIR}/logs:/app/logs" \
            ghcr.io/hitomarukonpaku/twspace-crawler:latest \
            --id "${SID}" --force
          RC=$?
          set -e
          echo "crawler_exit=$RC"

          # Find audio (recursive; crawler writes into subfolders)
          AUDIO_FILE="$(find "${ARTDIR}" -type f \( -iname '*.m4a' -o -iname '*.mp3' -o -iname '*.mp4' -o -iname '*.aac' -o -iname '*.webm' -o -iname '*.ogg' -o -iname '*.wav' -o -iname '*.ts' \) -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          if [ -n "$AUDIO_FILE" ]; then
            echo "INPUT_FILE=${AUDIO_FILE}" >> "$GITHUB_ENV"
            echo "audio_file=${AUDIO_FILE}"  >> "$GITHUB_OUTPUT"
          else
            echo "audio_file=" >> "$GITHUB_OUTPUT"
          fi

          # Captions (if present) â†’ .txt and .vtt
          CC_FILE="$(find "${ARTDIR}" -type f \( -iname '*cc.jsonl' -o -iname '*caption*.jsonl' \) | head -n1 || true)"
          if [ -n "$CC_FILE" ]; then
            set +e
            docker run --rm -v "${ARTDIR}:/app/download" \
              ghcr.io/hitomarukonpaku/twspace-crawler:latest \
              cc e "/app/download/$(basename "$CC_FILE")" > "${ARTDIR}/_crawler_cc.txt"
            docker run --rm -v "${ARTDIR}:/app/download" \
              ghcr.io/hitomarukonpaku/twspace-crawler:latest \
              cc v "/app/download/$(basename "$CC_FILE")" > "${ARTDIR}/${BASE}.vtt"
            set -e
            if [ -s "${ARTDIR}/_crawler_cc.txt" ]; then
              cp "${ARTDIR}/_crawler_cc.txt" "${ARTDIR}/${BASE}.txt"
              echo "TX_PATH=${ARTDIR}/${BASE}.txt" >> "$GITHUB_ENV"
            fi
            if [ -s "${ARTDIR}/${BASE}.vtt" ]; then
              echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV"
            fi
          fi

          # Robust started_at extraction: prefer 13-digit ms, else 10-digit s
          START_EPOCH=""
          MS="$(grep -Ehor '[0-9]{13}' "${ARTDIR}" 2>/dev/null | head -n1 || true)"
          if [ -n "$MS" ]; then
            START_EPOCH=$((MS/1000))
          else
            S="$(grep -Ehor '"(started_at|created_at|start|startedAt)"[^0-9]*([0-9]{10})' "${ARTDIR}" 2>/dev/null | sed -E 's/.*([0-9]{10}).*/\1/' | head -n1 || true)"
            if [ -n "$S" ]; then START_EPOCH=$S; fi
          fi
          if [ -n "$START_EPOCH" ]; then
            ISO="$(date -u -d "@$START_EPOCH" '+%Y-%m-%dT%H:%M:%S')"
            echo "started_iso=${ISO}" >> "$GITHUB_OUTPUT"
          else
            echo "started_iso=" >> "$GITHUB_OUTPUT"
          fi

      # ---------- Fallback: EXACT old yt-dlp step if no crawler audio ----------
      - name: Ping (downloading via yt-dlp)
        if: ${{ inputs.mode == '' && (steps.crawl.outcome != 'success' || steps.crawl.outputs.audio_file == '') && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Downloading Space audio (fallback)â€¦" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Download Space audio (yt-dlp bestaudio) â€” old behavior
        if: ${{ inputs.mode == '' && (steps.crawl.outcome != 'success' || steps.crawl.outputs.audio_file == '') }}
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          yt-dlp -o "%(title)s.%(ext)s" -f "bestaudio/best" "$URL"
          IN="$(ls -S | head -n1 || true)"
          test -f "$IN" || { echo "No file downloaded"; exit 1; }
          echo "INPUT_FILE=$PWD/$IN" >> "$GITHUB_ENV"

      # ---------- Process â†’ MP3 ----------
      - name: Ping (trimming head/tail silence)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Trimming start/end dead air (pre-normalize)â€¦" \
                         --arg run "${{ github.run_id }}" --argjson progress 28 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Head/tail silence trim (pre-normalize)
        if: ${{ inputs.mode == '' }}
        shell: bash
        run: |
          set -euxo pipefail
          TRIM_WAV="${WORKDIR}/trimmed_${{ github.run_id }}.wav"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" \
            -af "silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse,silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse" \
            -ar 48000 -ac 2 -c:a pcm_s16le "$TRIM_WAV"
          echo "AUDIO_IN=${TRIM_WAV}" >> "$GITHUB_ENV"

      - name: Ping (normalizing)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Normalizing & encoding to MP3â€¦" \
                         --arg run "${{ github.run_id }}" --argjson progress 30 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Loudness normalization â†’ MP3
        if: ${{ inputs.mode == '' }}
        shell: bash
        run: |
          set -euxo pipefail
          PASS1_JSON="${WORKDIR}/loudnorm_pass1_${{ github.run_id }}.json"
          ffmpeg -hide_banner -y -i "$AUDIO_IN" -af loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json -f null - 2>"${WORKDIR}/pass1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true
          ILOG="$(cat "$PASS1_JSON" 2>/dev/null || echo '{}')"
          ME_I=$(jq -r '.input_i // "-16"'    <<<"$ILOG")
          ME_TP=$(jq -r '.input_tp // "-1.5"' <<<"$ILOG")
          ME_LRA=$(jq -r '.input_lra // "11"'  <<<"$ILOG")
          ME_THR=$(jq -r '.input_thresh // "-26"'<<<"$ILOG")
          OUT_MP3="${ARTDIR}/${BASE}.mp3"
          ffmpeg -hide_banner -y -i "$AUDIO_IN" \
            -af "loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=${ME_I}:measured_TP=${ME_TP}:measured_LRA=${ME_LRA}:measured_thresh=${ME_THR}:print_format=summary" \
            -ar 48000 -ac 2 -codec:a libmp3lame -b:a 128k "$OUT_MP3"
          echo "OUT_MP3=$OUT_MP3" >> "$GITHUB_ENV"

      - name: Ping (uploading MP3)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Uploading MP3 to GCSâ€¦" \
                         --arg run "${{ github.run_id }}" --argjson progress 55 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Upload MP3 to GCS (bucket path fix + proxy URL)
        id: upload_mp3
        if: ${{ inputs.mode == '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          RAW_URL="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          PROXY_URL="https://media.chbmp.org/${PREFIX}/${BASE}.mp3"
          gsutil cp "$OUT_MP3" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          echo "raw_url=${RAW_URL}"     >> "$GITHUB_OUTPUT"
          echo "proxy_url=${PROXY_URL}" >> "$GITHUB_OUTPUT"

      # ---------- Transcript/VTT ----------
      - name: Adopt crawler transcript/VTT if available
        id: adopt_cc
        if: ${{ inputs.mode != 'attendees_only' && (env.TX_PATH != '' || env.VTT_PATH != '') }}
        shell: bash
        run: |
          set -euxo pipefail
          [ -f "${TX_PATH:-/nope}" ]  && echo "TX_OK=1"  >> "$GITHUB_OUTPUT" || echo "TX_OK=0"  >> "$GITHUB_OUTPUT"
          [ -f "${VTT_PATH:-/nope}" ] && echo "VTT_OK=1" >> "$GITHUB_OUTPUT" || echo "VTT_OK=0" >> "$GITHUB_OUTPUT"

      - name: Deepgram: diarized transcript + VTT (fallback)
        id: tx
        if: ${{ inputs.mode != 'attendees_only' && inputs.do_transcript == 'true' && (steps.adopt_cc.outputs.VTT_OK != '1' || steps.adopt_cc.outputs.TX_OK != '1') }}
        shell: bash
        env:
          DG_KEY: ${{ env.DEEPGRAM_API_KEY }}
        run: |
          set -euxo pipefail
          test -n "$DG_KEY" || { echo "DEEPGRAM_API_KEY not set"; exit 1; }
          DG_JSON="${ARTDIR}/dg.json"
          TX_PATH="${ARTDIR}/${BASE}.txt"
          VTT_PATH="${ARTDIR}/${BASE}.vtt"
          curl -sS -X POST "https://api.deepgram.com/v1/listen?smart_format=true&model=nova-2&diarize=true&utterances=true" \
            -H "Authorization: Token ${DG_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${OUT_MP3}" > "${DG_JSON}"
          if jq -e '(.results.utterances? | length) > 0' "${DG_JSON}" >/dev/null; then
            jq -r '.results.utterances[] | "\((.speaker // 0))\t\(.transcript // "")"' "${DG_JSON}" \
            | awk -F '\t' '
              BEGIN{ last=-1; buf="" }
              { sp=$1+0; txt=$2; gsub(/\r/,"",txt);
                if (sp==last) { if (buf!="") buf=buf " " txt; else buf=txt }
                else { if (last!=-1) printf("Speaker %d: %s\n\n", last+1, buf); last=sp; buf=txt } }
              END { if (last!=-1) printf("Speaker %d: %s\n", last+1, buf) }
            ' > "${TX_PATH}"
            {
              echo "WEBVTT"; echo
              jq -c '.results.utterances[] | {s:(.start // 0), e:(.end // 0), sp:(.speaker // 0), t:(.transcript // "")}' "${DG_JSON}" \
              | awk '
                function to_vtt(t,   h,m,s,ms,tmp){h=int(t/3600);tmp=t-h*3600;m=int(tmp/60);s=tmp-m*60;ms=int((s-int(s))*1000);s=int(s);return sprintf("%02d:%02d:%02d.%03d",h,m,s,ms)}
                { gsub(/[{}]/,""); n=$0
                  match(n, /"s":[^,]*/); sline=substr(n,RSTART,RLENGTH); sub(/"s":/,"",sline); s= sline+0
                  match(n, /"e":[^,]*/); eline=substr(n,RSTART,RLENGTH); sub(/"e":/,"",eline); e= eline+0
                  match(n, /"sp":[^,]*/); pline=substr(n,RSTART,RLENGTH); sub(/"sp":/,"",pline); sp= pline+0
                  match(n, /"t":.*/); tline=substr(n,RSTART+4)
                  if (substr(tline,1,1)=="\"") tline=substr(tline,2)
                  if (substr(tline,length(tline),1)=="\"") tline=substr(tline,1,length(tline)-1)
                  gsub(/\\n/,"\n",tline); gsub(/\\t/,"\t",tline); gsub(/\\"/,"\"",tline); gsub(/\\\\/,"\\",tline)
                  printf("%s --> %s\n", to_vtt(s), to_vtt(e))
                  printf("Speaker %d: %s\n\n", sp+1, tline)
                }'
            } > "${VTT_PATH}"
          else
            jq -r '.results.channels[0].alternatives[0].transcript // ""' "${DG_JSON}" > "${TX_path:-${ARTDIR}/${BASE}.txt}"
            printf "WEBVTT\n\n" > "${VTT_PATH}"
          fi
          echo "TX_PATH=${TX_PATH}"   >> "$GITHUB_ENV"
          echo "VTT_PATH=${VTT_PATH}" >> "$GITHUB_ENV"

      - name: Upload VTT to GCS (if any)
        id: upload_vtt
        if: ${{ env.VTT_PATH != '' && inputs.mode != 'attendees_only' }}
        shell: bash
        run: |
          set -euxo pipefail
          test -f "${VTT_PATH}" || { echo "No VTT produced"; exit 0; }
          DEST_VTT="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          RAW_VTT="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          PROXY_VTT="https://media.chbmp.org/${PREFIX}/${BASE}.vtt"
          gsutil cp "${VTT_PATH}" "$DEST_VTT"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST_VTT" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          echo "raw_vtt=${RAW_VTT}"     >> "$GITHUB_OUTPUT"
          echo "proxy_vtt=${PROXY_VTT}" >> "$GITHUB_OUTPUT"

      # ---------- Attendees ----------
      - name: Scrape attendees (crawler first; fallback to WP /peek)
        id: attendees
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
          URL: ${{ inputs.space_url }}
          ATTN_JSON: ${{ env.ARTDIR }}/attendees.json
          ATTN_HTML: ${{ env.ARTDIR }}/attendees.html
        run: |
          set -euxo pipefail
          : > "$ATTN_HTML"
          [ -n "${TWITTER_AUTHORIZATION:-}" ] && echo "::add-mask::${TWITTER_AUTHORIZATION}"
          [ -n "${TWITTER_AUTH_TOKEN:-}" ]    && echo "::add-mask::${TWITTER_AUTH_TOKEN}"
          [ -n "${TWITTER_CSRF_TOKEN:-}" ]    && echo "::add-mask::${TWITTER_CSRF_TOKEN}"
          if [ "${{ steps.x_preflight.outputs.ok }}" = "1" ] && [ -n "$SID" ]; then
            docker pull ghcr.io/hitomarukonpaku/twspace-crawler:latest || true
            set +e
            timeout 30s docker run --rm \
              -e TWITTER_AUTHORIZATION \
              -e TWITTER_AUTH_TOKEN \
              -e TWITTER_CSRF_TOKEN \
              -v "${ARTDIR}:/out" \
              ghcr.io/hitomarukonpaku/twspace-crawler:latest \
              --space-id "$SID" --attendees --out /out/attendees.json
            RC=$?
            set -e
            if [ $RC -eq 0 ] && [ -s "$ATTN_JSON" ] && jq -e '((.host // []) + (.cohosts // []) + (.speakers // [])) | length > 0' "$ATTN_JSON" >/dev/null 2>&1; then
              {
                echo "<ul>"
                if jq -e '(.host // []) | length > 0' "$ATTN_JSON" >/dev/null; then
                  echo "  <li><strong>Host</strong><ul>"
                  jq -r '.host[]? | @tsv' "$ATTN_JSON" | while IFS=$'\t' read -r name handle url; do
                    [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                  done
                  echo "  </ul></li>"
                fi
                if jq -e '(.cohosts // []) | length > 0' "$ATTN_JSON" >/dev/null; then
                  echo "  <li><strong>Co-hosts</strong><ul>"
                  jq -r '.cohosts[]? | @tsv' "$ATTN_JSON" | while IFS=$'\t' read -r name handle url; do
                    [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                  done
                  echo "  </ul></li>"
                fi>
                if jq -e '(.speakers // []) | length > 0' "$ATTN_JSON" >/dev/null; then
                  echo "  <li><strong>Speakers</strong><ul>"
                  jq -r '.speakers[]? | @tsv' "$ATTN_JSON" | while IFS=$'\t' read -r name handle url; do
                    [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                  done
                  echo "  </ul></li>"
                fi
                echo "</ul>"
              } > "$ATTN_HTML"
            fi
          fi
          if [ ! -s "$ATTN_HTML" ] && [ -n "${WP_BASE_URL:-}" ] && [ -n "${WP_USER:-}" ] && [ -n "${WP_APP_PASSWORD:-}" ]; then
            curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
              --get \
              --data-urlencode "space_url=$URL" \
              --data-urlencode "space_id=${SID:-}" \
              "${WP_BASE_URL%/}/wp-json/ss3k/v1/peek" > "$ATTN_JSON" || true
            if jq -e '.html? | length>0' "$ATTN_JSON" >/dev/null 2>&1; then
              jq -r '.html' "$ATTN_JSON" > "$ATTN_HTML"
            elif jq -e '((.host // []) + (.cohosts // []) + (.speakers // [])) | length > 0' "$ATTN_JSON" >/dev/null 2>&1; then
              {
                echo "<ul>"
                for grp in host cohosts speakers; do
                  if jq -e "(.${grp} // []) | length > 0" "$ATTN_JSON" >/dev/null; then
                    TITLE=$([ "$grp" = "host" ] && echo "Host" || ([ "$grp" = "cohosts" ] && echo "Co-hosts" || echo "Speakers"))
                    echo "  <li><strong>${TITLE}</strong><ul>"
                    jq -r ".${grp}[]? | @tsv" "$ATTN_JSON" | while IFS=$'\t' read -r name handle url; do
                      [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                    done
                    echo "  </ul></li>"
                  fi
                done
                echo "</ul>"
              } > "$ATTN_HTML"
            fi
          fi
          echo "ATTN_HTML=$ATTN_HTML" >> "$GITHUB_ENV"

      # ---------- Space date/time â†’ WP post ----------
      - name: Derive Space date/time and update post
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          SPACE_ISO="${{ steps.crawl.outputs.started_iso }}"
          if [ -z "$SPACE_ISO" ]; then
            META="${ARTDIR}/space_meta.json"
            yt-dlp -J "$URL" > "$META" 2>/dev/null || true
            TS="$(jq -r '(.release_timestamp // .timestamp // empty)' "$META" 2>/dev/null || true)"
            if [ -n "$TS" ] && [[ "$TS" =~ ^[0-9]+$ ]]; then
              SPACE_ISO="$(date -u -d "@$TS" '+%Y-%m-%dT%H:%M:%S')"
            else
              UD="$(jq -r '.upload_date // empty' "$META" 2>/dev/null || true)" # YYYYMMDD
              if [ -n "$UD" ] && [[ "$UD" =~ ^[0-9]{8}$ ]]; then
                SPACE_ISO="$(date -u -d "${UD}" '+%Y-%m-%dT12:00:00')" # fallback noon UTC if date-only
              fi
            fi
          fi
          if [ -n "$SPACE_ISO" ]; then
            # Save full datetime (includes time) and GMT variant
            curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
              -X POST "${WP_BASE_URL%/}/wp-json/wp/v2/spaces/${{ inputs.post_id }}" \
              -d "$(jq -n --arg d "$SPACE_ISO" '{date: $d, date_gmt: $d}')"
            curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
              -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
              -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                         --arg msg "Post date/time set to ${SPACE_ISO} (UTC) from Space metadata." \
                         --arg run "${{ github.run_id }}" --argjson progress 92 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"
          else
            echo "No space date/time available."
          fi

      # ---------- Register / Patch in WordPress ----------
      - name: Register in WordPress (final-only; includes attendees)
        id: register
        if: ${{ inputs.mode == '' && steps.upload_mp3.outputs.proxy_url != '' }}
        shell: bash
        env:
          WP_URL:    ${{ env.WP_BASE_URL }}
          WP_AUTH:   ${{ env.WP_USER }}:${{ env.WP_APP_PASSWORD }}
          MEDIA_URL: ${{ steps.upload_mp3.outputs.proxy_url }}
          VTT_URL:   ${{ steps.upload_vtt.outputs.proxy_vtt }}
          TITLE_IN:   ${{ inputs.title }}
          POST_ID_IN: ${{ inputs.post_id }}
        run: |
          set -euxo pipefail
          JFILE="${ARTDIR}/register.json"
          TXFILE="${TX_PATH:-${ARTDIR}/${BASE}.txt}"
          ATFILE="${ATTN_HTML:-}"
          [ -f "$TXFILE" ] || : > "$TXFILE"
          AT_HTML=""
          if [ -n "${ATFILE}" ] && [ -f "${ATFILE}" ]; then
            AT_HTML="$(cat "${ATFILE}")"
          fi
          jq -n \
            --arg title "${TITLE_IN}" \
            --arg media "${MEDIA_URL}" \
            --arg mime  "audio/mpeg" \
            --arg vtt   "${VTT_URL}" \
            --arg pid   "${POST_ID_IN}" \
            --rawfile tx  "${TXFILE}" \
            --arg attendees_html "${AT_HTML}" '
              { title: ($title // ""), gcs_url: $media, mime: $mime }
              + (if ($vtt|length)>0 then {vtt_url:$vtt} else {} end)
              + (if ($tx|length)>0 then {transcript:$tx} else {} end)
              + (if ($attendees_html|length)>0 then {attendees_html:$attendees_html} else {} end)
              + ( ($pid|tonumber? // null) as $maybe
                  | if $maybe then {post_id:$maybe} else {} end )
            ' > "$JFILE"
          RESP="${ARTDIR}/register.out.json"
          curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
            -X POST "${WP_URL%/}/wp-json/ss3k/v1/register" \
            --data-binary @"${JFILE}" > "${RESP}"
          PERMA=$(jq -r '.permalink // ""' "${RESP}")
          EDIT_URL="${WP_URL%/}/wp-admin/post.php?post=${POST_ID_IN}&action=edit"
          if [ -n "${POST_ID_IN}" ]; then
            curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
              -X POST "${WP_URL%/}/wp-json/ss3k/v1/worker-status" \
              -d "$(jq -n --arg pid "${POST_ID_IN}" --arg status "complete" \
                         --arg msg "Worker finished. View: ${PERMA} Â· Edit: ${EDIT_URL}" \
                         --arg run "${{ github.run_id }}" --argjson progress 100 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"
          fi
          jq . "${RESP}" || true

      - name: Patch transcript/VTT only
        if: ${{ inputs.mode == 'transcript_only' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          VPROXY=""
          if [ -f "${VTT_PATH:-}" ]; then
            DEST_VTT="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
            PROXY_VTT="https://media.chbmp.org/${PREFIX}/${BASE}.vtt"
            gsutil cp "${VTT_PATH}" "$DEST_VTT"
            if [ "${{ inputs.make_public }}" = "true" ]; then
              gsutil acl ch -u AllUsers:R "$DEST_VTT" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
            fi
            VPROXY="$PROXY_VTT"
          fi
          BODY="$(jq -n \
            --arg pid "${{ inputs.post_id }}" \
            --arg vtt "${VPROXY}" \
            --rawfile tx "${TX_PATH:-${ARTDIR}/${BASE}.txt}" '
              { post_id: ($pid|tonumber), status:"complete", progress:100 }
              + (if ($vtt|length)>0 then {vtt_url:$vtt} else {} end)
              + (if ($tx|length)>0 then {transcript:$tx} else {} end)
          ')"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" -d "${BODY}"

      - name: Patch attendees only
        if: ${{ inputs.mode == 'attendees_only' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          ATFILE="${ATTN_HTML:-}"
          AT_HTML=""
          if [ -n "${ATFILE}" ] && [ -f "${ATFILE}" ]; then
            AT_HTML="$(cat "${ATFILE}")"
          fi
          BODY="$(jq -n --arg pid "${{ inputs.post_id }}" --arg attendees_html "${AT_HTML}" \
            '{ post_id: ($pid|tonumber), status:"complete", progress:100 }
             + (if ($attendees_html|length)>0 then {attendees_html:$attendees_html} else {} end)')"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" -d "${BODY}"

      - name: Ping WP on failure
        if: ${{ failure() && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "error" \
                       --arg msg "Worker failed. See GitHub run ${{ github.run_id }}." \
                       --arg run "${{ github.run_id }}" --argjson progress 100 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Job summary
        if: ${{ always() }}
        shell: bash
        run: |
          {
            echo "### Space Worker Summary"
            echo "- **Space URL:** ${{ inputs.space_url }}"
            echo "- **Space ID:**  ${{ steps.ids.outputs.space_id }}"
            echo "- **Post ID:**   ${{ inputs.post_id }}"
            if [ "${{ steps.upload_mp3.outputs.proxy_url }}" != "" ]; then
              echo "- **Audio (proxy):** ${{ steps.upload_mp3.outputs.proxy_url }}"
              echo "- **Audio (raw):**   ${{ steps.upload_mp3.outputs.raw_url }}"
            fi
            if [ "${{ steps.upload_vtt.outputs.proxy_vtt }}" != "" ]; then
              echo "- **VTT (proxy):** ${{ steps.upload_vtt.outputs.proxy_vtt }}"
              echo "- **VTT (raw):**   ${{ steps.upload_vtt.outputs.raw_vtt }}"
            fi
            echo "- **Crawler preflight OK:** ${{ steps.x_preflight.outputs.ok == '1' && 'yes' || 'no' }} (reason: ${{ steps.x_preflight.outputs.reason }})"
            echo "- **Public:**     ${{ inputs.make_public }}"
            echo "- **Transcript:** ${{ inputs.do_transcript }}"
            echo "- **Mode:**       ${{ inputs.mode }}"
            echo "- **Crawler start ISO (if any):** ${{ steps.crawl.outputs.started_iso }}"
          } >> "$GITHUB_STEP_SUMMARY"
