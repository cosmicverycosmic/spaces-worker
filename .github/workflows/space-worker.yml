name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: X or Twitter Space URL
        required: false
        type: string
        default: ""
      post_id:
        description: Existing WordPress post ID optional
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: GCS prefix default spaces YYYY/MM
        required: false
        type: string
        default: ""
      make_public:
        description: Make uploaded artifacts public
        required: false
        type: choice
        options: ["true","false"]
        default: "true"
      do_transcript:
        description: Generate transcript with Deepgram if crawler captions unavailable
        required: false
        type: choice
        options: ["true","false"]
        default: "true"
      mode:
        description: Limit processing to a specific area ('' = full)
        required: false
        type: choice
        options: ["", "transcript_only", "attendees_only", "watch"]
        default: ""
      existing_mp3_url:
        description: For transcript_only provide URL to existing MP3 to skip audio pipeline
        required: false
        type: string
        default: ""
      watch_users:
        description: Comma-separated X usernames to monitor (used when mode=watch)
        required: false
        type: string
        default: ""
      watch_duration_minutes:
        description: Minutes to monitor in watch mode (<= job timeout)
        required: false
        type: number
        default: 170
      purple_tweet_url:
        description: Promo “Purple Pill” tweet URL (optional; will be discovered from WP if omitted)
        required: false
        type: string
        default: ""

permissions:
  contents: read
  packages: read

concurrency:
  group: ${{ format('space-worker-{0}-{1}-{2}', github.ref, inputs.post_id != '' && inputs.post_id || github.run_id, inputs.watch_users) }}
  cancel-in-progress: false

env:
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}
  TWITTER_AUTHORIZATION: ${{ secrets.TWITTER_AUTHORIZATION || secrets.X_BEARER || vars.TWITTER_AUTHORIZATION || vars.X_BEARER }}
  TWITTER_AUTH_TOKEN:    ${{ secrets.TWITTER_AUTH_TOKEN    || secrets.X_AUTH_TOKEN || vars.TWITTER_AUTH_TOKEN || vars.X_AUTH_TOKEN }}
  TWITTER_CSRF_TOKEN:    ${{ secrets.TWITTER_CSRF_TOKEN    || secrets.X_CSRF       || vars.TWITTER_CSRF_TOKEN || vars.X_CSRF }}
  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  process:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Start queued status to WP
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                       --arg status "queued" \
                       --arg msg "Workflow received and queued" \
                       --arg run "${{ github.run_id }}" \
                       --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps and docker login
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Validate config and prefixes
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR" "$ARTDIR/logs"
          PFX="$(echo "${{ inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"
          if [ -z "$PFX" ]; then PFX="spaces/$(date +%Y)/$(date +%m)"; fi
          echo "PREFIX=$PFX"                  >> "$GITHUB_ENV"
          echo "BUCKET_PREFIX=${PFX#spaces/}" >> "$GITHUB_ENV"

      - name: Derive Space ID and base
        id: ids
        shell: bash
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          SID=""
          if [ -n "$URL" ]; then
            SID="$(echo "$URL" | sed -nE 's#^.*/i/spaces/([^/?#]+).*#\1#p')"
          fi
          if [ -z "$SID" ]; then SID="watch"; fi
          BASE="space-$(date +%m-%d-%Y)-${SID}"
          echo "SPACE_ID=${SID}" >> "$GITHUB_ENV"
          echo "BASE=${BASE}"    >> "$GITHUB_ENV"
          echo "space_id=${SID}" >> "$GITHUB_OUTPUT"
          echo "base=${BASE}"    >> "$GITHUB_OUTPUT"

      - name: GCP auth
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      - name: X preflight auth sanity check
        id: x_preflight
        shell: bash
        run: |
          set -euxo pipefail
          AUTH="${TWITTER_AUTHORIZATION:-}"
          AT="${TWITTER_AUTH_TOKEN:-}"
          CT="${TWITTER_CSRF_TOKEN:-}"
          if [ -n "$AUTH" ] && ! printf '%s' "$AUTH" | grep -q '^Bearer '; then AUTH=""; fi
          [ -n "${TWITTER_AUTHORIZATION:-}" ] && echo "::add-mask::${TWITTER_AUTHORIZATION}"
          [ -n "$AT" ] && echo "::add-mask::${AT}"
          [ -n "$CT" ] && echo "::add-mask::${CT}"
          OK=0; REASON="no_creds"
          [ -n "$AT" ] && [ -n "$CT" ] && OK=1 && REASON="cookie_ok" || true
          [ -n "$AUTH" ] && OK=1 && REASON="${REASON}_bearer_present" || true
          echo "ok=${OK}"         >> "$GITHUB_OUTPUT"
          echo "reason=${REASON}" >> "$GITHUB_OUTPUT"
          [ -n "$AUTH" ] && echo "TWITTER_AUTHORIZATION=$AUTH" >> "$GITHUB_ENV"

      # ——————————————————————————————————————————————
      #  A) CRAWLER-FIRST for attendees/audio/captions
      # ——————————————————————————————————————————————
      - name: Run crawler (by id or watch users) for attendees/audio/captions
        id: crawl
        if: ${{ steps.x_preflight.outputs.ok == '1' }}
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
          WATCH_USERS: ${{ inputs.watch_users }}
          WATCH_MIN: ${{ inputs.watch_duration_minutes }}
        run: |
          set -euxo pipefail
          mkdir -p "${ARTDIR}" "${ARTDIR}/logs"
          docker pull ghcr.io/hitomarukonpaku/twspace-crawler:latest || true
          LOG_STD="${ARTDIR}/logs/crawler_${SID}.out.log"
          LOG_ERR="${ARTDIR}/logs/crawler_${SID}.err.log"
          set +e
          if [ "${{ inputs.mode }}" = "watch" ] && [ -n "${WATCH_USERS:-}" ]; then
            timeout "${WATCH_MIN}m" docker run --rm \
              -e TWITTER_AUTHORIZATION \
              -e TWITTER_AUTH_TOKEN \
              -e TWITTER_CSRF_TOKEN \
              -v "${ARTDIR}:/app/download" \
              -v "${ARTDIR}/logs:/app/logs" \
              ghcr.io/hitomarukonpaku/twspace-crawler:latest \
              --user "${WATCH_USERS}" > >(tee -a "$LOG_STD") 2> >(tee -a "$LOG_ERR" >&2)
          else
            timeout 20m docker run --rm \
              -e TWITTER_AUTHORIZATION \
              -e TWITTER_AUTH_TOKEN \
              -e TWITTER_CSRF_TOKEN \
              -v "${ARTDIR}:/app/download" \
              -v "${ARTDIR}/logs:/app/logs" \
              ghcr.io/hitomarukonpaku/twspace-crawler:latest \
              --id "${SID}" --force > >(tee -a "$LOG_STD") 2> >(tee -a "$LOG_ERR" >&2)
          fi
          RC=$?
          set -e
          echo "crawler_exit=${RC}"
          AUDIO_FILE="$(find "${ARTDIR}" -type f \( -iname '*.m4a' -o -iname '*.mp3' -o -iname '*.mp4' -o -iname '*.aac' -o -iname '*.webm' -o -iname '*.ogg' -o -iname '*.wav' -o -iname '*.ts' \) -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          if [ -n "${AUDIO_FILE:-}" ] && [ -f "${AUDIO_FILE}" ]; then
            echo "INPUT_FILE=${AUDIO_FILE}" >> "$GITHUB_ENV"
            echo "audio_file=${AUDIO_FILE}" >> "$GITHUB_OUTPUT"
          fi
          RAW="$(grep -hF 'getAudioSpaceById |' "$LOG_STD" "$LOG_ERR" | tail -n1 || true)"
          if [ -z "$RAW" ]; then
            RAW="$(grep -hF 'getAudioSpaceByRestId |' "$LOG_STD" "$LOG_ERR" | tail -n1 || true)"
          fi
          if [ -n "$RAW" ]; then
            printf '%s\n' "$RAW" | awk -F'\\| ' '{print $NF}' > "${ARTDIR}/_as_line_after_pipe.txt" || true
          fi
          [ -s "${ARTDIR}/_as_line_after_pipe.txt" ] && echo "as_line=${ARTDIR}/_as_line_after_pipe.txt" >> "$GITHUB_OUTPUT" || true
          CRAWLER_VTT="$(find "${ARTDIR}" -type f \( -iname '*.vtt' -o -iname '*.webvtt' \) -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          if [ -n "${CRAWLER_VTT:-}" ] && [ -s "${CRAWLER_VTT}" ]; then
            cp "${CRAWLER_VTT}" "${ARTDIR}/${BASE}.vtt"
            echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV"
          fi

      - name: Build attendees JSON/HTML
        id: attendees
        if: ${{ steps.crawl.outcome == 'success' && steps.crawl.outputs.as_line != '' }}
        shell: bash
        env:
          CAND: ${{ steps.crawl.outputs.as_line }}
        run: |
          set -euxo pipefail
          OUT_JSON="${ARTDIR}/attendees.json"
          OUT_HTML="${ARTDIR}/attendees.html"
          jq -r '
            def mkp:
              { handle: (.twitter_screen_name // .user_results?.result?.legacy?.screen_name),
                name:   (.display_name       // .user_results?.result?.legacy?.name)
              }
              | select(.handle!=null and .handle!="")
              | . + { url: ("https://x.com/" + .handle) };
            (.audioSpace // .) as $a
            | ($a.metadata?.creator_results?.result?.legacy?) as $h
            | ($h.screen_name // empty) as $H
            | {
                host:    ( if $H != "" then [ {handle:$H, name:($h.name // ""), url:("https://x.com/" + $H)} ] else [] end ),
                cohosts: ( ($a.participants?.admins   // []) | map(mkp) | map(select(.handle != $H)) | unique_by(.handle) ),
                speakers:( ($a.participants?.speakers // []) | map(mkp) | unique_by(.handle) )
              }
          ' "${CAND}" > "$OUT_JSON" || true
          if [ -s "$OUT_JSON" ]; then
            jq -r '
              def li: "  <li><a href=\"" + (.url//"#") + "\" target=\"_blank\" rel=\"noopener\">" + ((.name // "") + " (@" + (.handle // "") + ")") + "</a></li>";
              def section(title; items):
                if (items|length) > 0
                then "<h3>" + title + "</h3>\n<ul>\n" + (items|map(li)|join("\n")) + "\n</ul>\n"
                else ""
                end;
              . as $d
              | section("Host"; $d.host)
              + section( (if ($d.cohosts|length)==1 then "Co-host" else "Co-hosts" end); $d.cohosts)
              + section("Speakers"; $d.speakers)
            ' "$OUT_JSON" > "$OUT_HTML"
            if grep -qi '<li><a ' "$OUT_HTML"; then
              echo "ATTN_HTML=${OUT_HTML}" >> "$GITHUB_ENV"
              echo "ATTENDEES_OK=1"       >> "$GITHUB_ENV"
            fi
          fi

      # ——————————————————————————————————————————————
      #  B) PURPLE PILL REPLIES → SHARED LINKS (HTML)
      # ——————————————————————————————————————————————
      - name: Discover Purple Tweet (from input or WP)
        id: purple
        if: ${{ inputs.purple_tweet_url != '' || (env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '') }}
        shell: bash
        run: |
          set -euo pipefail
          PT_URL="${{ inputs.purple_tweet_url }}"
          if [ -z "$PT_URL" ]; then
            PT_URL="$(curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
              "${WP_BASE_URL%/}/wp-json/ss3k/v1/post-info?post_id=${{ inputs.post_id }}" \
              | jq -r '.purple_tweet_url // ""')"
          fi
          echo "url=${PT_URL}" >> "$GITHUB_OUTPUT"
          if [ -n "$PT_URL" ]; then
            TID="$(printf '%s\n' "$PT_URL" | sed -nE 's#^.*/status/([0-9]+).*#\1#p')"
            echo "tweet_id=${TID}" >> "$GITHUB_OUTPUT"
          fi

      - name: Collect external links from replies
        id: links
        if: ${{ steps.purple.outputs.tweet_id != '' && steps.x_preflight.outputs.ok == '1' }}
        shell: bash
        env:
          TID: ${{ steps.purple.outputs.tweet_id }}
        run: |
          set -euxo pipefail
          mkdir -p "${ARTDIR}"
          API="https://x.com/i/api/2/timeline/conversation/${TID}.json?tweet_mode=extended&include_entities=1"
          AUTH="${TWITTER_AUTHORIZATION:-}"; AT="${TWITTER_AUTH_TOKEN:-}"; CT="${TWITTER_CSRF_TOKEN:-}"
          HDR_COMMON=(-H 'accept: application/json, text/plain, */*' -H 'user-agent: Mozilla/5.0 (SS3K/links)')
          OUT_JSON="${ARTDIR}/conversation_${TID}.json"
          ok=0
          if [ -n "$AT" ] && [ -n "$CT" ] && [ -n "$AUTH" ]; then
            curl -sS "${HDR_COMMON[@]}" \
              -H "authorization: ${AUTH}" \
              -H "x-csrf-token: ${CT}" \
              -H "cookie: auth_token=${AT}; ct0=${CT}" \
              "$API" -o "$OUT_JSON" && ok=1 || ok=0
          fi
          if [ $ok -eq 0 ] && [ -n "$AUTH" ]; then
            GUEST="$(curl -sS -X POST -H "authorization: ${AUTH}" -H 'content-type: application/json' https://api.twitter.com/1.1/guest/activate.json -d '{}' | jq -r '.guest_token // empty')"
            if [ -n "$GUEST" ]; then
              curl -sS "${HDR_COMMON[@]}" -H "authorization: ${AUTH}" -H "x-guest-token: ${GUEST}" "$API" -o "$OUT_JSON" && ok=1 || ok=0
            fi
          fi
          if [ $ok -eq 0 ]; then
            echo "No conversation JSON; skipping link extraction."
            exit 0
          fi

          # Extract unique expanded URLs in replies and render HTML list (exclude X/Twitter/t.co)
          LINKS_TXT="${ARTDIR}/links_${TID}.txt"
          jq -r '
            [
              (.globalObjects?.tweets // {} | to_entries[]?.value) as $tw
              | $tw.entities?.urls[]?.expanded_url
            ] | unique | .[]? ' "$OUT_JSON" \
            | sed -E 's/[[:space:]]+$//' | grep -E '^https?://' \
            | grep -Ev '^https?://(x\.com|twitter\.com|t\.co)/' \
            > "$LINKS_TXT" || true

          OUT_HTML="${ARTDIR}/shared_links.html"
          if [ -s "$LINKS_TXT" ]; then
            {
              echo "<ul>"
              while IFS= read -r u; do
                esc="$(printf '%s' "$u" | sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e 's/\"/\&quot;/g')"
                printf '  <li><a href="%s" target="_blank" rel="noopener">%s</a></li>\n' "$esc" "$esc"
              done < "$LINKS_TXT"
              echo "</ul>"
            } > "$OUT_HTML"
            echo "LINKS_HTML=${OUT_HTML}" >> "$GITHUB_ENV"
          fi

      # ——————————————————————————————————————————————
      # (the rest of your audio/transcript steps unchanged)
      # ——————————————————————————————————————————————
      - name: Ping processing audio
        if: ${{ inputs.mode != 'attendees_only' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Processing audio" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      # ... (yt-dlp fallback, trim, loudnorm, upload MP3, captions via crawler/Deepgram, upload VTT) ...

      - name: Patch WP (attendees + links + assets)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        env:
          PID: ${{ inputs.post_id }}
          AUD: ${{ steps.upload_mp3.outputs.audio_proxy }}
          VTT: ${{ steps.upload_vtt.outputs.vtt_proxy }}
        run: |
          set -euo pipefail
          AT_HTML=""
          if [ -n "${ATTN_HTML:-}" ] && [ -s "${ATTN_HTML:-}" ]; then
            AT_HTML="$(cat "${ATTN_HTML}")"
          fi
          LINKS_HTML=""
          if [ -n "${LINKS_HTML:-}" ] && [ -s "${LINKS_HTML:-}" ]; then
            LINKS_HTML="$(cat "${LINKS_HTML}")"
          fi

          BODY="$(jq -n \
            --arg pid    "${PID}" \
            --arg aud    "${AUD}" \
            --arg vtt    "${VTT}" \
            --arg athtml "${AT_HTML}" \
            --arg lhtml  "${LINKS_HTML}" '
            {
              post_id: ($pid|tonumber),
              status: "complete",
              progress: 100
            }
            + (if ($aud|length)>0 then {audio_url:$aud} else {} end)
            + (if ($vtt|length)>0 then {vtt_url:$vtt, has_transcript:true} else {} end)
            + (if ($athtml|length)>0 then {attendees:$athtml} else {} end)
            + (if ($lhtml|length)>0 then {links_html:$lhtml} else {} end)
          ')"

          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" -d "$BODY" | jq -r .

      - name: Summary
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
        run: |
          {
            echo "### Space Worker Summary"
            echo "- Space URL ${{ inputs.space_url }}"
            echo "- Space ID  ${SID}"
            echo "- Post ID   ${{ inputs.post_id }}"
            if [ -n "${{ steps.upload_mp3.outputs.audio_proxy }}" ]; then
              echo "- Audio     ${{ steps.upload_mp3.outputs.audio_proxy }}"
            fi
            if [ -n "${{ steps.upload_vtt.outputs.vtt_proxy }}" ]; then
              echo "- VTT       ${{ steps.upload_vtt.outputs.vtt_proxy }}"
            fi
            if [ "${ATTENDEES_OK:-0}" = "1" ]; then
              echo "- Attendees saved to WP (HTML)"
            fi
            if [ -n "${{ steps.purple.outputs.url }}" ]; then
              echo "- Purple tweet: ${{ steps.purple.outputs.url }}"
            fi
            if [ -n "${LINKS_HTML:-}" ]; then
              echo "- Shared links extracted and saved"
            fi
            echo "- Preflight ok=${{ steps.x_preflight.outputs.ok }} reason=${{ steps.x_preflight.outputs.reason }}"
            echo "- Mode      ${{ inputs.mode }}"
            if [ "${{ inputs.mode }}" = "watch" ]; then
              echo "- Watch users: ${{ inputs.watch_users }} (for ${{ inputs.watch_duration_minutes }}m)"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
