name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: "X (Twitter) Space URL (https://x.com/i/spaces/...)"
        required: true
        type: string
      title:
        description: "Post title to use in WordPress (fallback if no post_id)"
        required: false
        type: string
        default: ""
      post_id:
        description: "Existing WP post_id to register/patch (optional)"
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: "GCS prefix/folder (e.g. spaces/2025/02). Empty = auto spaces/YYYY/MM"
        required: false
        type: string
        default: ""
      make_public:
        description: "Set GCS objects to public?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      do_transcript:
        description: "Generate diarized transcript + VTT via Deepgram?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      wp_marker:
        description: "Opaque marker from WP (optional)"
        required: false
        type: string
        default: ""
      space_id:
        description: "Space ID (e.g. 1kvJpyzZOOkxE); auto-parsed from URL if blank"
        required: false
        type: string
        default: ""
      mode:
        description: "Optional targeted mode"
        required: false
        type: choice
        options: ["", "transcript_only", "attendees_only"]
        default: ""
      existing_mp3_url:
        description: "For transcript_only: URL of the already-encoded MP3"
        required: false
        type: string
        default: ""

permissions:
  contents: read
  packages: read

concurrency:
  group: ${{ format('space-worker-{0}-{1}', github.ref, inputs.post_id != '' && inputs.post_id || github.run_id) }}
  cancel-in-progress: false

env:
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}
  # Optional: for twspace-crawler (use either official Bearer OR unofficial cookie pair)
  # Optional: for twspace-crawler (use either official Bearer OR the auth_token+ct0 cookie pair)
  TWITTER_AUTHORIZATION: ${{ secrets.TWITTER_AUTHORIZATION || secrets.TWITTER_BEARER || vars.TWITTER_AUTHORIZATION || vars.TWITTER_BEARER }}
  TWITTER_AUTH_TOKEN:    ${{ secrets.TWITTER_AUTH_TOKEN    || vars.TWITTER_AUTH_TOKEN }}
  TWITTER_CSRF_TOKEN:    ${{ secrets.TWITTER_CSRF_TOKEN    || vars.TWITTER_CSRF_TOKEN }}
  

  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  run:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Start / ping WP (queued)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "queued" \
                       --arg msg "Workflow received and queued." \
                       --arg run "${{ github.run_id }}" --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps (ffmpeg, jq, yt-dlp, gcloud) + Docker login for GHCR
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Validate secrets / normalize prefix (and compute BUCKET_PREFIX)
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR"

          # Prefix: default to spaces/YYYY/MM
          PFX="$(echo "${{ inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"
          if [ -z "$PFX" ]; then
            PFX="spaces/$(date +%Y)/$(date +%m)"
          fi
          echo "prefix=${PFX}" >> "$GITHUB_OUTPUT"
          echo "PREFIX=${PFX}" >> "$GITHUB_ENV"

          # If PREFIX is "spaces/YYYY/MM", drop leading "spaces/" for the bucket
          BP="${PFX#spaces/}"
          echo "BUCKET_PREFIX=${BP}" >> "$GITHUB_ENV"

      - name: Derive Space ID and base filename
        id: ids
        shell: bash
        env:
          INP_SPACE_ID: ${{ inputs.space_id }}
          URL:          ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          SID="${INP_SPACE_ID}"
          if [ -z "$SID" ]; then
            SID="$(echo "$URL" | sed -nE 's#^.*/i/spaces/([^/?#]+).*#\1#p')"
          fi
          test -n "$SID" || { echo "Could not parse Space ID"; exit 1; }
          # Filename format: space-month-day-year-spaceIDstring
          BASE="space-$(date +%m-%d-%Y)-${SID}"
          echo "space_id=${SID}" >> "$GITHUB_OUTPUT"
          echo "BASE=${BASE}"     >> "$GITHUB_OUTPUT"
          echo "SPACE_ID=${SID}"  >> "$GITHUB_ENV"
          echo "BASE=${BASE}"     >> "$GITHUB_ENV"

      - name: GCP auth (service account)
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s\n' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      # ===========================
      # DOWNLOAD/ENCODE (full run)
      # ===========================
      - name: Ping (downloading)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Downloading Space audio…" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Download Space audio (yt-dlp bestaudio)
        if: ${{ inputs.mode == '' }}
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          yt-dlp -o "%(title)s.%(ext)s" -f "bestaudio/best" "$URL"
          IN="$(ls -S | head -n1 || true)"
          test -f "$IN" || { echo "No file downloaded"; exit 1; }
          echo "INPUT_FILE=$PWD/$IN" >> "$GITHUB_ENV"

      - name: Ping (downloaded)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SIZE=$(stat -c%s "$INPUT_FILE" 2>/dev/null || echo 0)
          MSG="Downloaded: $(basename "$INPUT_FILE") (${SIZE} bytes)"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 25 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (trimming head/tail silence)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Trimming start/end dead air (pre-normalize)…" \
                         --arg run "${{ github.run_id }}" --argjson progress 28 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Head/tail silence trim (pre-normalize)
        if: ${{ inputs.mode == '' }}
        shell: bash
        run: |
          set -euxo pipefail
          TRIM_WAV="${WORKDIR}/trimmed_${{ github.run_id }}.wav"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" \
            -af "silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse,silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse" \
            -ar 48000 -ac 2 -c:a pcm_s16le "$TRIM_WAV"
          echo "AUDIO_IN=${TRIM_WAV}" >> "$GITHUB_ENV"

      - name: Ping (normalizing)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Normalizing & encoding to MP3…" \
                         --arg run "${{ github.run_id }}" --argjson progress 30 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Loudness normalization → MP3
        if: ${{ inputs.mode == '' }}
        shell: bash
        run: |
          set -euxo pipefail
          PASS1_JSON="${WORKDIR}/loudnorm_pass1_${{ github.run_id }}.json"
          ffmpeg -hide_banner -y -i "$AUDIO_IN" -af loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json -f null - 2>"${WORKDIR}/pass1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true
          ILOG="$(cat "$PASS1_JSON" 2>/dev/null || echo '{}')"
          ME_I=$(jq -r '.input_i // "-16"'    <<<"$ILOG")
          ME_TP=$(jq -r '.input_tp // "-1.5"' <<<"$ILOG")
          ME_LRA=$(jq -r '.input_lra // "11"'  <<<"$ILOG")
          ME_THR=$(jq -r '.input_thresh // "-26"'<<<"$ILOG")

          # Use BASE computed earlier (space-mm-dd-YYYY-SPACEID)
          OUT_MP3="${ARTDIR}/${BASE}.mp3"
          ffmpeg -hide_banner -y -i "$AUDIO_IN" \
            -af "loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=${ME_I}:measured_TP=${ME_TP}:measured_LRA=${ME_LRA}:measured_thresh=${ME_THR}:print_format=summary" \
            -ar 48000 -ac 2 -codec:a libmp3lame -b:a 128k "$OUT_MP3"
          echo "OUT_MP3=$OUT_MP3" >> "$GITHUB_ENV"

      - name: Ping (encoded)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SIZE=$(stat -c%s "$OUT_MP3" 2>/dev/null || echo 0)
          MSG="MP3 ready: $(basename "$OUT_MP3") (${SIZE} bytes)"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 50 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (uploading MP3)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Uploading MP3 to GCS…" \
                         --arg run "${{ github.run_id }}" --argjson progress 55 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Upload MP3 to GCS (bucket path fix + proxy URL)
        id: upload_mp3
        if: ${{ inputs.mode == '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          RAW_URL="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          PROXY_URL="https://media.chbmp.org/${PREFIX}/${BASE}.mp3"
          gsutil cp "$OUT_MP3" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          echo "raw_url=${RAW_URL}"   >> "$GITHUB_OUTPUT"
          echo "proxy_url=${PROXY_URL}" >> "$GITHUB_OUTPUT"

      - name: Ping (uploaded MP3)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' && steps.upload_mp3.outputs.proxy_url != '' }}
        shell: bash
        run: |
          set -euo pipefail
          MSG="MP3: ${{ steps.upload_mp3.outputs.proxy_url }} (raw: ${{ steps.upload_mp3.outputs.raw_url }})"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 60 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      # =========================================
      # TRANSCRIPT/VTT (full or transcript_only)
      # =========================================
      - name: Fetch existing MP3 for transcript_only
        if: ${{ inputs.mode == 'transcript_only' && inputs.existing_mp3_url != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "${ARTDIR}"
          OUT_MP3="${ARTDIR}/${BASE}.mp3"
          curl -L -o "$OUT_MP3" "${{ inputs.existing_mp3_url }}"
          echo "OUT_MP3=$OUT_MP3" >> "$GITHUB_ENV"

      - name: Ping (transcribing)
        if: ${{ inputs.mode != 'attendees_only' && inputs.do_transcript == 'true' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Deepgram: diarized transcript & VTT…" \
                         --arg run "${{ github.run_id }}" --argjson progress 70 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Transcript + diarized VTT (Deepgram)
        id: tx
        if: ${{ inputs.mode != 'attendees_only' && inputs.do_transcript == 'true' }}
        shell: bash
        env:
          DG_KEY: ${{ env.DEEPGRAM_API_KEY }}
        run: |
          set -euxo pipefail
          test -n "$DG_KEY" || { echo "DEEPGRAM_API_KEY not set"; exit 1; }
          DG_JSON="${ARTDIR}/dg.json"
          TX_PATH="${ARTDIR}/${BASE}.txt"
          VTT_PATH="${ARTDIR}/${BASE}.vtt"

          curl -sS -X POST "https://api.deepgram.com/v1/listen?smart_format=true&model=nova-2&diarize=true&utterances=true" \
            -H "Authorization: Token ${DG_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${OUT_MP3}" > "${DG_JSON}"

          if jq -e '(.results.utterances? | length) > 0' "${DG_JSON}" >/dev/null; then
            jq -r '.results.utterances[] | "\((.speaker // 0))\t\(.transcript // "")"' "${DG_JSON}" \
            | awk -F '\t' '
              BEGIN{ last=-1; buf="" }
              { sp=$1+0; txt=$2; gsub(/\r/,"",txt);
                if (sp==last) { if (buf!="") buf=buf " " txt; else buf=txt }
                else { if (last!=-1) printf("Speaker %d: %s\n\n", last+1, buf); last=sp; buf=txt } }
              END { if (last!=-1) printf("Speaker %d: %s\n", last+1, buf) }
            ' > "${TX_PATH}"
          else
            jq -r '.results.channels[0].alternatives[0].transcript // ""' "${DG_JSON}" > "${TX_PATH}"
          fi

          if jq -e '(.results.utterances? | length) > 0' "${DG_JSON}" >/dev/null; then
            {
              echo "WEBVTT"; echo
              jq -c '.results.utterances[] | {s:(.start // 0), e:(.end // 0), sp:(.speaker // 0), t:(.transcript // "")}' "${DG_JSON}" \
              | awk '
                function to_vtt(t,   h,m,s,ms,tmp){h=int(t/3600);tmp=t-h*3600;m=int(tmp/60);s=tmp-m*60;ms=int((s-int(s))*1000);s=int(s);return sprintf("%02d:%02d:%02d.%03d",h,m,s,ms)}
                { gsub(/[{}]/,""); n=$0
                  match(n, /"s":[^,]*/); sline=substr(n,RSTART,RLENGTH); sub(/"s":/,"",sline); s= sline+0
                  match(n, /"e":[^,]*/); eline=substr(n,RSTART,RLENGTH); sub(/"e":/,"",eline); e= eline+0
                  match(n, /"sp":[^,]*/); pline=substr(n,RSTART,RLENGTH); sub(/"sp":/,"",pline); sp= pline+0
                  match(n, /"t":.*/); tline=substr(n,RSTART+4)
                  if (substr(tline,1,1)=="\"") tline=substr(tline,2)
                  if (substr(tline,length(tline),1)=="\"") tline=substr(tline,1,length(tline)-1)
                  gsub(/\\n/,"\n",tline); gsub(/\\t/,"\t",tline); gsub(/\\"/,"\"",tline); gsub(/\\\\/,"\\",tline)
                  printf("%s --> %s\n", to_vtt(s), to_vtt(e))
                  printf("Speaker %d: %s\n\n", sp+1, tline)
                }'
            } > "${VTT_PATH}"
          else
            printf "WEBVTT\n\n" > "${VTT_PATH}"
          fi

          echo "TX_PATH=${TX_PATH}"   >> "$GITHUB_ENV"
          echo "VTT_PATH=${VTT_PATH}" >> "$GITHUB_ENV"

      - name: Ping (transcribed)
        if: ${{ steps.tx.outcome == 'success' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Transcript & (diarized) VTT created." \
                       --arg run "${{ github.run_id }}" --argjson progress 80 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (uploading VTT)
        if: ${{ steps.tx.outcome == 'success' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Uploading VTT to GCS…" \
                       --arg run "${{ github.run_id }}" --argjson progress 85 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Upload VTT to GCS (bucket path fix + proxy URL)
        id: upload_vtt
        if: ${{ steps.tx.outcome == 'success' }}
        shell: bash
        run: |
          set -euxo pipefail
          test -f "${VTT_PATH}" || { echo "No VTT produced"; exit 1; }
          DEST_VTT="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          RAW_VTT="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          PROXY_VTT="https://media.chbmp.org/${PREFIX}/${BASE}.vtt"
          gsutil cp "${VTT_PATH}" "$DEST_VTT"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST_VTT" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          echo "raw_vtt=${RAW_VTT}"     >> "$GITHUB_OUTPUT"
          echo "proxy_vtt=${PROXY_VTT}" >> "$GITHUB_OUTPUT"


      # === Peek attendees (Host / Co-hosts / Speakers) - ROBUST + DEBUG + Correct Vars ===
      - name: Scrape attendees using twspace-crawler (robust, debug, retries, WP fallback)
        id: twspace_attendees
        shell: bash
        env:
          ARTDIR: ${{ github.workspace }}/out
          ATTN_JSON: ${{ github.workspace }}/out/attendees.json
          ATTN_HTML: ${{ github.workspace }}/out/attendees.html
          WP_URL:  ${{ env.WP_BASE_URL }}
          WP_AUTH: ${{ env.WP_USER }}:${{ env.WP_APP_PASSWORD }}
          SID: ${{ inputs.space_id }}
          URL: ${{ inputs.space_url }}
          # --- Twitter/X credentials (either Bearer OR cookie pair)
          TWITTER_AUTHORIZATION: ${{ env.TWITTER_AUTHORIZATION }}
          TWITTER_AUTH_TOKEN:    ${{ env.TWITTER_AUTH_TOKEN }}
          TWITTER_CSRF_TOKEN:    ${{ env.TWITTER_CSRF_TOKEN }}
        run: |
          set -euxo pipefail

          # Mask sensitive values in logs
          [ -n "${TWITTER_AUTHORIZATION:-}" ] && echo "::add-mask::${TWITTER_AUTHORIZATION}"
          [ -n "${TWITTER_AUTH_TOKEN:-}" ]    && echo "::add-mask::${TWITTER_AUTH_TOKEN}"
          [ -n "${TWITTER_CSRF_TOKEN:-}" ]    && echo "::add-mask::${TWITTER_CSRF_TOKEN}"
          [ -n "${WP_USER:-}" ] && [ -n "${WP_APP_PASSWORD:-}" ] && echo "::add-mask::${WP_USER}:${WP_APP_PASSWORD}"

          # Debugging log for env and inputs (masked)
          echo "=== [twspace-crawler DEBUG] ==="
          echo "ARTDIR: $ARTDIR"
          echo "SID: ${SID:-<none>}"
          echo "URL: $URL"
          echo "TWITTER_AUTHORIZATION set?: $([ -n "${TWITTER_AUTHORIZATION:-}" ] && echo yes || echo no)"
          echo "TWITTER_AUTH_TOKEN set?:    $([ -n "${TWITTER_AUTH_TOKEN:-}" ] && echo yes || echo no)"
          echo "TWITTER_CSRF_TOKEN set?:    $([ -n "${TWITTER_CSRF_TOKEN:-}" ] && echo yes || echo no)"
          echo "WP_URL: ${WP_URL:-<none>}"
          echo "=============================="

          : > "$ATTN_HTML"

          HAVE_KEYS=0
          if [ -n "${TWITTER_AUTHORIZATION:-}" ] || { [ -n "${TWITTER_AUTH_TOKEN:-}" ] && [ -n "${TWITTER_CSRF_TOKEN:-}" ]; }; then
            HAVE_KEYS=1
          fi

          CRAWLER_RC=1
          CRAWLER_ATTEMPTS=0
          MAX_CRAWLER_RETRIES=3

          # Try twspace-crawler with retries
          if [ "$HAVE_KEYS" = "1" ]; then
            docker pull ghcr.io/hitomarukonpaku/twspace-crawler:latest
            while [ $CRAWLER_ATTEMPTS -lt $MAX_CRAWLER_RETRIES ]; do
              set +e
              echo "Attempt $(($CRAWLER_ATTEMPTS + 1)) running twspace-crawler..."
              docker run --rm \
                -e TWITTER_AUTHORIZATION \
                -e TWITTER_AUTH_TOKEN \
                -e TWITTER_CSRF_TOKEN \
                -v "${ARTDIR}:/out" \
                ghcr.io/hitomarukonpaku/twspace-crawler:latest \
                --space-id "$SID" --attendees --out /out/attendees.json
              CRAWLER_RC=$?
              set -e
              echo "twspace-crawler exit code: $CRAWLER_RC"
              # Debug: show JSON (first 20 lines)
              if [ -f "$ATTN_JSON" ]; then
                echo "--- [twspace-crawler output - first 20 lines] ---"
                head -20 "$ATTN_JSON" || true
                echo "--- [end output] ---"
              else
                echo "No attendees.json found."
              fi
              # If success and valid, break
              if [ $CRAWLER_RC -eq 0 ] && jq -e '.host? or .cohosts? or .speakers?' "$ATTN_JSON" >/dev/null 2>&1; then
                break
              fi
              CRAWLER_ATTEMPTS=$((CRAWLER_ATTEMPTS + 1))
              sleep $((2 ** CRAWLER_ATTEMPTS))
            done
            # If valid output, convert to HTML
            if [ -f "$ATTN_JSON" ] && jq -e '.host? or .cohosts? or .speakers?' "$ATTN_JSON" >/dev/null 2>&1; then
              {
                echo "<ul>"
                echo "  <li><strong>Host</strong><ul>"
                jq -r '.host[]? | @tsv' "$ATTN_JSON" | while IFS=$'\t' read -r name handle url; do
                  [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                done
                echo "  </ul></li>"
                echo "  <li><strong>Co-hosts</strong><ul>"
                jq -r '.cohosts[]? | @tsv' "$ATTN_JSON" | while IFS=$'\t' read -r name handle url; do
                  [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                done
                echo "  </ul></li>"
                echo "  <li><strong>Speakers</strong><ul>"
                jq -r '.speakers[]? | @tsv' "$ATTN_JSON" | while IFS=$'\t' read -r name handle url; do
                  [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                done
                echo "  </ul></li>"
                echo "</ul>"
              } > "$ATTN_HTML"
              echo "--- [attendees.html generated from crawler] ---"
              head -20 "$ATTN_HTML" || true
              echo "--- [end attendees.html] ---"
            fi
          else
            echo "No Twitter credentials present, skipping twspace-crawler."
          fi

          # Fallback to WP /peek if needed
          if [ ! -s "$ATTN_HTML" ] && [ -n "${WP_URL:-}" ] && [ -n "${WP_AUTH:-}" ]; then
            echo "Falling back to WordPress /peek endpoint..."
            curl -sS -u "$WP_AUTH" \
              --get --data-urlencode "space_url=$URL" \
              "${WP_URL%/}/wp-json/ss3k/v1/peek" > "$ATTN_JSON" || true
            echo "--- [WP /peek output - first 20 lines] ---"
            head -20 "$ATTN_JSON" || true
            echo "--- [end WP /peek output] ---"
            if jq -e '.html? | length>0' "$ATTN_JSON" >/dev/null 2>&1; then
              jq -r '.html' "$ATTN_JSON" > "$ATTN_HTML"
              echo "--- [attendees.html generated from WP /peek .html] ---"
              head -20 "$ATTN_HTML" || true
              echo "--- [end attendees.html] ---"
            elif jq -e '.host? or .cohosts? or .speakers?' "$ATTN_JSON" >/dev/null 2>&1; then
              {
                echo "<ul>"
                echo "  <li><strong>Host</strong><ul>"
                jq -r '.host[]? | @tsv' "$ATTN_JSON" | while IFS=$'\t' read -r name handle url; do
                  [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                done
                echo "  </ul></li>"
                echo "  <li><strong>Co-hosts</strong><ul>"
                jq -r '.cohosts[]? | @tsv' "$ATTN_JSON" | while IFS=$'\t' read -r name handle url; do
                  [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                done
                echo "  </ul></li>"
                echo "  <li><strong>Speakers</strong><ul>"
                jq -r '.speakers[]? | @tsv' "$ATTN_JSON" | while IFS=$'\t' read -r name handle url; do
                  [ -n "$name" ] && [ -n "$url" ] && echo "    <li><a href=\"$url\" target=\"_blank\">$name (@$handle)</a></li>"
                done
                echo "  </ul></li>"
                echo "</ul>"
              } > "$ATTN_HTML"
              echo "--- [attendees.html generated from WP /peek keys] ---"
              head -20 "$ATTN_HTML" || true
              echo "--- [end attendees.html] ---"
            else
              echo "No attendees found in WP /peek output."
            fi
          fi

          # Final check and debug output
          if [ ! -s "$ATTN_HTML" ]; then
            echo "WARNING: No attendee HTML generated from either twspace-crawler or WP /peek!"
          fi

          echo "ATTN_HTML=$ATTN_HTML" >> "$GITHUB_ENV"


      # ===========================
      # Derive Space date and set WP post date
      # ===========================
      - name: Derive Space date (metadata) and update post date
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          META="${ARTDIR}/space_meta.json"
          SPACE_ISO=""

          # Try yt-dlp JSON for timestamp info
          yt-dlp -J "$URL" > "$META" 2>/dev/null || true
          TS="$(jq -r '(.release_timestamp // .timestamp // empty)' "$META" 2>/dev/null || true)"
          if [ -n "$TS" ] && [[ "$TS" =~ ^[0-9]+$ ]]; then
            SPACE_ISO="$(date -u -d "@$TS" '+%Y-%m-%dT%H:%M:%S')"
          else
            UD="$(jq -r '.upload_date // empty' "$META" 2>/dev/null || true)" # YYYYMMDD
            if [ -n "$UD" ] && [[ "$UD" =~ ^[0-9]{8}$ ]]; then
              SPACE_ISO="$(date -u -d "${UD}" '+%Y-%m-%dT12:00:00')" # noon UTC if date-only
            fi
          fi

          if [ -n "$SPACE_ISO" ]; then
            # Update WP post date
            curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
              -X POST "${WP_BASE_URL%/}/wp-json/wp/v2/spaces/${{ inputs.post_id }}" \
              -d "$(jq -n --arg d "$SPACE_ISO" '{date: $d}')"
            # Log
            curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
              -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
              -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                         --arg msg "Post date set to ${SPACE_ISO} (UTC) based on Space metadata." \
                         --arg run "${{ github.run_id }}" --argjson progress 92 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"
          fi

      # ===========================
      # REGISTER (full) or PATCH (targeted modes)
      # ===========================
      - name: Ping (registering in WordPress)
        if: ${{ inputs.mode == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' && steps.upload_mp3.outputs.proxy_url != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Registering assets in WordPress…" \
                       --arg run "${{ github.run_id }}" --argjson progress 95 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Register in WordPress (final-only; includes attendees)
        id: register
        if: ${{ inputs.mode == '' && steps.upload_mp3.outputs.proxy_url != '' }}
        shell: bash
        env:
          WP_URL:  ${{ env.WP_BASE_URL }}
          WP_AUTH: ${{ env.WP_USER }}:${{ env.WP_APP_PASSWORD }}
          MEDIA_URL: ${{ steps.upload_mp3.outputs.proxy_url }}
          VTT_URL:   ${{ steps.upload_vtt.outputs.proxy_vtt }}
          TITLE_IN:   ${{ inputs.title }}
          POST_ID_IN: ${{ inputs.post_id }}
        run: |
          set -euxo pipefail
          JFILE="${ARTDIR}/register.json"
          TXFILE="${TX_PATH:-${ARTDIR}/${BASE}.txt}"
          ATFILE="${ATTN_HTML:-}"
          [ -f "$TXFILE" ] || : > "$TXFILE"
          AT_HTML=""
          if [ -n "${ATFILE}" ] && [ -f "${ATFILE}" ]; then
            AT_HTML="$(cat "${ATFILE}")"
          fi

          jq -n \
            --arg title "${TITLE_IN}" \
            --arg media "${MEDIA_URL}" \
            --arg mime  "audio/mpeg" \
            --arg vtt   "${VTT_URL}" \
            --arg pid   "${POST_ID_IN}" \
            --rawfile tx  "${TXFILE}" \
            --arg attendees_html "${AT_HTML}" '
              { title: ($title // ""), gcs_url: $media, mime: $mime }
              + (if ($vtt|length)>0 then {vtt_url:$vtt} else {} end)
              + (if ($tx|length)>0 then {transcript:$tx} else {} end)
              + (if ($attendees_html|length)>0 then {attendees_html:$attendees_html} else {} end)
              + ( ($pid|tonumber? // null) as $maybe
                  | if $maybe then {post_id:$maybe} else {} end )
            ' > "$JFILE"

          RESP="${ARTDIR}/register.out.json"
          curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
            -X POST "${WP_URL%/}/wp-json/ss3k/v1/register" \
            --data-binary @"${JFILE}" > "${RESP}"

          PERMA=$(jq -r '.permalink // ""' "${RESP}")
          EDIT_URL="${WP_URL%/}/wp-admin/post.php?post=${POST_ID_IN}&action=edit"

          if [ -n "${POST_ID_IN}" ]; then
            curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
              -X POST "${WP_URL%/}/wp-json/ss3k/v1/worker-status" \
              -d "$(jq -n --arg pid "${POST_ID_IN}" --arg status "complete" \
                         --arg msg "Worker finished. View: ${PERMA} · Edit: ${EDIT_URL}" \
                         --arg run "${{ github.run_id }}" --argjson progress 100 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"
          fi

          jq . "${RESP}" || true

      # === Targeted: transcript_only → patch VTT/transcript (no re-attach audio)
      - name: Patch transcript/VTT only
        if: ${{ inputs.mode == 'transcript_only' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          VPROXY=""
          if [ -f "${VTT_PATH:-}" ]; then
            # upload VTT in transcript_only mode too
            DEST_VTT="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
            PROXY_VTT="https://media.chbmp.org/${PREFIX}/${BASE}.vtt"
            gsutil cp "${VTT_PATH}" "$DEST_VTT"
            if [ "${{ inputs.make_public }}" = "true" ]; then
              gsutil acl ch -u AllUsers:R "$DEST_VTT" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
            fi
            VPROXY="$PROXY_VTT"
          fi

          BODY="$(jq -n \
            --arg pid "${{ inputs.post_id }}" \
            --arg vtt "${VPROXY}" \
            --rawfile tx "${TX_PATH:-${ARTDIR}/${BASE}.txt}" '
              { post_id: ($pid|tonumber), status:"complete", progress:100 }
              + (if ($vtt|length)>0 then {vtt_url:$vtt} else {} end)
              + (if ($tx|length)>0 then {transcript:$tx} else {} end)
          ')"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" -d "${BODY}"

      # === Targeted: attendees_only → patch attendees only
      - name: Patch attendees only
        if: ${{ inputs.mode == 'attendees_only' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          ATFILE="${ATTN_HTML:-}"
          AT_HTML=""
          if [ -n "${ATFILE}" ] && [ -f "${ATFILE}" ]; then
            AT_HTML="$(cat "${ATFILE}")"
          fi
          BODY="$(jq -n --arg pid "${{ inputs.post_id }}" --arg attendees_html "${AT_HTML}" \
            '{ post_id: ($pid|tonumber), status:"complete", progress:100 }
             + (if ($attendees_html|length)>0 then {attendees_html:$attendees_html} else {} end)')"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" -d "${BODY}"

      - name: Ping WP on failure
        if: ${{ failure() && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "error" \
                       --arg msg "Worker failed. See GitHub run ${{ github.run_id }}." \
                       --arg run "${{ github.run_id }}" --argjson progress 100 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Job summary
        if: ${{ always() }}
        shell: bash
        run: |
          {
            echo "### Space Worker Summary"
            echo "- **Space URL:** ${{ inputs.space_url }}"
            echo "- **Space ID:**  ${{ steps.ids.outputs.space_id }}"
            echo "- **Post ID:**   ${{ inputs.post_id }}"
            if [ "${{ steps.upload_mp3.outputs.proxy_url }}" != "" ]; then
              echo "- **Audio (proxy):** ${{ steps.upload_mp3.outputs.proxy_url }}"
              echo "- **Audio (raw):**   ${{ steps.upload_mp3.outputs.raw_url }}"
            fi
            if [ "${{ steps.upload_vtt.outputs.proxy_vtt }}" != "" ]; then
              echo "- **VTT (proxy):** ${{ steps.upload_vtt.outputs.proxy_vtt }}"
              echo "- **VTT (raw):**   ${{ steps.upload_vtt.outputs.raw_vtt }}"
            fi
            echo "- **Public:**     ${{ inputs.make_public }}"
            echo "- **Transcript:** ${{ inputs.do_transcript }}"
            echo "- **Mode:**       ${{ inputs.mode }}"
          } >> "$GITHUB_STEP_SUMMARY"
