name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: "X (Twitter) Space URL (https://x.com/i/spaces/...)"
        required: true
        type: string
      title:
        description: "Post title to use in WordPress (fallback if no post_id)"
        required: false
        type: string
        default: ""
      post_id:
        description: "Existing WP post_id to register assets to (optional)"
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: "GCS prefix/folder (e.g. spaces/2025/02)"
        required: false
        type: string
        default: ""
      make_public:
        description: "Set GCS objects to public?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      do_transcript:
        description: "Generate diarized transcript + VTT via Deepgram?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      wp_marker:
        description: "Opaque marker from WP (optional)"
        required: false
        type: string
        default: ""

permissions:
  contents: read

concurrency:
  group: ${{ format('space-worker-{0}-{1}', github.ref, inputs.post_id != '' && inputs.post_id || github.run_id) }}
  cancel-in-progress: false

env:
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}
  MEDIA_PROXY_BASE: ${{ secrets.MEDIA_PROXY_BASE || vars.MEDIA_PROXY_BASE }} # e.g. https://media.chbmp.org
  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  run:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Start / ping WP (queued)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "queued" \
                       --arg msg "Workflow received and queued." \
                       --arg run "${{ github.run_id }}" --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps (ffmpeg, jq, yt-dlp, gcloud)
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk

      - name: Validate secrets / normalize prefix
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR"
          PFX="$(echo "${{ inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"
          echo "prefix=${PFX}" >> "$GITHUB_OUTPUT"

      - name: Ping (preflight starting)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Preflight: verifying WP auth, GCS access, and bucket permissions…" \
                       --arg run "${{ github.run_id }}" --argjson progress 5 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: GCP auth (service account)
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s\n' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      - name: Preflight: bucket ok + tiny upload
        id: preflight
        shell: bash
        env:
          PREFIX: ${{ steps.cfg.outputs.prefix }}
        run: |
          set -euxo pipefail
          gsutil ls -b "gs://${GCS_BUCKET}" >/dev/null
          echo "ok $(date -Iseconds) run=${GITHUB_RUN_ID}" > "${ARTDIR}/_preflight-${GITHUB_RUN_ID}.txt"
          if [ -n "$PREFIX" ]; then
            TEST="gs://${GCS_BUCKET}/${PREFIX}/_preflight/_preflight-${GITHUB_RUN_ID}.txt"
          else
            TEST="gs://${GCS_BUCKET}/_preflight/_preflight-${GITHUB_RUN_ID}.txt"
          fi
          gsutil cp "${ARTDIR}/_preflight-${GITHUB_RUN_ID}.txt" "${TEST}"
          gsutil acl ch -u AllUsers:R "${TEST}" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          gsutil rm -f "${TEST}" || true
          echo "ok=1" >> "$GITHUB_OUTPUT"

      - name: Ping (preflight ok)
        if: ${{ steps.preflight.outputs.ok == '1' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Preflight passed: WP & GCS verified. Proceeding…" \
                       --arg run "${{ github.run_id }}" --argjson progress 9 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (downloading)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Downloading Space audio…" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Download Space audio (yt-dlp bestaudio)
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          yt-dlp -o "%(title)s.%(ext)s" -f "bestaudio/best" "$URL"
          IN="$(ls -S | head -n1 || true)"
          test -f "$IN" || { echo "No file downloaded"; exit 1; }
          echo "INPUT_FILE=$PWD/$IN" >> "$GITHUB_ENV"

      - name: Ping (downloaded)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SIZE=$(stat -c%s "$INPUT_FILE" 2>/dev/null || echo 0)
          MSG="Downloaded: $(basename "$INPUT_FILE") (${SIZE} bytes)"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 25 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (normalizing)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Trimming dead air, normalizing & encoding to MP3…" \
                         --arg run "${{ github.run_id }}" --argjson progress 30 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Trim dead air → Loudness normalization → MP3
        shell: bash
        env:
          TS: ${{ github.run_id }}
        run: |
          set -euxo pipefail

          # 1) Trim silence only at start & end
          TRIMMED="${WORKDIR}/trimmed_${TS}.wav"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" \
            -af "silenceremove=start_periods=1:start_duration=0.5:start_threshold=-50dB:stop_periods=1:stop_duration=1:stop_threshold=-50dB" \
            -ar 48000 -ac 2 -f wav "$TRIMMED"

          # 2) Loudnorm pass1 on trimmed audio
          PASS1_JSON="${WORKDIR}/loudnorm_pass1_${TS}.json"
          ffmpeg -hide_banner -y -i "$TRIMMED" -af loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json -f null - 2>"${WORKDIR}/pass1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true

          ILOG="$(cat "$PASS1_JSON" 2>/dev/null || echo '{}')"
          ME_I=$(jq -r '.input_i     // "-16"'  <<<"$ILOG")
          ME_TP=$(jq -r '.input_tp    // "-1.5"' <<<"$ILOG")
          ME_LRA=$(jq -r '.input_lra  // "11"'   <<<"$ILOG")
          ME_THR=$(jq -r '.input_thresh// "-26"'  <<<"$ILOG")

          # 3) Encode MP3 from trimmed audio with measured values
          BASE="space-$(date +%Y%m%d-%H%M%S)-${TS}"
          echo "BASE=${BASE}" >> "$GITHUB_ENV"

          OUT_MP3="${ARTDIR}/${BASE}.mp3"
          ffmpeg -hide_banner -y -i "$TRIMMED" \
            -af "loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=${ME_I}:measured_TP=${ME_TP}:measured_LRA=${ME_LRA}:measured_thresh=${ME_THR}:print_format=summary" \
            -ar 48000 -ac 2 -codec:a libmp3lame -b:a 128k "$OUT_MP3"
          echo "OUT_MP3=$OUT_MP3" >> "$GITHUB_ENV"

      - name: Ping (encoded)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SIZE=$(stat -c%s "$OUT_MP3" 2>/dev/null || echo 0)
          MSG="MP3 ready: $(basename "$OUT_MP3") (${SIZE} bytes)"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 50 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (uploading MP3)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Uploading MP3 to GCS…" \
                         --arg run "${{ github.run_id }}" --argjson progress 55 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Upload MP3 to GCS
        id: upload_mp3
        shell: bash
        env:
          PREFIX: ${{ steps.cfg.outputs.prefix }}
        run: |
          set -euxo pipefail
          if [ -n "$PREFIX" ]; then
            DEST="gs://${GCS_BUCKET}/${PREFIX}/${BASE}.mp3"
            PUB_URL="https://storage.googleapis.com/${GCS_BUCKET}/${PREFIX}/${BASE}.mp3"
          else
            DEST="gs://${GCS_BUCKET}/${BASE}.mp3"
            PUB_URL="https://storage.googleapis.com/${GCS_BUCKET}/${BASE}.mp3"
          fi
          gsutil cp "$OUT_MP3" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi

          # Proxy URL (if configured)
          if [ -n "${MEDIA_PROXY_BASE}" ]; then
            BASEPATH=$(echo "$PUB_URL" | sed -E "s#^https://storage.googleapis.com/${GCS_BUCKET}/##")
            PROXY_URL="${MEDIA_PROXY_BASE%/}/${BASEPATH}"
            echo "gcs_url=${PROXY_URL}" >> "$GITHUB_OUTPUT"
          else
            echo "gcs_url=${PUB_URL}" >> "$GITHUB_OUTPUT"
          fi

      - name: Ping (uploaded MP3)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          MSG="MP3: ${{ steps.upload_mp3.outputs.gcs_url }}"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 60 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Scrape attendees (/peek)
        id: attendees
        shell: bash
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          SID="$(echo "$URL" | sed -E 's#.*/i/spaces/([^/?]+).*#\1#')"
          OUT="${ARTDIR}/attendees.json"
          HTML="${ARTDIR}/attendees.html"
          curl -sSL -H "User-Agent: Mozilla/5.0" "https://x.com/i/spaces/${SID}/peek" > "${OUT}" || true

          # Build grouped HTML (Host / Co-hosts / Speakers)
          python3 - <<'PY'
import json,sys,html,os
jpath=os.environ.get("OUT")
hpath=os.environ.get("HTML")
try:
    data=json.load(open(jpath,'r',encoding='utf-8'))
except Exception:
    open(hpath,'w',encoding='utf-8').write("")
    sys.exit(0)

def card(u):
    name=u.get('display_name') or u.get('name') or ''
    handle=u.get('screen_name') or u.get('username') or ''
    url=f"https://x.com/{handle}" if handle else "#"
    text=html.escape(name)
    h=html.escape(handle)
    return f'<li><a href="{html.escape(url)}" target="_blank">{text} (@{h})</a></li>'

parts=data.get('participants',{}) if isinstance(data,dict) else {}
admins=parts.get('admins',[]) or parts.get('hosts',[])
cohosts=parts.get('cohosts',[]) or parts.get('co_hosts',[]) or parts.get('speakers',[])*0  # ensure list
speakers=parts.get('speakers',[])

# Sometimes host is inside "speakers" with "is_admin"
if not admins and isinstance(speakers,list):
    admins=[u for u in speakers if u.get('is_admin')]

# Heuristic cohosts: speakers with is_cohost
if not cohosts and isinstance(speakers,list):
    cohosts=[u for u in speakers if u.get('is_cohost')]

def block(title, arr):
    if not arr: return ""
    items="".join(card(u) for u in arr if isinstance(u,dict))
    return f'<li><strong>{html.escape(title)}</strong>\n  <ul>{items}</ul>\n</li>\n'

html_out = "<ul>\n" + \
           block("Host", admins[:1]) + \
           block("Co-hosts", cohosts) + \
           block("Speakers", [u for u in speakers if u not in admins and u not in cohosts]) + \
           "</ul>\n"

open(hpath,'w',encoding='utf-8').write(html_out)
PY
          echo "path=${HTML}" >> "$GITHUB_OUTPUT"

      - name: Ping (transcribing)
        if: ${{ inputs.do_transcript == 'true' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Deepgram: diarized transcript & VTT…" \
                         --arg run "${{ github.run_id }}" --argjson progress 70 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Transcript + grouped paragraphs + merged VTT
        id: tx
        if: ${{ inputs.do_transcript == 'true' }}
        shell: bash
        env:
          DG_KEY: ${{ env.DEEPGRAM_API_KEY }}
        run: |
          set -euxo pipefail
          test -n "$DG_KEY" || { echo "DEEPGRAM_API_KEY not set"; exit 1; }
          DG_JSON="${ARTDIR}/dg.json"
          TX_PATH="${ARTDIR}/${BASE}.txt"
          VTT_PATH="${ARTDIR}/${BASE}.vtt"

          curl -sS -X POST "https://api.deepgram.com/v1/listen?smart_format=true&model=nova-2&diarize=true&utterances=true" \
            -H "Authorization: Token ${DG_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${OUT_MP3}" > "${DG_JSON}"

          # Write Python helper to file (avoids YAML heredoc pitfalls)
          TXPY="${WORKDIR}/make_tx_vtt.py"
          cat > "${TXPY}" <<'PY'
import json,sys,html
dg, tx, vtt = sys.argv[1:]
data=json.load(open(dg,encoding='utf-8'))
def vtt_time(t):
    h=int(t//3600); t-=h*3600
    m=int(t//60);  s=t-m*60
    ms=int(round((s-int(s))*1000)); s=int(s)
    return f"{h:02d}:{m:02d}:{s:02d}.{ms:03d}"
utts=data.get("results",{}).get("utterances") or []
if not utts:
    alts=data.get("results",{}).get("channels",[{"alternatives":[{}]}])[0].get("alternatives",[{}])[0]
    text=alts.get("transcript","").strip()
    open(tx,"w",encoding="utf-8").write(text+"\n")
    open(vtt,"w",encoding="utf-8").write("WEBVTT\n\n")
    sys.exit(0)

paras=[]; cues=[]
cur_s=None; cur_txt=[]; start=None; end=None
for u in utts:
    sp=int(u.get("speaker",0))
    t=(u.get("transcript") or "").strip()
    s=float(u.get("start") or 0.0); e=float(u.get("end") or s)
    if not t: continue
    if cur_s is None: cur_s=sp; cur_txt=[t]; start=s; end=e
    elif sp==cur_s and s<=end+2.0:  # merge consecutive same-speaker within 2s gap
        cur_txt.append(t); end=e
    else:
        text=" ".join(cur_txt).strip()
        paras.append((start,end,cur_s,text))
        cues.append((start,end,cur_s,text))
        cur_s=sp; cur_txt=[t]; start=s; end=e
if cur_txt:
    text=" ".join(cur_txt).strip()
    paras.append((start,end,cur_s,text))
    cues.append((start,end,cur_s,text))

with open(tx,"w",encoding="utf-8") as f:
    for s,e,sp,t in paras:
        f.write(f"Speaker {sp+1}: {t}\n\n")

with open(vtt,"w",encoding="utf-8") as f:
    f.write("WEBVTT\n\n")
    for s,e,sp,t in cues:
        f.write(f"{vtt_time(s)} --> {vtt_time(e)}\n")
        f.write(f"Speaker {sp+1}: {t}\n\n")
PY
          python3 "${TXPY}" "${DG_JSON}" "${TX_PATH}" "${VTT_PATH}"

          echo "TX_PATH=${TX_PATH}"   >> "$GITHUB_ENV"
          echo "VTT_PATH=${VTT_PATH}" >> "$GITHUB_ENV"

      - name: Ping (transcribed)
        if: ${{ steps.tx.outcome == 'success' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Transcript & (diarized) VTT created." \
                       --arg run "${{ github.run_id }}" --argjson progress 80 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (uploading VTT)
        if: ${{ steps.tx.outcome == 'success' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Uploading VTT to GCS…" \
                       --arg run "${{ github.run_id }}" --argjson progress 85 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Upload VTT to GCS
        id: upload_vtt
        if: ${{ steps.tx.outcome == 'success' }}
        shell: bash
        env:
          PREFIX: ${{ steps.cfg.outputs.prefix }}
        run: |
          set -euxo pipefail
          test -f "${VTT_PATH}" || { echo "No VTT produced"; exit 1; }
          if [ -n "$PREFIX" ]; then
            DEST="gs://${GCS_BUCKET}/${PREFIX}/${BASE}.vtt"
            PUB_VTT="https://storage.googleapis.com/${GCS_BUCKET}/${PREFIX}/${BASE}.vtt"
          else
            DEST="gs://${GCS_BUCKET}/${BASE}.vtt"
            PUB_VTT="https://storage.googleapis.com/${GCS_BUCKET}/${BASE}.vtt"
          fi
          gsutil cp "${VTT_PATH}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          if [ -n "${MEDIA_PROXY_BASE}" ]; then
            BASEPATH=$(echo "$PUB_VTT" | sed -E "s#^https://storage.googleapis.com/${GCS_BUCKET}/##")
            PROXY_VTT="${MEDIA_PROXY_BASE%/}/${BASEPATH}"
            echo "vtt_url=${PROXY_VTT}" >> "$GITHUB_OUTPUT"
          else
            echo "vtt_url=${PUB_VTT}" >> "$GITHUB_OUTPUT"
          fi

      - name: Ping (uploaded VTT)
        if: ${{ steps.upload_vtt.outcome == 'success' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          MSG="VTT: ${{ steps.upload_vtt.outputs.vtt_url }}"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 90 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (registering in WordPress)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Registering assets in WordPress…" \
                       --arg run "${{ github.run_id }}" --argjson progress 95 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Register in WordPress (assets + transcript + attendees)
        id: register
        shell: bash
        env:
          WP_URL:  ${{ env.WP_BASE_URL }}
          WP_AUTH: ${{ env.WP_USER }}:${{ env.WP_APP_PASSWORD }}
          GCS_URL: ${{ steps.upload_mp3.outputs.gcs_url }}
          VTT_URL: ${{ steps.upload_vtt.outputs.vtt_url }}
          TITLE_IN:   ${{ inputs.title }}
          POST_ID_IN: ${{ inputs.post_id }}
          ATT_HTML:   ${{ steps.attendees.outputs.path }}
        run: |
          set -euxo pipefail
          JFILE="${ARTDIR}/register.json"
          TXFILE="${TX_PATH:-${ARTDIR}/${BASE}.txt}"
          [ -f "$TXFILE" ] || : > "$TXFILE"
          [ -f "$ATT_HTML" ] || : > "$ATT_HTML"

          jq -n \
            --arg title   "${TITLE_IN}" \
            --arg gcs     "${GCS_URL}" \
            --arg mime    "audio/mpeg" \
            --arg vtt     "${VTT_URL}" \
            --arg pid     "${POST_ID_IN}" \
            --rawfile tx  "${TXFILE}" \
            --rawfile att "${ATT_HTML}" '
            {
              title: ($title // ""),
              gcs_url: $gcs,
              mime: $mime,
              vtt_url: ( ($vtt // "") | select(length>0) ),
              transcript: ( ($tx // "") | select(length>0) ),
              attendees_html: ( ($att // "") | select(length>0) )
            }
            + ( ($pid|tonumber? // null) as $maybe
                | if $maybe then {post_id:$maybe} else {} end )
          ' > "$JFILE"

          RESP="${ARTDIR}/register.out.json"
          curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
            -X POST "${WP_URL%/}/wp-json/ss3k/v1/register" \
            --data-binary @"${JFILE}" > "${RESP}"

          PERMA=$(jq -r '.permalink // ""' "${RESP}")
          EDIT_URL="${WP_URL%/}/wp-admin/post.php?post=${POST_ID_IN}&action=edit"

          curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
            -X POST "${WP_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${POST_ID_IN}" --arg status "complete" \
                       --arg msg "Worker finished. View: ${PERMA} · Edit: ${EDIT_URL}" \
                       --arg run "${{ github.run_id }}" --argjson progress 100 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

          jq . "${RESP}" || true

      - name: Ping WP on failure
        if: ${{ failure() && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "error" \
                       --arg msg "Worker failed. See GitHub run ${{ github.run_id }}." \
                       --arg run "${{ github.run_id }}" --argjson progress 100 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Job summary
        if: ${{ always() }}
        shell: bash
        run: |
          {
            echo "### Space Worker Summary"
            echo "- **Space URL:** ${{ inputs.space_url }}"
            echo "- **Post ID:** ${{ inputs.post_id }}"
            echo "- **MP3:** ${{ steps.upload_mp3.outputs.gcs_url }}"
            if [ "${{ steps.upload_vtt.outputs.vtt_url }}" != "" ]; then
              echo "- **VTT:** ${{ steps.upload_vtt.outputs.vtt_url }}"
            fi
            echo "- **Public:** ${{ inputs.make_public }}"
            echo "- **Transcript:** ${{ inputs.do_transcript }}"
          } >> "$GITHUB_STEP_SUMMARY"
