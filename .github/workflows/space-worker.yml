name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: X or Twitter Space URL
        required: true
        type: string
      post_id:
        description: Existing WordPress post ID optional
        required: false
        type: string
        default: ""
      title:
        description: Fallback post title optional
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: GCS prefix default spaces YYYY MM
        required: false
        type: string
        default: ""
      make_public:
        description: Make uploaded artifacts public
        required: false
        type: choice
        options: ["true","false"]
        default: "true"
      do_transcript:
        description: Generate transcript with Deepgram if crawler captions unavailable
        required: false
        type: choice
        options: ["true","false"]
        default: "true"
      space_id:
        description: Space ID will be parsed from URL when blank
        required: false
        type: string
        default: ""
      mode:
        description: Limit processing to a specific area
        required: false
        type: choice
        options: ["", "transcript_only", "attendees_only"]
        default: ""
      existing_mp3_url:
        description: For transcript_only provide URL to existing MP3 to skip audio pipeline
        required: false
        type: string
        default: ""
      wp_marker:
        description: Internal correlation marker from WP (ignored by the worker)
        required: false
        type: string
        default: ""

permissions:
  contents: read
  packages: read

concurrency:
  group: ${{ format('space-worker-{0}-{1}', github.ref, inputs.post_id != '' && inputs.post_id || github.run_id) }}
  cancel-in-progress: false

env:
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}
  TWITTER_AUTHORIZATION: ${{ secrets.TWITTER_AUTHORIZATION || secrets.X_BEARER || vars.TWITTER_AUTHORIZATION || vars.X_BEARER }}
  TWITTER_AUTH_TOKEN:    ${{ secrets.TWITTER_AUTH_TOKEN    || secrets.X_AUTH_TOKEN || vars.TWITTER_AUTH_TOKEN || vars.X_AUTH_TOKEN }}
  TWITTER_CSRF_TOKEN:    ${{ secrets.TWITTER_CSRF_TOKEN    || secrets.X_CSRF       || vars.TWITTER_CSRF_TOKEN || vars.X_CSRF }}
  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  process:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Start queued status to WP
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                       --arg status "queued" \
                       --arg msg "Workflow received and queued" \
                       --arg run "${{ github.run_id }}" \
                       --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps and docker login
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Validate config and prefixes
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR" "$ARTDIR/logs"
          PFX="$(echo "${{ inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"
          if [ -z "$PFX" ]; then PFX="spaces/$(date +%Y)/$(date +%m)"; fi
          echo "PREFIX=$PFX"                  >> "$GITHUB_ENV"
          echo "BUCKET_PREFIX=${PFX#spaces/}" >> "$GITHUB_ENV"

      - name: Derive Space ID and base
        id: ids
        shell: bash
        env:
          INP_SPACE_ID: ${{ inputs.space_id }}
          URL:          ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          SID="${INP_SPACE_ID}"
          if [ -z "$SID" ]; then
            SID="$(echo "$URL" | sed -nE 's#^.*/i/spaces/([^/?#]+).*#\1#p')"
          fi
          test -n "$SID" || { echo "Could not parse Space ID from URL"; exit 1; }
          BASE="space-$(date +%m-%d-%Y)-${SID}"
          echo "SPACE_ID=${SID}" >> "$GITHUB_ENV"
          echo "BASE=${BASE}"    >> "$GITHUB_ENV"
          echo "space_id=${SID}" >> "$GITHUB_OUTPUT"
          echo "base=${BASE}"    >> "$GITHUB_OUTPUT"

      - name: GCP auth
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      - name: X preflight auth sanity check
        id: x_preflight
        shell: bash
        run: |
          set -euxo pipefail
          AUTH="${TWITTER_AUTHORIZATION:-}"
          AT="${TWITTER_AUTH_TOKEN:-}"
          CT="${TWITTER_CSRF_TOKEN:-}"

          if [ -n "$AUTH" ] && ! printf '%s' "$AUTH" | grep -q '^Bearer '; then
            AUTH=""
          fi

          [ -n "${TWITTER_AUTHORIZATION:-}" ] && echo "::add-mask::${TWITTER_AUTHORIZATION}"
          [ -n "$AT" ] && echo "::add-mask::${AT}"
          [ -n "$CT" ] && echo "::add-mask::${CT}"

          OK=0
          REASON="no_creds"

          HAS_COOKIE=0
          HAS_BEARER=0
          [ -n "$AT" ] && [ -n "$CT" ] && HAS_COOKIE=1 || true
          [ -n "$AUTH" ] && HAS_BEARER=1 || true

          if [ "$HAS_COOKIE" -eq 1 ] || [ "$HAS_BEARER" -eq 1 ]; then
            OK=1
            REASON="creds_present"
          fi

          mkdir -p "${ARTDIR}"
          BASEH=(-H "User-Agent: Mozilla/5.0" -H "Accept: application/json, text/plain, */*" -H "Referer: https://x.com/i/spaces/${SPACE_ID:-home}")

          if [ "$HAS_COOKIE" -eq 1 ] && [ "$HAS_BEARER" -eq 1 ]; then
            CVAL="auth_token=${AT}; ct0=${CT}"
            HTTP=$(curl -sS -o "${ARTDIR}/x_participants_cookie.json" -w "%{http_code}" \
              "https://x.com/i/api/spaces/${SPACE_ID}/participants" \
              "${BASEH[@]}" \
              -H "Authorization: ${AUTH}" \
              -H "x-csrf-token: ${CT}" \
              -H "Cookie: ${CVAL}" \
              -H "x-twitter-active-user: yes" \
              -H "x-twitter-client-language: en" \
              -H "x-twitter-auth-type: OAuth2Session" || echo 000)
            echo "diag_participants_cookie_http=${HTTP}" >> "$GITHUB_OUTPUT"
          fi

          if [ "$HAS_BEARER" -eq 1 ]; then
            GHTTP=$(curl -sS -o "${ARTDIR}/x_guest.json" -w "%{http_code}" \
              -X POST "https://api.twitter.com/1.1/guest/activate.json" \
              -H "Authorization: ${AUTH}" \
              -H "Content-Type: application/json" \
              -d '{}' || echo 000)
            echo "diag_guest_activate_http=${GHTTP}" >> "$GITHUB_OUTPUT"
            if [ "$OK" -ne 1 ] && [ "$GHTTP" = "200" ]; then
              OK=1
              REASON="guest_ok"
            fi
            if [ "$GHTTP" = "200" ]; then
              GUEST=$(jq -r '.guest_token // empty' "${ARTDIR}/x_guest.json" 2>/dev/null || true)
              if [ -n "$GUEST" ]; then
                PHTTP=$(curl -sS -o "${ARTDIR}/x_participants_guest.json" -w "%{http_code}" \
                  "https://x.com/i/api/spaces/${SPACE_ID}/participants" \
                  "${BASEH[@]}" \
                  -H "Authorization: ${AUTH}" \
                  -H "x-guest-token: ${GUEST}" \
                  -H "x-twitter-active-user: yes" \
                  -H "x-twitter-client-language: en" || echo 000)
                echo "diag_participants_guest_http=${PHTTP}" >> "$GITHUB_OUTPUT"
              fi
            fi
          fi

          # Diagnostic public peek (no publishing here)
          if [ "$OK" -ne 1 ]; then
            for PEEK in \
              "https://x.com/i/spaces/${SPACE_ID}/peek" \
              "https://twitter.com/i/spaces/${SPACE_ID}/peek"
            do
              PHTTP=$(curl -sS -o "${ARTDIR}/x_peek.json" -w "%{http_code}" "$PEEK" -H "User-Agent: Mozilla/5.0" -H "Accept: application/json" || echo 000)
              echo "diag_peek_http=${PHTTP}" >> "$GITHUB_OUTPUT"
              if [ "$PHTTP" = "200" ]; then
                OK=1
                REASON="public_ok"
                break
              fi
            done
          fi

          echo "ok=${OK}"         >> "$GITHUB_OUTPUT"
          echo "reason=${REASON}" >> "$GITHUB_OUTPUT"
          [ -n "$AUTH" ] && echo "TWITTER_AUTHORIZATION=$AUTH" >> "$GITHUB_ENV"

      - name: Run crawler for attendees and audio
        id: crawl
        if: ${{ steps.x_preflight.outputs.ok == '1' }}
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
        run: |
          set -euxo pipefail
          mkdir -p "${ARTDIR}" "${ARTDIR}/logs"
          docker pull ghcr.io/hitomarukonpaku/twspace-crawler:latest || true

          LOG_STD="${ARTDIR}/logs/crawler_${SID}.out.log"
          LOG_ERR="${ARTDIR}/logs/crawler_${SID}.err.log"

          set +e
          timeout 12m docker run --rm \
            -e TWITTER_AUTHORIZATION \
            -e TWITTER_AUTH_TOKEN \
            -e TWITTER_CSRF_TOKEN \
            -v "${ARTDIR}:/app/download" \
            -v "${ARTDIR}/logs:/app/logs" \
            ghcr.io/hitomarukonpaku/twspace-crawler:latest \
            --id "${SID}" --force > >(tee -a "$LOG_STD") 2> >(tee -a "$LOG_ERR" >&2)
          RC=$?
          set -e
          echo "crawler_exit=${RC}"

          # Prefer the exact audio path emitted by the crawler logs
          AUDIO_FILE="$(grep -hEo '"/app/download[^"]+\.(m4a|mp3|mp4|aac|webm|ogg|wav|ts)"' "$LOG_STD" "$LOG_ERR" | tr -d '"' | sed "s|^/app/download|$ARTDIR|" | tail -n1 || true)"

          # Fallback: newest audio-like file anywhere under $ARTDIR
          if [[ -z "${AUDIO_FILE:-}" || ! -f "$AUDIO_FILE" ]]; then
            AUDIO_FILE="$(find "${ARTDIR}" -type f \( -iname '*.m4a' -o -iname '*.mp3' -o -iname '*.mp4' -o -iname '*.aac' -o -iname '*.webm' -o -iname '*.ogg' -o -iname '*.wav' -o -iname '*.ts' \) -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          fi

          if [ -n "${AUDIO_FILE:-}" ] && [ -f "${AUDIO_FILE:-}" ]; then
            echo "INPUT_FILE=${AUDIO_FILE}" >> "$GITHUB_ENV"
            echo "audio_file=${AUDIO_FILE}" >> "$GITHUB_OUTPUT"
          fi

          # Extract raw attendees-related line (clean JSON after the pipe)
          RAW="$(grep -m1 -F 'getAudioSpaceById |' "$LOG_STD" || true)"
          if [ -z "$RAW" ]; then
            RAW="$(grep -m1 -F 'getAudioSpaceByRestId |' "$LOG_STD" || true)"
          fi
          if [ -n "$RAW" ]; then
            printf '%s\n' "$RAW" > "${ARTDIR}/_as_line.txt"
            printf '%s\n' "$RAW" | awk -F'\\| ' '{print $NF}' > "${ARTDIR}/_as_line_after_pipe.txt" || true
          fi
          [ -s "${ARTDIR}/_as_line_after_pipe.txt" ] && echo "as_line=${ARTDIR}/_as_line_after_pipe.txt" >> "$GITHUB_OUTPUT" || true

      - name: Build attendees JSON and HTML from crawler logs
        id: attendees
        if: ${{ steps.crawl.outcome == 'success' && steps.crawl.outputs.as_line != '' }}
        shell: bash
        env:
          CAND: ${{ steps.crawl.outputs.as_line }}
        run: |
          set -euxo pipefail
          OUT_JSON="${ARTDIR}/attendees.json"
          OUT_HTML="${ARTDIR}/attendees.html"

          # Directly validate and store JSON from the captured line (it's already clean JSON)
          if jq -e . "${CAND}" >/dev/null 2>&1; then
            cp "${CAND}" "${ARTDIR}/_as_line.json"
          fi

          # Convert to compact attendees.json (host, cohosts, speakers)
          if [ -s "${ARTDIR}/_as_line.json" ]; then
            jq -r '
              # Helper to normalize a person object from different shapes
              def mkp:
                { handle: (.twitter_screen_name // .user_results?.result?.legacy?.screen_name),
                  name:   (.display_name       // .user_results?.result?.legacy?.name)
                }
                | select(.handle!=null and .handle!="")
                | . + { url: ("https://x.com/" + .handle) };

              (.audioSpace // .) as $a
              | ($a.metadata?.creator_results?.result?.legacy?) as $h
              | ($h.screen_name // empty) as $H
              | {
                  host:    ( if $H != "" then [ {handle:$H, name:($h.name // ""), url:("https://x.com/" + $H)} ] else [] end ),
                  cohosts: ( ($a.participants?.admins   // []) | map(mkp) | map(select(.handle != $H)) | unique_by(.handle) ),
                  speakers:( ($a.participants?.speakers // []) | map(mkp) | unique_by(.handle) )
                }
            ' "${ARTDIR}/_as_line.json" > "$OUT_JSON" || true
          fi

          # Generate simple HTML sections exactly like desired
          if [ -s "$OUT_JSON" ] && jq -e . "$OUT_JSON" >/dev/null 2>&1; then
            jq -r '
              def li: "  <li><a href=\"" + (.url//"#") + "\">" + ((.name // "") + " (@" + (.handle // "") + ")") + "</a></li>";
              def section(title; items):
                if (items|length) > 0
                then "<h3>" + title + "</h3>\n<ul>\n" + (items|map(li)|join("\n")) + "\n</ul>\n"
                else ""
                end;

              . as $d
              | section("Host"; $d.host)
              + section( (if ($d.cohosts|length)==1 then "Co-host" else "Co-hosts" end); $d.cohosts)
              + section("Speakers"; $d.speakers)
            ' "$OUT_JSON" > "$OUT_HTML" || true

            if grep -qi '<li><a ' "$OUT_HTML"; then
              echo "ATTN_HTML=${OUT_HTML}" >> "$GITHUB_ENV"
              echo "attendees_html=${OUT_HTML}" >> "$GITHUB_OUTPUT"
            fi
            echo "ATTN_JSON=${OUT_JSON}" >> "$GITHUB_ENV"
            echo "attendees_json=${OUT_JSON}" >> "$GITHUB_OUTPUT"
          fi

      # Always assemble and upload a raw attendees dump, regardless of parsing success
      - name: Assemble attendees RAW dump
        id: assemble_attendees_raw
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
        run: |
          set -euxo pipefail
          RAW_TXT="${ARTDIR}/${BASE}-attendees-raw.txt"
          {
            echo "### Raw attendees capture for Space ${SID}"
            echo
            for F in \
              "${ARTDIR}/_as_line.txt" \
              "${ARTDIR}/_as_line_after_pipe.txt" \
              "${ARTDIR}/_as_line.json" \
              "${ARTDIR}/x_participants_cookie.json" \
              "${ARTDIR}/x_participants_guest.json" \
              "${ARTDIR}/x_peek.json" \
              "${ARTDIR}/logs/crawler_${SID}.out.log" \
              "${ARTDIR}/logs/crawler_${SID}.err.log"
            do
              if [ -f "$F" ] && [ -s "$F" ]; then
                echo "===== BEGIN $(basename "$F") ====="
                cat "$F"
                echo
                echo "===== END $(basename "$F") ====="
                echo
              fi
            done
          } > "$RAW_TXT"
          if [ -s "$RAW_TXT" ]; then
            echo "RAW_TXT=${RAW_TXT}" >> "$GITHUB_ENV"
            echo "raw_txt=${RAW_TXT}" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload attendees RAW to GCS
        id: upload_attendees_raw
        if: ${{ steps.assemble_attendees_raw.outputs.raw_txt != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}-attendees-raw.txt"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}-attendees-raw.txt"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}-attendees-raw.txt"
          gsutil cp "${RAW_TXT}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "raw_attendees_raw_url=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "proxy_attendees_raw_url=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Upload attendees HTML to GCS
        id: upload_attendees
        if: ${{ steps.attendees.outputs.attendees_html != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}-attendees.html"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}-attendees.html"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}-attendees.html"
          gsutil cp "${ATTN_HTML}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "raw_attendees_url=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "proxy_attendees_url=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Upload attendees JSON to GCS
        id: upload_attendees_json
        if: ${{ steps.attendees.outputs.attendees_json != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}-attendees.json"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}-attendees.json"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}-attendees.json"
          gsutil cp "${ATTN_JSON}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "raw_attendees_json_url=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "proxy_attendees_json_url=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Ping processing audio
        if: ${{ inputs.mode != 'attendees_only' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Processing audio" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Fallback download via ytdlp if crawler gave no audio
        if: ${{ inputs.mode != 'attendees_only' && (steps.crawl.outputs.audio_file == '' || steps.crawl.outcome != 'success') && inputs.existing_mp3_url == '' }}
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          yt-dlp -o "%(title)s.%(ext)s" -f "bestaudio/best" "$URL"
          IN="$(ls -S | head -n1 || true)"
          test -f "$IN" || { echo "No file downloaded"; exit 1; }
          echo "INPUT_FILE=$PWD/$IN" >> "$GITHUB_ENV"

      - name: Use provided MP3 for transcript only
        if: ${{ inputs.mode == 'transcript_only' && inputs.existing_mp3_url != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          curl -L "${{ inputs.existing_mp3_url }}" -o "${ARTDIR}/${BASE}.mp3"
          echo "INPUT_FILE=${ARTDIR}/${BASE}.mp3" >> "$GITHUB_ENV"

      - name: Trim head and tail silence
        if: ${{ inputs.mode != 'attendees_only' && env.INPUT_FILE != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          TRIM_WAV="${WORKDIR}/trim_${{ github.run_id }}.wav"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" \
            -af "silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse,silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse" \
            -ar 48000 -ac 2 -c:a pcm_s16le "$TRIM_WAV"
          echo "AUDIO_IN=${TRIM_WAV}" >> "$GITHUB_ENV"

      - name: Loudness normalize to MP3
        if: ${{ inputs.mode != 'attendees_only' && env.AUDIO_IN != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          PASS1_JSON="${WORKDIR}/loudnorm1.json"
          ffmpeg -hide_banner -y -i "$AUDIO_IN" -af loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json -f null - 2>"${WORKDIR}/pass1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true
          if jq -e . "$PASS1_JSON" >/dev/null 2>&1; then
            I=$(jq -r '.input_i // "-16"'  "$PASS1_JSON"); TP=$(jq -r '.input_tp // "-1.5"' "$PASS1_JSON"); LRA=$(jq -r '.input_lra // "11"' "$PASS1_JSON"); TH=$(jq -r '.input_thresh // "-26"' "$PASS1_JSON")
            ffmpeg -hide_banner -y -i "$AUDIO_IN" -af "loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=$I:measured_TP=$TP:measured_LRA=$LRA:measured_thresh=$TH:linear=true" -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}.mp3"
          else
            ffmpeg -hide_banner -y -i "$AUDIO_IN" -af "loudnorm=I=-16:TP=-1.5:LRA=11" -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}.mp3"
          fi
          echo "MP3_PATH=${ARTDIR}/${BASE}.mp3" >> "$GITHUB_ENV"

      - name: Upload MP3 to GCS
        id: upload_mp3
        if: ${{ inputs.mode != 'attendees_only' && env.MP3_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}.mp3"
          gsutil cp "${MP3_PATH}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "audio_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "audio_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Captions via crawler VTT if present
        id: crawl_cc
        if: ${{ inputs.mode != 'attendees_only' }}
        shell: bash
        run: |
          set -euxo pipefail
          CC_FILE="$(find "${ARTDIR}" -type f \( -iname '*cc.jsonl' -o -iname '*caption*.jsonl' \) -print | head -n1 || true)"
          if [ -n "$CC_FILE" ]; then
            REL_PATH="${CC_FILE#"${ARTDIR}"}"
            docker run --rm -v "${ARTDIR}:/app/download" ghcr.io/hitomarukonpaku/twspace-crawler:latest cc v "/app/download${REL_PATH}" > "${ARTDIR}/${BASE}.vtt" || true
          fi
          [ -s "${ARTDIR}/${BASE}.vtt" ] && echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV" || true

      - name: VTT via Deepgram when needed
        id: deepgram
        if: ${{ inputs.mode != 'attendees_only' && env.VTT_PATH == '' && env.DEEPGRAM_API_KEY != '' && inputs.do_transcript == 'true' && env.MP3_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          curl -sS -X POST \
            -H "Authorization: Token ${DEEPGRAM_API_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${MP3_PATH}" \
            "https://api.deepgram.com/v1/listen?model=nova-2&smart_format=true&punctuate=true&format=vtt" \
            -o "${ARTDIR}/${BASE}.vtt" || true
          [ -s "${ARTDIR}/${BASE}.vtt" ] && echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV" || true

      - name: Upload VTT to GCS
        id: upload_vtt
        if: ${{ inputs.mode != 'attendees_only' && env.VTT_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}.vtt"
          gsutil cp "${VTT_PATH}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "vtt_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "vtt_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Patch WP with artifacts (attach attendees HTML directly)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        env:
          PID: ${{ inputs.post_id }}
          ATN: ${{ steps.upload_attendees.outputs.proxy_attendees_url }}
          JTN: ${{ steps.upload_attendees_json.outputs.proxy_attendees_json_url }}
          RAWN: ${{ steps.upload_attendees_raw.outputs.proxy_attendees_raw_url }}
          AUD: ${{ steps.upload_mp3.outputs.audio_proxy }}
          VTT: ${{ steps.upload_vtt.outputs.vtt_proxy }}
        run: |
          set -euo pipefail
          AT_HTML=""
          if [ -n "${ATTN_HTML:-}" ] && [ -s "${ATTN_HTML:-}" ]; then
            AT_HTML="$(cat "${ATTN_HTML}")"
          fi

          BODY="$(jq -n \
            --arg pid    "${PID}" \
            --arg aud    "${AUD}" \
            --arg vtt    "${VTT}" \
            --arg aturl  "${ATN}" \
            --arg jturl  "${JTN}" \
            --arg rawurl "${RAWN}" \
            --arg athtml "${AT_HTML}" '
            def maybe_artifacts(a; j; r):
              ({} 
                + (if (a|length)>0 then {attendees_html_url:a} else {} end)
                + (if (j|length)>0 then {attendees_json_url:j} else {} end)
                + (if (r|length)>0 then {attendees_raw_url:r} else {} end)
              );
            {
              post_id: ($pid|tonumber),
              status: "complete",
              progress: 100
            }
            + (if ($aud|length)>0 then {audio_url:$aud} else {} end)
            + (if ($vtt|length)>0 then {vtt_url:$vtt, has_transcript:true} else {} end)
            + (if ($athtml|length)>0 then {attendees_html:$athtml, attendees:$athtml} else {} end)
            + ( if ( ($aturl|length)>0 or ($jturl|length)>0 or ($rawurl|length)>0 )
                then { artifacts: maybe_artifacts($aturl; $jturl; $rawurl) }
                else {} end)
            + ( if      ($aturl|length)>0 then {ss3k_attendees_html_url:$aturl}
                else if ($jturl|length)>0 then {ss3k_attendees_html_url:$jturl}
                else if ($rawurl|length)>0 then {ss3k_attendees_html_url:$rawurl}
                else {} end end end)
          ')"

          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" -d "$BODY" | jq -r .

      - name: Summary
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
        run: |
          {
            echo "### Space Worker Summary"
            echo "- Space URL ${{ inputs.space_url }}"
            echo "- Space ID  ${SID}"
            echo "- Post ID   ${{ inputs.post_id }}"
            if [ -n "${{ steps.upload_mp3.outputs.audio_proxy }}" ]; then
              echo "- Audio     ${{ steps.upload_mp3.outputs.audio_proxy }}"
            fi
            if [ -n "${{ steps.upload_vtt.outputs.vtt_proxy }}" ]; then
              echo "- VTT       ${{ steps.upload_vtt.outputs.vtt_proxy }}"
            fi
            if [ -n "${{ steps.upload_attendees.outputs.proxy_attendees_url }}" ]; then
              echo "- Attendees HTML ${{ steps.upload_attendees.outputs.proxy_attendees_url }}"
            elif [ -n "${{ steps.upload_attendees_json.outputs.proxy_attendees_json_url }}" ]; then
              echo "- Attendees JSON ${{ steps.upload_attendees_json.outputs.proxy_attendees_json_url }}"
            fi
            if [ -n "${{ steps.upload_attendees_raw.outputs.proxy_attendees_raw_url }}" ]; then
              echo "- Attendees RAW  ${{ steps.upload_attendees_raw.outputs.proxy_attendees_raw_url }}"
            fi
            if [ -z "${{ steps.upload_attendees.outputs.proxy_attendees_url }}" ] && \
               [ -z "${{ steps.upload_attendees_json.outputs.proxy_attendees_json_url }}" ] && \
               [ -z "${{ steps.upload_attendees_raw.outputs.proxy_attendees_raw_url }}" ]; then
              echo "- Attendees none extracted"
            fi
            echo "- Preflight ok=${{ steps.x_preflight.outputs.ok }} reason=${{ steps.x_preflight.outputs.reason }}"
            echo "- Mode      ${{ inputs.mode }}"
          } >> "$GITHUB_STEP_SUMMARY"
