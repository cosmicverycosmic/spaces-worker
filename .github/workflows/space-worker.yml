name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: "X/Twitter Space URL"
        required: true
        type: string
      post_id:
        description: "Existing WordPress post ID (optional)"
        required: false
        type: string
        default: ""
      title:
        description: "Fallback post title (optional)"
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: "GCS prefix (default: spaces/YYYY/MM)"
        required: false
        type: string
        default: ""
      make_public:
        description: "Make uploaded artifacts public"
        required: false
        type: choice
        options: ["true","false"]
        default: "true"
      do_transcript:
        description: "Generate transcript with Deepgram if crawler captions unavailable"
        required: false
        type: choice
        options: ["true","false"]
        default: "true"
      mode:
        description: "Limit processing to a specific area"
        required: false
        type: choice
        options: ["", "transcript_only", "attendees_only"]
        default: ""
      existing_mp3_url:
        description: "For transcript_only: URL to existing MP3 to skip audio pipeline"
        required: false
        type: string
        default: ""
      inputs_json:
        description: "Opaque payload (e.g. {\"enable_ads\": true})"
        required: false
        type: string
        default: ""

permissions:
  contents: read
  packages: read

concurrency:
  group: ${{ format('space-worker-{0}-{1}', github.ref, inputs.post_id != '' && inputs.post_id || github.run_id) }}
  cancel-in-progress: false

env:
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}
  TWITTER_AUTHORIZATION: ${{ secrets.TWITTER_AUTHORIZATION || secrets.X_BEARER || vars.TWITTER_AUTHORIZATION || vars.X_BEARER }}
  TWITTER_AUTH_TOKEN:    ${{ secrets.TWITTER_AUTH_TOKEN    || secrets.X_AUTH_TOKEN || vars.TWITTER_AUTH_TOKEN || vars.X_AUTH_TOKEN }}
  TWITTER_CSRF_TOKEN:    ${{ secrets.TWITTER_CSRF_TOKEN    || secrets.X_CSRF       || vars.TWITTER_CSRF_TOKEN || vars.X_CSRF }}
  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  process:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Start queued status to WP
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                       --arg status "queued" \
                       --arg msg "Workflow received and queued" \
                       --arg run "${{ github.run_id }}" \
                       --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps and docker login
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Validate config and prepare dirs
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR" "$ARTDIR/logs"
          PFX="$(echo "${{ inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"
          if [ -z "$PFX" ]; then PFX="spaces/$(date +%Y)/$(date +%m)"; fi
          echo "PREFIX=$PFX"                  >> "$GITHUB_ENV"
          echo "BUCKET_PREFIX=${PFX#spaces/}" >> "$GITHUB_ENV"

      - name: Parse inputs_json overrides (optional, after dirs exist)
        shell: bash
        run: |
          set -euo pipefail
          ENABLE_ADS=false
          RAW="${{ inputs.inputs_json }}"
          if [ -n "$RAW" ]; then
            # auto-wrap if no leading {
            if ! printf '%s' "$RAW" | grep -q '^[[:space:]]*{'; then
              RAW="{$RAW}"
            fi
            printf '%s' "$RAW" > "${WORKDIR}/inputs.json"
            if jq -e . "${WORKDIR}/inputs.json" >/dev/null 2>&1; then
              FLAG="$(jq -r '(.enable_ads // .ads // false) | tostring' "${WORKDIR}/inputs.json")"
              [ "$FLAG" = "true" ] && ENABLE_ADS=true
            fi
          fi
          echo "ENABLE_ADS=${ENABLE_ADS}" >> "$GITHUB_ENV"

      - name: Derive Space ID and provisional BASE/slug
        id: ids
        shell: bash
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          SID="$(echo "$URL" | sed -nE 's#^.*/i/spaces/([^/?#]+).*#\1#p')"
          test -n "$SID" || { echo "Could not parse Space ID from URL"; exit 1; }
          echo "SPACE_ID=${SID}" >> "$GITHUB_ENV"
          # Provisional BASE/slug (may be refined after crawler reveals true date)
          D="$(date -u +%F)"
          echo "BASE=space-${D}-${SID}" >> "$GITHUB_ENV"
          echo "POST_SLUG=${D}-${SID}"  >> "$GITHUB_ENV"
          echo "space_id=${SID}"        >> "$GITHUB_OUTPUT"

      - name: GCP auth
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      - name: X preflight auth sanity check
        id: x_preflight
        shell: bash
        run: |
          set -euxo pipefail
          AUTH="${TWITTER_AUTHORIZATION:-}"
          AT="${TWITTER_AUTH_TOKEN:-}"
          CT="${TWITTER_CSRF_TOKEN:-}"
          if [ -n "$AUTH" ] && ! printf '%s' "$AUTH" | grep -q '^Bearer '; then AUTH=""; fi
          [ -n "${TWITTER_AUTHORIZATION:-}" ] && echo "::add-mask::${TWITTER_AUTHORIZATION}"
          [ -n "$AT" ] && echo "::add-mask::${AT}"
          [ -n "$CT" ] && echo "::add-mask::${CT}"
          OK=0
          [ -n "$AT" ] && [ -n "$CT" ] && OK=1 || true
          [ -n "$AUTH" ] && OK=1 || true
          mkdir -p "${ARTDIR}"
          echo "ok=${OK}"         >> "$GITHUB_OUTPUT"
          echo "reason=preflight" >> "$GITHUB_OUTPUT"
          [ -n "$AUTH" ] && echo "TWITTER_AUTHORIZATION=$AUTH" >> "$GITHUB_ENV"

      - name: Run crawler (attendees, audio, captions)
        id: crawl
        if: ${{ steps.x_preflight.outputs.ok == '1' }}
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
        run: |
          set -euxo pipefail
          mkdir -p "${ARTDIR}" "${ARTDIR}/logs"
          docker pull ghcr.io/hitomarukonpaku/twspace-crawler:latest || true
          LOG_STD="${ARTDIR}/logs/crawler_${SID}.out.log"
          LOG_ERR="${ARTDIR}/logs/crawler_${SID}.err.log"
          set +e
          timeout 12m docker run --rm \
            -e TWITTER_AUTHORIZATION \
            -e TWITTER_AUTH_TOKEN \
            -e TWITTER_CSRF_TOKEN \
            -v "${ARTDIR}:/app/download" \
            -v "${ARTDIR}/logs:/app/logs" \
            ghcr.io/hitomarukonpaku/twspace-crawler:latest \
            --id "${SID}" --force > >(tee -a "$LOG_STD") 2> >(tee -a "$LOG_ERR" >&2)
          RC=$?
          set -e
          echo "crawler_exit=${RC}"

          # AUDIO file (from logs or latest in out/)
          AUDIO_FILE="$(grep -hEo '"/app/download[^"]+\.(m4a|mp3|mp4|aac|webm|ogg|wav|ts)"' "$LOG_STD" "$LOG_ERR" | tr -d '"' | sed "s|^/app/download|$ARTDIR|" | tail -n1 || true)"
          if [[ -z "${AUDIO_FILE:-}" || ! -f "$AUDIO_FILE" ]]; then
            AUDIO_FILE="$(find "${ARTDIR}" -type f \( -iname '*.m4a' -o -iname '*.mp3' -o -iname '*.mp4' -o -iname '*.aac' -o -iname '*.webm' -o -iname '*.ogg' -o -iname '*.wav' -o -iname '*.ts' \) -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          fi
          if [ -n "${AUDIO_FILE:-}" ] && [ -f "${AUDIO_FILE:-}" ]; then
            echo "INPUT_FILE=${AUDIO_FILE}" >> "$GITHUB_ENV"
            echo "audio_file=${AUDIO_FILE}" >> "$GITHUB_OUTPUT"
          fi

          # Space metadata JSON (after the pipe)
          RAW="$(grep -m1 -F 'getAudioSpaceById |' "$LOG_STD" || true)"
          if [ -z "$RAW" ]; then RAW="$(grep -m1 -F 'getAudioSpaceByRestId |' "$LOG_STD" || true)"; fi
          if [ -n "$RAW" ]; then
            printf '%s\n' "$RAW" | awk -F'\\| ' '{print $NF}' > "${ARTDIR}/_as_line.json" || true
          fi

          # Derive title/date and compute BASE/SLUG (overwrite provisional)
          SPACE_TITLE=""
          SPACE_EPOCH_MS=""
          if [ -s "${ARTDIR}/_as_line.json" ] && jq -e . "${ARTDIR}/_as_line.json" >/dev/null 2>&1; then
            SPACE_TITLE="$(jq -r '(.audioSpace // .).metadata.title // empty' "${ARTDIR}/_as_line.json")"
            SPACE_EPOCH_MS="$(jq -r '(.audioSpace // .).metadata.ended_at // (.audioSpace // .).metadata.started_at // empty' "${ARTDIR}/_as_line.json")"
          fi
          if [ -z "${SPACE_EPOCH_MS:-}" ]; then SPACE_EPOCH_MS="$(date +%s000)"; fi
          SPACE_DATE_ISO="$(date -u -d "@$((SPACE_EPOCH_MS/1000))" +"%Y-%m-%dT%H:%M:%SZ")"
          SPACE_DATE="$(printf '%s' "$SPACE_DATE_ISO" | cut -c1-10)" # YYYY-MM-DD
          BASE="space-${SPACE_DATE}-${SID}"
          SLUG="${SPACE_DATE}-${SID}"
          [ -n "$SPACE_TITLE" ] && echo "SPACE_TITLE=$SPACE_TITLE"       >> "$GITHUB_ENV"
          echo "SPACE_DATE_ISO=$SPACE_DATE_ISO"                           >> "$GITHUB_ENV"
          echo "BASE=$BASE"                                               >> "$GITHUB_ENV"
          echo "POST_SLUG=$SLUG"                                          >> "$GITHUB_ENV"

          # Captions JSONL (crawler) -> save & try VTT
          CC_FILE="$(find "${ARTDIR}" -maxdepth 2 -type f \( -iname '*CC.jsonl' -o -iname '*captions*.jsonl' -o -iname '*caption*.jsonl' \) | head -n1 || true)"
          if [ -n "$CC_FILE" ]; then
            CC_NORM="${ARTDIR}/${BASE}_crawler_cc.jsonl"
            cp -f "$CC_FILE" "$CC_NORM" || true
            echo "CRAWLER_CC=$CC_NORM" >> "$GITHUB_ENV"
            docker run --rm -v "${ARTDIR}:/app/download" ghcr.io/hitomarukonpaku/twspace-crawler:latest cc v "/app/download/$(basename "$CC_NORM")" > "${ARTDIR}/${BASE}.vtt" || true
            [ -s "${ARTDIR}/${BASE}.vtt" ] && echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV" || true
          fi

      - name: Build attendees HTML
        id: attendees
        if: ${{ steps.crawl.outcome == 'success' && env.ARTDIR != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          OUT_JSON="${ARTDIR}/attendees.json"
          OUT_HTML="${ARTDIR}/attendees.html"
          if [ -s "${ARTDIR}/_as_line.json" ] && jq -e . "${ARTDIR}/_as_line.json" >/dev/null 2>&1; then
            jq -r '
              def mkp:
                { handle: (.twitter_screen_name // .user_results?.result?.legacy?.screen_name),
                  name:   (.display_name       // .user_results?.result?.legacy?.name)
                }
                | select(.handle!=null and .handle!="")
                | . + { url: ("https://x.com/" + .handle) };
              (.audioSpace // .) as $a
              | ($a.metadata?.creator_results?.result?.legacy?) as $h
              | ($h.screen_name // empty) as $H
              | {
                  host:    ( if $H != "" then [ {handle:$H, name:($h.name // ""), url:("https://x.com/" + $H)} ] else [] end ),
                  cohosts: ( ($a.participants?.admins   // []) | map(mkp) | map(select(.handle != $H)) | unique_by(.handle) ),
                  speakers:( ($a.participants?.speakers // []) | map(mkp) | unique_by(.handle) )
                }
            ' "${ARTDIR}/_as_line.json" > "$OUT_JSON" || true
          fi
          if [ -s "$OUT_JSON" ] && jq -e . "$OUT_JSON" >/dev/null 2>&1; then
            jq -r '
              def li: "  <li><a href=\"" + (.url//"#") + "\">" + ((.name // "") + " (@" + (.handle // "") + ")") + "</a></li>";
              def section(title; items):
                if (items|length) > 0
                then "<h3>" + title + "</h3>\n<ul>\n" + (items|map(li)|join("\n")) + "\n</ul>\n"
                else ""
                end;
              . as $d
              | section("Host"; $d.host)
              + section( (if ($d.cohosts|length)==1 then "Co-host" else "Co-hosts" end); $d.cohosts)
              + section("Speakers"; $d.speakers)
            ' "$OUT_JSON" > "$OUT_HTML" || true
            if grep -qi '<li><a ' "$OUT_HTML"; then
              echo "ATTN_HTML=${OUT_HTML}" >> "$GITHUB_ENV"
              echo "ATTENDEES_OK=1"        >> "$GITHUB_ENV"
            fi
          fi

      - name: Ping processing audio
        if: ${{ inputs.mode != 'attendees_only' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Processing audio" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: FALLBACK audio download via yt-dlp (only if crawler audio missing)
        if: ${{ inputs.mode != 'attendees_only' && (env.INPUT_FILE == '' || !startsWith(env.INPUT_FILE, '/')) && inputs.existing_mp3_url == '' }}
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          yt-dlp -o "%(title)s.%(ext)s" -f "bestaudio/best" "$URL"
          IN="$(ls -S | head -n1 || true)"
          test -f "$IN" || { echo "No file downloaded"; exit 1; }
          echo "INPUT_FILE=$PWD/$IN" >> "$GITHUB_ENV"

      - name: Use provided MP3 for transcript only
        if: ${{ inputs.mode == 'transcript_only' && inputs.existing_mp3_url != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          curl -L "${{ inputs.existing_mp3_url }}" -o "${ARTDIR}/${BASE}.mp3"
          echo "INPUT_FILE=${ARTDIR}/${BASE}.mp3" >> "$GITHUB_ENV"

      - name: Trim head and tail silence
        if: ${{ inputs.mode != 'attendees_only' && env.INPUT_FILE != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          TRIM_WAV="${WORKDIR}/trim_${{ github.run_id }}.wav"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" \
            -af "silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse,silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse" \
            -ar 48000 -ac 2 -c:a pcm_s16le "$TRIM_WAV"
          echo "AUDIO_IN=${TRIM_WAV}" >> "$GITHUB_ENV"

      - name: Loudness normalize to MP3
        if: ${{ inputs.mode != 'attendees_only' && env.AUDIO_IN != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          PASS1_JSON="${WORKDIR}/loudnorm1.json"
          ffmpeg -hide_banner -y -i "$AUDIO_IN" -af loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json -f null - 2>"${WORKDIR}/pass1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true
          if jq -e . "$PASS1_JSON" >/dev/null 2>&1; then
            I=$(jq -r '.input_i // "-16"'  "$PASS1_JSON"); TP=$(jq -r '.input_tp // "-1.5"' "$PASS1_JSON"); LRA=$(jq -r '.input_lra // "11"' "$PASS1_JSON"); TH=$(jq -r '.input_thresh // "-26"' "$PASS1_JSON")
            ffmpeg -hide_banner -y -i "$AUDIO_IN" -af "loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=$I:measured_TP=$TP:measured_LRA=$LRA:measured_thresh=$TH:linear=true" -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}.mp3"
          else
            ffmpeg -hide_banner -y -i "$AUDIO_IN" -af "loudnorm=I=-16:TP=-1.5:LRA=11" -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}.mp3"
          fi
          echo "MP3_PATH=${ARTDIR}/${BASE}.mp3" >> "$GITHUB_ENV"

      - name: Upload MP3 to GCS
        id: upload_mp3
        if: ${{ inputs.mode != 'attendees_only' && env.MP3_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}.mp3"
          gsutil cp "${MP3_PATH}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "GCS_AUDIO_URL=${RAW}" >> "$GITHUB_ENV"
          echo "audio_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "audio_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Upload crawler captions JSONL (debug)
        id: upload_cc
        if: ${{ env.CRAWLER_CC != '' && startsWith(env.CRAWLER_CC, env.ARTDIR) }}
        shell: bash
        run: |
          set -euxo pipefail
          CC_DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}_crawler_cc.jsonl"
          CC_RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}_crawler_cc.jsonl"
          gsutil cp "${CRAWLER_CC}" "$CC_DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$CC_DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "CRAWLER_CC_URL=${CC_RAW}" >> "$GITHUB_ENV"

          HEAD_TXT="$(head -n 40 "${CRAWLER_CC}" || true)"
          TAIL_TXT="$(tail -n 40 "${CRAWLER_CC}" || true)"
          LINE_CT="$(wc -l < "${CRAWLER_CC}" | tr -d ' ' || echo 0)"
          jq -n --arg url "${CC_RAW}" --arg head "${HEAD_TXT}" --arg tail "${TAIL_TXT}" --argjson lines ${LINE_CT:-0} \
            '{captions_jsonl_url:$url, captions_head:$head, captions_tail:$tail, captions_line_count:$lines}' \
            > "${ARTDIR}/${BASE}_crawler_debug.json"
          echo "CRAWLER_DEBUG_JSON=${ARTDIR}/${BASE}_crawler_debug.json" >> "$GITHUB_ENV"

      - name: FALLBACK captions via Deepgram (only if crawler VTT missing)
        id: deepgram
        if: ${{ inputs.mode != 'attendees_only' && env.VTT_PATH == '' && env.DEEPGRAM_API_KEY != '' && inputs.do_transcript == 'true' && env.MP3_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          curl -sS -X POST \
            -H "Authorization: Token ${DEEPGRAM_API_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${MP3_PATH}" \
            "https://api.deepgram.com/v1/listen?model=nova-2&smart_format=true&punctuate=true&format=vtt" \
            -o "${ARTDIR}/${BASE}.vtt" || true
          [ -s "${ARTDIR}/${BASE}.vtt" ] && echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV" || true

      - name: Upload VTT to GCS
        id: upload_vtt
        if: ${{ inputs.mode != 'attendees_only' && env.VTT_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}.vtt"
          gsutil cp "${VTT_PATH}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "GCS_VTT_URL=${RAW}" >> "$GITHUB_ENV"
          echo "vtt_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "vtt_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Build ads-spliced MP3 (ONLY when enabled and ads exist)
        id: ads_build
        if: ${{ env.ENABLE_ADS == 'true' && inputs.mode != 'attendees_only' && env.MP3_PATH != '' }}
        shell: bash
        env:
          ADS_DIR: ${{ env.WORKDIR }}/ads
        run: |
          set -euxo pipefail
          AD_COUNT=$(ls -1 "${ADS_DIR}"/ad_*.mp3 2>/dev/null | wc -l | tr -d ' ' || echo 0)
          if [ "${AD_COUNT:-0}" -eq 0 ]; then
            echo "No ads present — skipping ads version."
            exit 0
          fi
          MAP=""
          INDX=0
          for f in "${ADS_DIR}"/ad_*.mp3; do
            [ -f "$f" ] || continue
            INDX=$((INDX+1))
            MAP="$MAP -i \"$f\""
          done
          INDX=$((INDX+1))
          MAP="$MAP -i \"${MP3_PATH}\""
          eval ffmpeg -hide_banner -y $MAP -filter_complex "concat=n=${INDX}:v=0:a=1" -ar 48000 -ac 2 -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}-ads.mp3" || true
          if [ -s "${ARTDIR}/${BASE}-ads.mp3" ]; then
            echo "MP3_ADS_PATH=${ARTDIR}/${BASE}-ads.mp3" >> "$GITHUB_ENV"
          fi

      - name: Upload ads MP3 to GCS (ONLY when built)
        id: upload_ads
        if: ${{ steps.ads_build.outcome == 'success' && env.MP3_ADS_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}-ads.mp3"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}-ads.mp3"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}-ads.mp3"
          gsutil cp "${MP3_ADS_PATH}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "GCS_ADS_URL=${RAW}" >> "$GITHUB_ENV"
          echo "ads_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "ads_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Update WP title & slug (core route)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          TTL="${SPACE_TITLE:-${{ inputs.title }}}"
          [ -n "$TTL" ] || TTL="Space ${SPACE_ID:-unknown}"
          SLUG="${POST_SLUG:-}"
          [ -n "$SLUG" ] || SLUG="$(date -u +%F)-${SPACE_ID:-unknown}"
          SLUG="$(printf '%s' "$SLUG" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9-]+/-/g; s/-+/-/g; s/^-|-$//g')"
          BODY="$(jq -n --arg title "$TTL" --arg slug "$SLUG" '{title:$title, slug:$slug}')"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/wp/v2/posts/${{ inputs.post_id }}" \
            -d "$BODY" | jq -r '.id, .slug' 1>/dev/null || true

      - name: WordPress — patch assets (fields that actually exist)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        env:
          PID: ${{ inputs.post_id }}
        run: |
          set -euo pipefail
          echo "== WP Patch Debug =="
          echo "GCS_AUDIO_URL=${GCS_AUDIO_URL:-}"
          echo "GCS_VTT_URL=${GCS_VTT_URL:-}"
          echo "GCS_ADS_URL=${GCS_ADS_URL:-}"
          echo "ATTN_HTML=${ATTN_HTML:-}"
          echo "CRAWLER_CC_URL=${CRAWLER_CC_URL:-}"
          echo "CRAWLER_DEBUG_JSON=${CRAWLER_DEBUG_JSON:-}"

          AUDIO_URL="${GCS_AUDIO_URL:-}"
          VTT_URL="${GCS_VTT_URL:-}"
          ADS_URL="${GCS_ADS_URL:-}"

          AT_HTML=""
          [ -n "${ATTN_HTML:-}" ] && [ -s "${ATTN_HTML:-}" ] && AT_HTML="$(cat "${ATTN_HTML}")"

          CA_JSON="{}"
          if [ -n "${CRAWLER_DEBUG_JSON:-}" ] && [ -s "${CRAWLER_DEBUG_JSON:-}" ]; then
            CA_JSON="$(cat "${CRAWLER_DEBUG_JSON}")"
          elif [ -n "${CRAWLER_CC_URL:-}" ]; then
            CA_JSON="$(jq -n --arg url "${CRAWLER_CC_URL}" '{captions_jsonl_url:$url}')"
          fi

          BODY="$(jq -n \
            --arg pid  "${PID}" \
            --arg aud  "${AUDIO_URL}" \
            --arg vtt  "${VTT_URL}" \
            --arg ads  "${ADS_URL}" \
            --arg sd   "${SPACE_DATE_ISO:-}" \
            --arg ttl  "${SPACE_TITLE:-${{ inputs.title }}}" \
            --arg ath  "${AT_HTML}" \
            --argjson ca ${CA_JSON} '
            {
              post_id: ($pid|tonumber),
              status: "complete",
              progress: 100
            }
            + (if ($aud|length)>0 then {audio_url:$aud} else {} end)
            + (if ($vtt|length)>0 then {vtt_url:$vtt, has_transcript:true} else {} end)
            + (if ($ads|length)>0 then {audio_ads_url:$ads} else {} end)
            + (if ($sd|length)>0 then {space_date:$sd} else {} end)
            + (if ($ttl|length)>0 then {title:$ttl} else {} end)
            + (if ($ath|length)>0 then {attendees:$ath} else {} end)
            + (if ($ca|type=="object") then {crawler_artifacts:$ca} else {} end)
          ')"

          ENDPOINT="${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets"
          echo "POSTing to: $ENDPOINT"
          RESP="$(curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "$ENDPOINT" -d "$BODY" || true)"
          echo "$RESP" | jq -r . 2>/dev/null || echo "$RESP"

      - name: Summary
        shell: bash
        run: |
          {
            echo "### Space Worker Summary"
            echo "- Space URL: ${{ inputs.space_url }}"
            echo "- Space ID : ${SPACE_ID:-unknown}"
            echo "- Post ID  : ${{ inputs.post_id }}"
            echo "- Title    : ${SPACE_TITLE:-${{ inputs.title }}}"
            echo "- Space Date (ISO): ${SPACE_DATE_ISO:-unknown}"
            echo "- Audio URL: ${GCS_AUDIO_URL:-none}"
            echo "- VTT URL  : ${GCS_VTT_URL:-none}"
            echo "- Ads URL  : ${GCS_ADS_URL:-none}"
            echo "- Captions JSONL: ${CRAWLER_CC_URL:-none}"
            echo "- Mode     : ${{ inputs.mode }}"
            echo "- Ads flag : ${ENABLE_ADS:-false}"
          } >> "$GITHUB_STEP_SUMMARY"
