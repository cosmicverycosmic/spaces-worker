name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: "X (Twitter) Space URL (https://x.com/i/spaces/...)"
        required: true
        type: string
      title:
        description: "Post title to use in WordPress (fallback if no post_id)"
        required: false
        type: string
        default: ""
      post_id:
        description: "Existing WP post_id to register assets to (optional)"
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: "GCS prefix/folder (e.g. spaces/2025/02)"
        required: false
        type: string
        default: ""
      make_public:
        description: "Set GCS objects to public?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      do_transcript:
        description: "Generate diarized transcript + VTT via Deepgram?"
        required: false
        type: choice
        options: ["true", "false"]
        default: "true"
      wp_marker:
        description: "Opaque marker from WP (optional)"
        required: false
        type: string
        default: ""

permissions:
  contents: read

concurrency:
  group: ${{ format('space-worker-{0}-{1}', github.ref, inputs.post_id != '' && inputs.post_id || github.run_id) }}
  cancel-in-progress: false

env:
  # Prefer repository/org Secrets; fall back to repo/org Variables.
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}
  MEDIA_PROXY_BASE: ${{ secrets.MEDIA_PROXY_BASE || vars.MEDIA_PROXY_BASE }} # e.g. https://media.chbmp.org
  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  run:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Start / ping WP (queued)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "queued" \
                       --arg msg "Workflow received and queued." \
                       --arg run "${{ github.run_id }}" --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps (ffmpeg, jq, yt-dlp, gcloud)
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk

      - name: Validate secrets / normalize prefix
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR"
          PFX="$(echo "${{ inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"  # trim / on both ends
          echo "prefix=${PFX}" >> "$GITHUB_OUTPUT"

      - name: Ping (preflight starting)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Preflight: verifying WP auth, GCS access, and bucket permissions…" \
                       --arg run "${{ github.run_id }}" --argjson progress 5 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: GCP auth (service account)
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s\n' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      - name: Preflight: bucket ok + tiny upload
        id: preflight
        shell: bash
        env:
          PREFIX: ${{ steps.cfg.outputs.prefix }}
        run: |
          set -euxo pipefail
          gsutil ls -b "gs://${GCS_BUCKET}" >/dev/null
          echo "ok $(date -Iseconds) run=${GITHUB_RUN_ID}" > "${ARTDIR}/_preflight-${GITHUB_RUN_ID}.txt"
          if [ -n "$PREFIX" ]; then
            TEST="gs://${GCS_BUCKET}/${PREFIX}/_preflight/_preflight-${GITHUB_RUN_ID}.txt"
          else
            TEST="gs://${GCS_BUCKET}/_preflight/_preflight-${GITHUB_RUN_ID}.txt"
          fi
          gsutil cp "${ARTDIR}/_preflight-${GITHUB_RUN_ID}.txt" "${TEST}"
          gsutil acl ch -u AllUsers:R "${TEST}" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          gsutil rm -f "${TEST}" || true
          echo "ok=1" >> "$GITHUB_OUTPUT"

      - name: Ping (preflight ok)
        if: ${{ steps.preflight.outputs.ok == '1' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Preflight passed: WP & GCS verified. Proceeding…" \
                       --arg run "${{ github.run_id }}" --argjson progress 9 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (downloading)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Downloading Space audio…" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Download Space audio (yt-dlp bestaudio)
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        env:
          URL: ${{ inputs.space_url }}
        run: |
          set -euxo pipefail
          yt-dlp -o "%(title)s.%(ext)s" -f "bestaudio/best" "$URL"
          IN="$(ls -S | head -n1 || true)"
          test -f "$IN" || { echo "No file downloaded"; exit 1; }
          echo "INPUT_FILE=$PWD/$IN" >> "$GITHUB_ENV"
          # Extract the Space ID from the URL for later /peek
          SID="$(echo "$URL" | sed -E 's#.*/i/spaces/([A-Za-z0-9]+).*#\1#')"
          echo "SPACE_ID=$SID" >> "$GITHUB_ENV"

      - name: Try to scrape attendees (/peek)
        id: peek
        shell: bash
        env:
          SID: ${{ env.SPACE_ID }}
        run: |
          set -euo pipefail
          ATN_FILE="${ARTDIR}/attendees.html"
          : > "$ATN_FILE"

          if [ -n "$SID" ]; then
            PEEK_URL="https://x.com/i/spaces/${SID}/peek"
            RAW="${ARTDIR}/peek.raw"
            curl -sSL "$PEEK_URL" -o "$RAW" || true
            # Try to parse as JSON; tolerate HTML
            if jq -e type "$RAW" >/dev/null 2>&1; then
              jq -r '
                def norm(u):
                  { name: (u.display_name // u.name // ""),
                    handle: (u.screen_name // u.username // ""),
                    url: ("https://x.com/" + (u.screen_name // u.username // "")) };
                def list_block(lbl; arr):
                  if (arr|length)>0 then
                    "<li><strong>" + lbl + "</strong>\n<ul>\n" +
                    (arr|map("<li><a href=\"" + .url + "\" target=\"_blank\">" + (.name//"") + " (@" + (.handle//"") + ")</a></li>")|join("\n"))
                    + "\n</ul>\n</li>\n"
                  else "" end;

                # Grab likely buckets; structures can vary
                def grab(p): (getpath(p) // []);
                hosts    = (grab(["participants","admins"]) // grab(["participants","hosts"]) // grab(["admin"])) | map(norm) ;
                speakers = (grab(["participants","speakers"]) // grab(["speaker_users"])) | map(norm) ;
                cohosts0 = (grab(["participants","cohosts"])) | map(norm) ;

                # If multiple admins came back, treat the first as Host and the rest as Co-hosts
                host_one = ( (hosts|length) > 0 ) ? [hosts[0]] : [];
                extra_admins = ( (hosts|length) > 1 ) ? (hosts[1:]) : [] ;

                # Merge and dedupe Co-hosts
                def dedupe: unique_by(.handle|ascii_downcase);
                cohosts = (cohosts0 + extra_admins) | dedupe ;

                # Remove host/cohosts from speakers
                def isin(h; arr): (arr|map(.handle|ascii_downcase)|index((h.handle//"")|ascii_downcase)) != null;
                speakers_clean = (speakers // []) | map(select(.handle != "")) |
                                 map(select( (isin(.; host_one) or isin(.; cohosts)) | not ));

                "<ul>\n" +
                  list_block("Host"; host_one) +
                  list_block("Co-hosts"; cohosts) +
                  list_block("Speakers"; speakers_clean) +
                "\n</ul>\n"
              ' "$RAW" > "$ATN_FILE" || true
            fi
          fi

          echo "attendees_file=${ATN_FILE}" >> "$GITHUB_OUTPUT"

      - name: Ping (normalizing)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Trimming dead air, normalizing & encoding to MP3…" \
                         --arg run "${{ github.run_id }}" --argjson progress 30 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Trim silence + loudness normalization → MP3
        shell: bash
        env:
          TS: ${{ github.run_id }}
        run: |
          set -euxo pipefail
          # Silence trim filter: head + tail (via areverse)
          SIL="silenceremove=start_periods=1:start_duration=0.5:start_threshold=-45dB:window=0.05,areverse,silenceremove=start_periods=1:start_duration=0.5:start_threshold=-45dB:window=0.05,areverse"

          PASS1_JSON="${WORKDIR}/loudnorm_pass1_${TS}.json"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" -af "${SIL},loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json" -f null - 2>"${WORKDIR}/pass1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true
          ILOG="$(cat "$PASS1_JSON" 2>/dev/null || echo '{}')"
          ME_I=$(jq -r '.input_i // "-16"'    <<<"$ILOG")
          ME_TP=$(jq -r '.input_tp // "-1.5"' <<<"$ILOG")
          ME_LRA=$(jq -r '.input_lra // "11"'  <<<"$ILOG")
          ME_THR=$(jq -r '.input_thresh // "-26"'<<<"$ILOG")

          BASE="space-$(date +%Y%m%d-%H%M%S)-${TS}"
          echo "BASE=${BASE}" >> "$GITHUB_ENV"

          OUT_MP3="${ARTDIR}/${BASE}.mp3"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" \
            -af "${SIL},loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=${ME_I}:measured_TP=${ME_TP}:measured_LRA=${ME_LRA}:measured_thresh=${ME_THR}:print_format=summary" \
            -ar 48000 -ac 2 -codec:a libmp3lame -b:a 128k "$OUT_MP3"
          echo "OUT_MP3=$OUT_MP3" >> "$GITHUB_ENV"

      - name: Ping (encoded)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SIZE=$(stat -c%s "$OUT_MP3" 2>/dev/null || echo 0)
          MSG="MP3 ready: $(basename "$OUT_MP3") (${SIZE} bytes)"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 50 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (uploading MP3)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Uploading MP3 to GCS…" \
                         --arg run "${{ github.run_id }}" --argjson progress 55 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Upload MP3 to GCS (plus proxy URL)
        id: upload_mp3
        shell: bash
        env:
          PREFIX: ${{ steps.cfg.outputs.prefix }}
        run: |
          set -euxo pipefail
          if [ -n "$PREFIX" ]; then
            DEST="gs://${GCS_BUCKET}/${PREFIX}/${BASE}.mp3"
            GCS_PUBLIC="https://storage.googleapis.com/${GCS_BUCKET}/${PREFIX}/${BASE}.mp3"
            PROXY_PUBLIC="${MEDIA_PROXY_BASE:-https://media.chbmp.org}"
            PROXY_PUBLIC="${PROXY_PUBLIC%/}/${PREFIX}/${BASE}.mp3"
          else
            DEST="gs://${GCS_BUCKET}/${BASE}.mp3"
            GCS_PUBLIC="https://storage.googleapis.com/${GCS_BUCKET}/${BASE}.mp3"
            PROXY_PUBLIC="${MEDIA_PROXY_BASE:-https://media.chbmp.org}"
            PROXY_PUBLIC="${PROXY_PUBLIC%/}/${BASE}.mp3"
          fi
          gsutil cp "$OUT_MP3" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          echo "gcs_url=${GCS_PUBLIC}"   >> "$GITHUB_OUTPUT"
          echo "proxy_url=${PROXY_PUBLIC}" >> "$GITHUB_OUTPUT"

      - name: Ping (uploaded MP3)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          MSG="MP3 URL: ${{ steps.upload_mp3.outputs.proxy_url || steps.upload_mp3.outputs.gcs_url }}"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 60 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (transcribing)
        if: ${{ inputs.do_transcript == 'true' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Deepgram: diarized transcript & VTT…" \
                         --arg run "${{ github.run_id }}" --argjson progress 70 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Transcript + diarized VTT (collapsed by speaker)
        id: tx
        if: ${{ inputs.do_transcript == 'true' }}
        shell: bash
        env:
          DG_KEY: ${{ env.DEEPGRAM_API_KEY }}
        run: |
          set -euxo pipefail
          test -n "$DG_KEY" || { echo "DEEPGRAM_API_KEY not set"; exit 1; }
          DG_JSON="${ARTDIR}/dg.json"
          TX_PATH="${ARTDIR}/${BASE}.txt"
          VTT_PATH="${ARTDIR}/${BASE}.vtt"

          curl -sS -X POST "https://api.deepgram.com/v1/listen?smart_format=true&model=nova-2&diarize=true&utterances=true" \
            -H "Authorization: Token ${DG_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${OUT_MP3}" > "${DG_JSON}"

          # Build a collapsed array where consecutive same-speaker utterances are merged
          jq -c '
            def collapse:
              reduce .[] as $u
                ( [];
                  if (length==0 or .[-1].speaker != ($u.speaker // 0)) then
                    . + [{speaker: ($u.speaker // 0), start: ($u.start // 0), end: ($u.end // 0), text: ($u.transcript // "")}]
                  else
                    .[-1].end = ($u.end // .[-1].end)
                    | .[-1].text = (.[-1].text + " " + ($u.transcript // ""))
                    | .
                  end
                );
            if ((.results.utterances? | length) > 0)
            then {chunks: (.results.utterances | collapse)}
            else {plain: (.results.channels[0].alternatives[0].transcript // "")}
            end
          ' "${DG_JSON}" > "${ARTDIR}/dg.collapsed.json"

          # Write TXT
          if jq -e '.chunks' "${ARTDIR}/dg.collapsed.json" >/dev/null; then
            jq -r '.chunks[] | "Speaker \(.speaker + 1): \(.text)", ""' "${ARTDIR}/dg.collapsed.json" > "${TX_PATH}"
          else
            jq -r '.plain' "${ARTDIR}/dg.collapsed.json" > "${TX_PATH}"
          fi

          # Write VTT from collapsed chunks
          {
            echo "WEBVTT"
            echo
            jq -r '.chunks[]? | @base64' "${ARTDIR}/dg.collapsed.json" | while read -r b; do
              j="$(echo "$b" | base64 -d)"
              s=$(jq -r '.start//0' <<<"$j"); e=$(jq -r '.end//0' <<<"$j"); sp=$(jq -r '.speaker//0' <<<"$j"); t=$(jq -r '.text//""' <<<"$j")
              to_vtt() { awk -v t="$1" 'BEGIN{h=int(t/3600);t-=h*3600;m=int(t/60);s=t-m*60;ms=int((s-int(s))*1000);s=int(s);printf "%02d:%02d:%02d.%03d",h,m,s,ms}'; }
              printf "%s --> %s\n" "$(to_vtt "$s")" "$(to_vtt "$e")"
              printf "Speaker %d: %s\n\n" "$((sp+1))" "$t"
            done
          } > "${VTT_PATH}"

          echo "TX_PATH=${TX_PATH}"   >> "$GITHUB_ENV"
          echo "VTT_PATH=${VTT_PATH}" >> "$GITHUB_ENV"

      - name: Ping (transcribed)
        if: ${{ steps.tx.outcome == 'success' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Transcript & diarized VTT created (grouped by speaker)." \
                       --arg run "${{ github.run_id }}" --argjson progress 80 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (uploading VTT)
        if: ${{ steps.tx.outcome == 'success' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Uploading VTT to GCS…" \
                       --arg run "${{ github.run_id }}" --argjson progress 85 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Upload VTT to GCS (plus proxy URL)
        id: upload_vtt
        if: ${{ steps.tx.outcome == 'success' }}
        shell: bash
        env:
          PREFIX: ${{ steps.cfg.outputs.prefix }}
        run: |
          set -euxo pipefail
          test -f "${VTT_PATH}" || { echo "No VTT produced"; exit 1; }
          if [ -n "$PREFIX" ]; then
            DEST="gs://${GCS_BUCKET}/${PREFIX}/${BASE}.vtt"
            GCS_VTT="https://storage.googleapis.com/${GCS_BUCKET}/${PREFIX}/${BASE}.vtt"
            PROXY_VTT="${MEDIA_PROXY_BASE:-https://media.chbmp.org}"
            PROXY_VTT="${PROXY_VTT%/}/${PREFIX}/${BASE}.vtt"
          else
            DEST="gs://${GCS_BUCKET}/${BASE}.vtt"
            GCS_VTT="https://storage.googleapis.com/${GCS_BUCKET}/${BASE}.vtt"
            PROXY_VTT="${MEDIA_PROXY_BASE:-https://media.chbmp.org}"
            PROXY_VTT="${PROXY_VTT%/}/${BASE}.vtt"
          fi
          gsutil cp "${VTT_PATH}" "$DEST"
          if [ "${{ inputs.make_public }}" = "true" ]; then
            gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}" || true
          fi
          echo "vtt_url=${GCS_VTT}"   >> "$GITHUB_OUTPUT"
          echo "proxy_vtt=${PROXY_VTT}" >> "$GITHUB_OUTPUT"

      - name: Ping (uploaded VTT)
        if: ${{ steps.upload_vtt.outcome == 'success' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          MSG="VTT URL: ${{ steps.upload_vtt.outputs.proxy_vtt || steps.upload_vtt.outputs.vtt_url }}"
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" --arg msg "$MSG" \
                       --arg run "${{ github.run_id }}" --argjson progress 90 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Ping (registering in WordPress)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "processing" \
                       --arg msg "Registering assets in WordPress…" \
                       --arg run "${{ github.run_id }}" --argjson progress 95 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Register in WordPress (with proxy URLs + attendees)
        id: register
        shell: bash
        env:
          WP_URL:        ${{ env.WP_BASE_URL }}
          WP_AUTH:       ${{ env.WP_USER }}:${{ env.WP_APP_PASSWORD }}
          GCS_URL:       ${{ steps.upload_mp3.outputs.gcs_url }}
          PROXY_URL:     ${{ steps.upload_mp3.outputs.proxy_url }}
          GCS_VTT:       ${{ steps.upload_vtt.outputs.vtt_url }}
          PROXY_VTT:     ${{ steps.upload_vtt.outputs.proxy_vtt }}
          TITLE_IN:      ${{ inputs.title }}
          POST_ID_IN:    ${{ inputs.post_id }}
          ATTN_FILE:     ${{ steps.peek.outputs.attendees_file }}
        run: |
          set -euxo pipefail
          JFILE="${ARTDIR}/register.json"
          TXFILE="${TX_PATH:-${ARTDIR}/${BASE}.txt}"
          [ -f "$TXFILE" ] || : > "$TXFILE"
          MP3_URL="${PROXY_URL:-$GCS_URL}"
          VTT_URL="${PROXY_VTT:-$GCS_VTT}"
          ATTN_HTML="$(cat "${ATTN_FILE:-/dev/null}" 2>/dev/null || true)"

          jq -n \
            --arg title   "${TITLE_IN}" \
            --arg gcs     "${MP3_URL}" \
            --arg mime    "audio/mpeg" \
            --arg vtt     "${VTT_URL}" \
            --arg pid     "${POST_ID_IN}" \
            --arg attendees "${ATTN_HTML}" \
            --rawfile tx  "${TXFILE}" '
            {
              title: ($title // ""),
              gcs_url: $gcs,
              mime: $mime,
              vtt_url: ( ($vtt // "") | select(length>0) ),
              transcript: ( ($tx // "") | select(length>0) ),
              attendees_html: ( ($attendees // "") | select(length>0) )
            }
            + ( ($pid|tonumber? // null) as $maybe
                | if $maybe then {post_id:$maybe} else {} end )
          ' > "$JFILE"

          RESP="${ARTDIR}/register.out.json"
          curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
            -X POST "${WP_URL%/}/wp-json/ss3k/v1/register" \
            --data-binary @"${JFILE}" > "${RESP}"

          PERMA=$(jq -r '.permalink // ""' "${RESP}")
          EDIT_URL="${WP_URL%/}/wp-admin/post.php?post=${POST_ID_IN}&action=edit"

          curl -sS -u "${WP_AUTH}" -H "Content-Type: application/json" \
            -X POST "${WP_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${POST_ID_IN}" --arg status "complete" \
                       --arg msg "Worker finished. View: ${PERMA} · Edit: ${EDIT_URL}" \
                       --arg run "${{ github.run_id }}" --argjson progress 100 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

          jq . "${RESP}" || true

      - name: Ping WP on failure
        if: ${{ failure() && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ inputs.post_id }}" --arg status "error" \
                       --arg msg "Worker failed. See GitHub run ${{ github.run_id }}." \
                       --arg run "${{ github.run_id }}" --argjson progress 100 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Job summary
        if: ${{ always() }}
        shell: bash
        run: |
          {
            echo "### Space Worker Summary"
            echo "- **Space URL:** ${{ inputs.space_url }}"
            echo "- **Post ID:** ${{ inputs.post_id }}"
            echo "- **MP3 (proxy):** ${{ steps.upload_mp3.outputs.proxy_url }}"
            echo "- **MP3 (GCS):** ${{ steps.upload_mp3.outputs.gcs_url }}"
            if [ "${{ steps.upload_vtt.outputs.proxy_vtt }}" != "" ]; then
              echo "- **VTT (proxy):** ${{ steps.upload_vtt.outputs.proxy_vtt }}"
            fi
            if [ "${{ steps.upload_vtt.outputs.vtt_url }}" != "" ]; then
              echo "- **VTT (GCS):** ${{ steps.upload_vtt.outputs.vtt_url }}"
            fi
            echo "- **Public:** ${{ inputs.make_public }}"
            echo "- **Transcript:** ${{ inputs.do_transcript }}"
          } >> "$GITHUB_STEP_SUMMARY"
