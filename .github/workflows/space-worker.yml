name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: X/Twitter Space URL (https://x.com/i/spaces/…)
        required: true
        type: string
        default: ""
      post_id:
        description: Existing WordPress post ID (optional)
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: GCS prefix (default spaces/YYYY/MM)
        required: false
        type: string
        default: ""
      make_public:
        description: Make uploaded artifacts public
        required: true
        type: choice
        options: ["true","false"]
        default: "true"

      # Audio & transcription UX options
      optimize_audio:
        description: Apply EQ/denoise/leveling before encode
        required: true
        type: choice
        options: ["true","false"]
        default: "true"
      audio_profile:
        description: Encode tuning
        required: true
        type: choice
        options: ["transparent","radio","aggressive"]
        default: "radio"
      aggressive_denoise:
        description: Extra arnndn denoise (aggressive profile only)
        required: true
        type: choice
        options: ["false","true"]
        default: "false"

      clean_transcript:
        description: Run transcript cleaning/polish if a transcript is generated
        required: true
        type: choice
        options: ["true","false"]
        default: "true"
      transcript_gec:
        description: Grammar/spelling pass
        required: true
        type: choice
        options: ["false","true"]
        default: "false"
      transcript_smart_quotes:
        description: Curly quotes/ellipses etc.
        required: true
        type: choice
        options: ["false","true"]
        default: "false"
      transcript_strip_emoji:
        description: Remove emoji from transcript
        required: true
        type: choice
        options: ["false","true"]
        default: "true"
      transcript_drop_emoji_only:
        description: Drop lines that are emoji-only
        required: true
        type: choice
        options: ["false","true"]
        default: "true"

      # Debug retention/mirroring
      debug_retention_days:
        description: Days to keep crawler debug artifact
        required: true
        type: choice
        options: ["3","7","14","30"]
        default: "7"
      mirror_debug_to_gcs:
        description: Also copy debug bundle to GCS (under ${BASE}_debug/)
        required: true
        type: choice
        options: ["false","true"]
        default: "false"

permissions:
  contents: read
  packages: read

env:
  # Required service creds (prefer repo/Org secrets; vars as soft fallback)
  GCP_SA_KEY:       ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:       ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:      ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:          ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:  ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}

  # X/Twitter – either Bearer OR cookie pair (auth_token + ct0)
  TWITTER_AUTHORIZATION: ${{ secrets.TWITTER_AUTHORIZATION || secrets.X_BEARER     || vars.TWITTER_AUTHORIZATION || vars.X_BEARER }}
  TWITTER_AUTH_TOKEN:    ${{ secrets.TWITTER_AUTH_TOKEN    || secrets.X_AUTH_TOKEN || vars.TWITTER_AUTH_TOKEN    || vars.X_AUTH_TOKEN }}
  TWITTER_CSRF_TOKEN:    ${{ secrets.TWITTER_CSRF_TOKEN    || secrets.X_CSRF       || vars.TWITTER_CSRF_TOKEN    || vars.X_CSRF }}

  # Defaults for transcript cleaning (overridden by inputs step below)
  TRANSCRIPT_GEC: "false"
  TRANSCRIPT_SMART_QUOTES: "false"
  TRANSCRIPT_STRIP_EMOJI: "true"
  TRANSCRIPT_DROP_EMOJI_ONLY: "true"

  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  process:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180
    concurrency:
      group: ${{ format('space-worker-{0}-{1}', github.ref, github.run_id) }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip ca-certificates gnupg
          python3 -m pip install --upgrade pip
          # gcloud SDK (gsutil)
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk

      - name: Validate config & prefixes
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCP_SA_KEY}" || { echo "GCP_SA_KEY missing"; exit 1; }
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR" "$ARTDIR/logs"
          PFX="$(echo "${{ github.event.inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"
          if [ -z "$PFX" ]; then PFX="spaces/$(date +%Y)/$(date +%m)"; fi
          echo "PREFIX=$PFX"                  >> "$GITHUB_ENV"
          echo "BUCKET_PREFIX=${PFX#spaces/}" >> "$GITHUB_ENV"

      - name: Derive Space ID & base
        id: ids
        shell: bash
        env:
          URL: ${{ github.event.inputs.space_url }}
        run: |
          set -euxo pipefail
          SID="$(echo "$URL" | sed -nE 's#^.*/i/spaces/([^/?#]+).*#\1#p')"
          [ -n "$SID" ] || { echo "Could not parse Space ID from URL"; exit 2; }
          BASE="space-$(date +%m-%d-%Y)-${SID}"
          echo "SPACE_ID=${SID}" >> "$GITHUB_ENV"
          echo "BASE=${BASE}"    >> "$GITHUB_ENV"
          echo "space_id=${SID}" >> "$GITHUB_OUTPUT"
          echo "base=${BASE}"    >> "$GITHUB_OUTPUT"

      - name: Apply transcript cleaning options
        shell: bash
        run: |
          set -euo pipefail
          echo "TRANSCRIPT_GEC=${{ github.event.inputs.transcript_gec }}" >> "$GITHUB_ENV"
          echo "TRANSCRIPT_SMART_QUOTES=${{ github.event.inputs.transcript_smart_quotes }}" >> "$GITHUB_ENV"
          echo "TRANSCRIPT_STRIP_EMOJI=${{ github.event.inputs.transcript_strip_emoji }}" >> "$GITHUB_ENV"
          echo "TRANSCRIPT_DROP_EMOJI_ONLY=${{ github.event.inputs.transcript_drop_emoji_only }}" >> "$GITHUB_ENV"

      - name: GCP auth
        shell: bash
        run: |
          set -euxo pipefail
          printf '%s' "${GCP_SA_KEY}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json" >/dev/null

      - name: X auth preflight
        id: x_preflight
        shell: bash
        run: |
          set -euo pipefail
          AUTH="${TWITTER_AUTHORIZATION:-}"
          AT="${TWITTER_AUTH_TOKEN:-}"
          CT="${TWITTER_CSRF_TOKEN:-}"
          if [ -n "$AUTH" ] && ! printf '%s' "$AUTH" | grep -q '^Bearer '; then AUTH=""; fi
          [ -n "${TWITTER_AUTHORIZATION:-}" ] && echo "::add-mask::${TWITTER_AUTHORIZATION}"
          [ -n "$AT" ] && echo "::add-mask::${AT}"
          [ -n "$CT" ] && echo "::add-mask::${CT}"
          OK=0
          [ -n "$AT" ] && [ -n "$CT" ] && OK=1 || true
          [ -n "$AUTH" ] && OK=1 || true
          echo "ok=${OK}" >> "$GITHUB_OUTPUT"
          [ -n "$AUTH" ] && echo "TWITTER_AUTHORIZATION=$AUTH" >> "$GITHUB_ENV"
          [ "$OK" -eq 1 ] || { echo "Missing X/Twitter auth (Bearer or cookies)"; exit 3; }

      - name: Run crawler (audio + CC)
        id: crawl
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
        run: |
          set -euxo pipefail
          docker pull ghcr.io/hitomarukonpaku/twspace-crawler:latest || true
          LOG_STD="${ARTDIR}/logs/crawler_${SID}.out.log"
          LOG_ERR="${ARTDIR}/logs/crawler_${SID}.err.log"
          set +e
          timeout 20m docker run --rm \
            -e TWITTER_AUTHORIZATION \
            -e TWITTER_AUTH_TOKEN \
            -e TWITTER_CSRF_TOKEN \
            -v "${ARTDIR}:/app/download" \
            -v "${ARTDIR}/logs:/app/logs" \
            ghcr.io/hitomarukonpaku/twspace-crawler:latest \
            --id "${SID}" --force > >(tee -a "$LOG_STD") 2> >(tee -a "$LOG_ERR" >&2)
          RC=$?
          set -e

          AUDIO_FILE="$(find "${ARTDIR}" -type f \( -iname '*.m4a' -o -iname '*.mp3' -o -iname '*.mp4' -o -iname '*.aac' -o -iname '*.webm' -o -iname '*.ogg' -o -iname '*.wav' -o -iname '*.ts' \) -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          [ -n "${AUDIO_FILE:-}" ] && [ -f "${AUDIO_FILE}" ] || { echo "Crawler produced no audio."; exit 4; }
          echo "INPUT_FILE=${AUDIO_FILE}" >> "$GITHUB_ENV"
          echo "audio_file=${AUDIO_FILE}" >> "$GITHUB_OUTPUT"

          RAW="$(grep -hF 'getAudioSpaceById |' "$LOG_STD" "$LOG_ERR" | tail -n1 || true)"
          [ -z "$RAW" ] && RAW="$(grep -hF 'getAudioSpaceByRestId |' "$LOG_STD" "$LOG_ERR" | tail -n1 || true)"
          if [ -n "$RAW" ]; then
            printf '%s\n' "$RAW" | awk -F'\\| ' '{print $NF}' > "${ARTDIR}/_as_line.json" || true
            echo "AS_LINE_JSON=${ARTDIR}/_as_line.json" >> "$GITHUB_ENV"
            echo "as_line=${ARTDIR}/_as_line.json" >> "$GITHUB_OUTPUT"
          fi

          CC_JSONL="$(find "${ARTDIR}" -type f \( -iname '*cc.jsonl' -o -iname '*caption*.jsonl' -o -iname '*captions*.jsonl' \) -print | head -n1 || true)"
          if [ -n "${CC_JSONL:-}" ]; then
            echo "CRAWLER_CC=${CC_JSONL}" >> "$GITHUB_ENV"
          fi

          # anchor epoch
          ANCHOR=""
          if [ -s "${ARTDIR}/_as_line.json" ]; then
            MS="$(jq -r '(.audioSpace // .) as $a | ($a.metadata.started_at // $a.metadata.created_at // $a.metadata.start // empty)' "${ARTDIR}/_as_line.json" || true)"
            if [[ "$MS" =~ ^[0-9]+$ ]]; then
              if [ ${#MS} -gt 10 ]; then ANCHOR=$((MS/1000)); else ANCHOR=$MS; fi
            fi
          fi
          echo "ABS_ANCHOR_EPOCH=${ANCHOR}" >> "$GITHUB_ENV"

      - name: Collect crawler debug bundle
        shell: bash
        run: |
          set -euxo pipefail
          DBG="${ARTDIR}/debug"
          mkdir -p "$DBG"
          [ -n "${CRAWLER_CC:-}" ] && [ -s "${CRAWLER_CC}" ] && cp -f -- "${CRAWLER_CC}" "${DBG}/captions.jsonl" || true
          [ -s "${ARTDIR}/_as_line.json" ] && cp -f -- "${ARTDIR}/_as_line.json" "${DBG}/as_line.json" || true
          [ -d "${ARTDIR}/logs" ] && cp -f -- "${ARTDIR}/logs/"* "${DBG}/" 2>/dev/null || true

      - name: Upload crawler debug artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crawler-debug-${{ env.SPACE_ID }}
          path: ${{ env.ARTDIR }}/debug
          if-no-files-found: ignore
          retention-days: ${{ github.event.inputs.debug_retention_days || '7' }}

      - name: Mirror debug bundle to GCS (optional)
        if: ${{ env.GCS_BUCKET != '' && github.event.inputs.mirror_debug_to_gcs == 'true' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}_debug"
          gsutil -m cp -r "${ARTDIR}/debug" "${DEST}"
          if [ "${{ github.event.inputs.make_public }}" = "true" ]; then
            (gsutil -m acl ch -r -u AllUsers:R "${DEST}" || gsutil -m iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi

      - name: Detect lead silence
        id: detect
        shell: bash
        run: |
          set -euxo pipefail
          LOG="${WORKDIR}/silence.log"
          ffmpeg -hide_banner -i "$INPUT_FILE" -af "silencedetect=noise=-45dB:d=1" -f null - 2> "$LOG" || true
          LEAD="$(awk '/silence_end/ {print $5; exit}' "$LOG" || true)"
          case "$LEAD" in ''|*[^0-9.]* ) LEAD="0.0" ;; esac
          echo "TRIM_LEAD=${LEAD}" >> "$GITHUB_ENV"
          echo "lead=${LEAD}"       >> "$GITHUB_OUTPUT"

      - name: Trim head/tail (RF64-safe)
        shell: bash
        run: |
          set -euxo pipefail
          TRIM_WAV="${WORKDIR}/trim_${{ github.run_id }}.wav"
          ffmpeg -hide_banner -y -i "$INPUT_FILE" \
            -af "silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse,silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse" \
            -rf64 always -c:a pcm_s16le "$TRIM_WAV"
          echo "AUDIO_IN=${TRIM_WAV}" >> "$GITHUB_ENV"

      - name: Probe audio
        id: probe
        shell: bash
        run: |
          set -euxo pipefail
          J="$(ffprobe -v error -select_streams a:0 -show_entries stream=channels,sample_rate -of json "$AUDIO_IN")"
          CH=$(echo "$J" | jq -r '.streams[0].channels // 1')
          SR=$(echo "$J" | jq -r '.streams[0].sample_rate // "48000"')
          echo "SRC_CH=${CH}" >> "$GITHUB_ENV"
          echo "SRC_SR=${SR}" >> "$GITHUB_ENV"

      - name: Encode MP3
        shell: bash
        env:
          PROF: ${{ github.event.inputs.audio_profile }}
          OPT:  ${{ github.event.inputs.optimize_audio }}
        run: |
          set -euxo pipefail
          OUT="${ARTDIR}/${BASE}.mp3"
          CH="${SRC_CH:-1}"
          SR="${SRC_SR:-48000}"

          if [ "${OPT}" = "false" ]; then
            # simple, no FX
            ffmpeg -hide_banner -y -i "$AUDIO_IN" -map a:0 -c:a libmp3lame -q:a 2 -ar "$SR" -ac "$CH" "$OUT"
          else
            # optimized pipelines
            if [ "${PROF}" = "transparent" ]; then
              ffmpeg -hide_banner -y -i "$AUDIO_IN" -map a:0 -c:a libmp3lame -q:a 0 -ar "$SR" -ac "$CH" "$OUT"
            else
              PRE="highpass=f=60,lowpass=f=14000,afftdn=nr=4:nf=-28,deesser=i=0.12"
              if [ "${PROF}" = "aggressive" ]; then
                PRE="highpass=f=70,lowpass=f=11500,afftdn=nr=8:nf=-25,deesser=i=0.2"
                if [ "${{ github.event.inputs.aggressive_denoise }}" = "true" ]; then
                  M="${WORKDIR}/rnnoise.rnnn"
                  curl -fsSL -o "$M" https://raw.githubusercontent.com/GregorR/rnnoise-models/master/heavyrnnoise.rnnn || true
                  [ -s "$M" ] && PRE="arnndn=m=${M},${PRE}"
                fi
              fi
              # two-pass loudnorm
              PASS1_JSON="${WORKDIR}/loudnorm1.json"
              ffmpeg -hide_banner -y -i "$AUDIO_IN" -af "${PRE},acompressor=threshold=-18dB:ratio=2:attack=12:release=220:makeup=2,loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json" -f null - 2>"${WORKDIR}/pass1.log" || true
              awk '/^{/{f=1} f{print} /}/{f=0}' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true
              if jq -e . "$PASS1_JSON" >/dev/null 2>&1; then
                I=$(jq -r '.input_i // "-16"'  "$PASS1_JSON")
                TP=$(jq -r '.input_tp // "-1.5"' "$PASS1_JSON")
                LRA=$(jq -r '.input_lra // "11"' "$PASS1_JSON")
                TH=$(jq -r '.input_thresh // "-26"' "$PASS1_JSON")
                ffmpeg -hide_banner -y -i "$AUDIO_IN" \
                  -af "${PRE},acompressor=threshold=-18dB:ratio=2:attack=12:release=220:makeup=2,loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=$I:measured_TP=$TP:measured_LRA=$LRA:measured_thresh=$TH:linear=true" \
                  -c:a libmp3lame -q:a 2 -ar "$SR" -ac "$CH" "$OUT"
              else
                ffmpeg -hide_banner -y -i "$AUDIO_IN" \
                  -af "${PRE},acompressor=threshold=-18dB:ratio=2:attack=12:release=220:makeup=2,loudnorm=I=-16:TP=-1.5:LRA=11" \
                  -c:a libmp3lame -q:a 2 -ar "$SR" -ac "$CH" "$OUT"
              fi
            fi
          fi
          echo "MP3_PATH=${OUT}" >> "$GITHUB_ENV"

      - name: Upload MP3 to GCS
        id: upload_mp3
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}.mp3"
          gsutil -m cp "${MP3_PATH}" "$DEST"
          if [ "${{ github.event.inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "audio_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "audio_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Build VTT/transcript from crawler CC (if script present)
        shell: bash
        env:
          CC_JSONL: ${{ env.CRAWLER_CC }}
          SHIFT_SECS: ${{ steps.detect.outputs.lead || '0' }}
        run: |
          set -euxo pipefail
          if [ -n "${CC_JSONL:-}" ] && [ -s "${CC_JSONL}" ] && [ -f "scripts/gen_vtt.py" ]; then
            CC_JSONL="${CC_JSONL}" ARTDIR="${ARTDIR}" BASE="${BASE}" SHIFT_SECS="${SHIFT_SECS}" ABS_ANCHOR_EPOCH="${ABS_ANCHOR_EPOCH:-}" \
              python3 "scripts/gen_vtt.py" || true
            [ -s "${ARTDIR}/${BASE}.vtt" ] && echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV" || true
            [ -s "${ARTDIR}/${BASE}_transcript.html" ] && echo "TRANSCRIPT_PATH=${ARTDIR}/${BASE}_transcript.html" >> "$GITHUB_ENV" || true
          else
            echo "No CC JSONL or gen_vtt.py missing; skipping VTT/transcript build."
          fi

      - name: Polish transcript (optional)
        if: ${{ github.event.inputs.clean_transcript == 'true' && env.TRANSCRIPT_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "scripts/polish_transcript.py" ]; then
            python3 "scripts/polish_transcript.py" || true
            if [ -s "${ARTDIR}/${BASE}_transcript_polished.html" ]; then
              echo "TRANSCRIPT_PATH=${ARTDIR}/${BASE}_transcript_polished.html" >> "$GITHUB_ENV"
            fi
          else
            echo "polish_transcript.py missing; skipping."
          fi

      - name: Upload VTT to GCS
        id: upload_vtt
        if: ${{ env.VTT_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          PROXY="https://media.chbmp.org/${PREFIX}/${BASE}.vtt"
          gsutil -m cp "${VTT_PATH}" "$DEST"
          if [ "${{ github.event.inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "vtt_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "vtt_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Build attendees HTML
        id: attendees
        shell: bash
        env:
          CAND: ${{ steps.crawl.outputs.as_line }}
        run: |
          set -euxo pipefail
          OUT_JSON="${ARTDIR}/attendees.json"
          OUT_HTML="${ARTDIR}/attendees.html"
          if [ -n "${CAND:-}" ] && [ -s "${CAND}" ]; then
            jq -r '
              def mkp:
                { handle: (.twitter_screen_name // .user_results?.result?.legacy?.screen_name),
                  name:   (.display_name       // .user_results?.result?.legacy?.name)
                }
                | select(.handle!=null and .handle!="" )
                | . + { url: ("https://x.com/" + .handle) };
              (.audioSpace // .) as $a
              | ($a.metadata?.creator_results?.result?.legacy?) as $h
              | ($h.screen_name // empty) as $H
              | {
                  host:    ( if $H != "" then [ {handle:$H, name:($h.name // ""), url:("https://x.com/" + $H)} ] else [] end ),
                  cohosts: ( ($a.participants?.admins   // []) | map(mkp) | map(select(.handle != $H)) | unique_by(.handle) ),
                  speakers:( ($a.participants?.speakers // []) | map(mkp) | unique_by(.handle) )
                }
            ' "${CAND}" > "$OUT_JSON" || true
            if [ -s "$OUT_JSON" ]; then
              jq -r '
                def li: "  <li><a href=\"" + (.url//"#") + "\">" + ((.name // "") + " (@" + (.handle // "") + ")") + "</a></li>";
                def section(title; items):
                  if (items|length) > 0
                  then "<li><strong>" + title + "</strong><ul>\n" + (items|map(li)|join("\n")) + "\n</ul></li>\n"
                  else ""
                  end;
                . as $d
                | "<ul>\n"
                + section("Host"; $d.host)
                + section( (if ($d.cohosts|length)==1 then "Co-host" else "Co-hosts" end); $d.cohosts)
                + section("Speakers"; $d.speakers)
                + "</ul>\n"
              ' "$OUT_JSON" > "$OUT_HTML"
              if grep -qi '<li><a ' "$OUT_HTML"; then
                echo "ATTN_HTML=${OUT_HTML}" >> "$GITHUB_ENV"
                echo "ATTENDEES_OK=1"       >> "$GITHUB_ENV"
              fi
            fi
          fi

      - name: Scrape replies & shared links (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "scripts/replies.py" ]; then
            python3 "scripts/replies.py" || true
            [ -s "${ARTDIR}/${BASE}_replies.html" ] && echo "REPLIES_PATH=${ARTDIR}/${BASE}_replies.html" >> "$GITHUB_ENV" || true
            [ -s "${ARTDIR}/${BASE}_links.html" ]   && echo "LINKS_PATH=${ARTDIR}/${BASE}_links.html" >> "$GITHUB_ENV"   || true
          else
            echo "replies.py missing; skipping."
          fi

      - name: Derive title & date
        id: meta
        shell: bash
        env:
          AS_LINE: ${{ steps.crawl.outputs.as_line }}
        run: |
          set -euo pipefail
          TTL=""
          if [ -n "${AS_LINE:-}" ] && [ -s "${AS_LINE}" ]; then
            TTL="$(jq -r '(.audioSpace // .) as $a | ($a.metadata.title // $a.metadata.name // .title // "")' "${AS_LINE}" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')"
          fi
          [ -z "$TTL" ] && TTL="${BASE}"
          echo "TTL_FINAL=$TTL" >> "$GITHUB_ENV"

          START_ISO=""
          if [ -n "${AS_LINE:-}" ] && [ -s "${AS_LINE}" ]; then
            MS="$(jq -r '(.audioSpace // .) as $a | ($a.metadata.started_at // $a.metadata.created_at // $a.metadata.start // empty)' "${AS_LINE}" || true)"
            if [[ "$MS" =~ ^[0-9]+$ ]]; then
              if [ ${#MS} -gt 10 ]; then SECS=$((MS/1000)); else SECS=$MS; fi
              START_ISO="$(date -u -d "@$SECS" +%Y-%m-%dT%H:%M:%SZ || true)"
            fi
          fi
          [ -z "$START_ISO" ] && START_ISO="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "START_ISO=$START_ISO" >> "$GITHUB_ENV"

      - name: Register assets to WordPress
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' }}
        shell: bash
        env:
          AUDIO_URL: ${{ steps.upload_mp3.outputs.audio_proxy || steps.upload_mp3.outputs.audio_raw }}
          VTT_URL:   ${{ steps.upload_vtt.outputs.vtt_proxy   || steps.upload_vtt.outputs.vtt_raw }}
        run: |
          set -euo pipefail
          PID="${{ github.event.inputs.post_id }}"
          declare -a jqargs
          jqargs=( -n
            --arg gcs "$AUDIO_URL"
            --arg mime "audio/mpeg"
            --arg title "$TTL_FINAL"
            --arg vtt "$VTT_URL"
            --arg space_date "$START_ISO"
            --arg pid "$PID"
          )
          if [ -n "${TRANSCRIPT_PATH:-}" ] && [ -s "${TRANSCRIPT_PATH}" ]; then
            jqargs+=( --argjson transcript "$(jq -Rs . "$TRANSCRIPT_PATH")" )
          fi
          if [ -n "${ATTN_HTML:-}" ] && [ -s "${ATTN_HTML}" ]; then
            jqargs+=( --argjson attendees_html "$(jq -Rs . "$ATTN_HTML")" )
          fi

          JSON="$(jq "${jqargs[@]}" '
            { gcs_url: $gcs, mime: $mime, title: $title, space_date: $space_date }
            + ( ($pid|length)>0 ? {post_id:($pid|tonumber)} : {} )
            + ( ($vtt|length)>0 ? {vtt_url:$vtt} : {} )
            + ( ( $transcript // empty ) as $t | if ($t|type)=="string" then {transcript:$t} else {} end )
            + ( ( $attendees_html // empty ) as $a | if ($a|type)=="string" then {attendees_html:$a} else {} end )
          ')"

          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/register" \
            -d "${JSON}"

      - name: Job summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          AUDIO_URL="${{ steps.upload_mp3.outputs.audio_proxy || steps.upload_mp3.outputs.audio_raw }}"
          VTT_URL="${{ steps.upload_vtt.outputs.vtt_proxy   || steps.upload_vtt.outputs.vtt_raw }}"
          echo "## Space Worker Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "**Base**: \`${BASE}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "**Space ID**: \`${SPACE_ID:-unknown}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "**Start (UTC)**: \`${START_ISO:-}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "**Lead trim (s)**: \`${TRIM_LEAD:-0}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "**Anchor epoch**: \`${ABS_ANCHOR_EPOCH:-}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          if [ -n "${AUDIO_URL}" ]; then
            echo "- 🎧 **Audio**: ${AUDIO_URL}" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- 🎧 **Audio**: *(not uploaded)*" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [ -n "${VTT_URL}" ]; then
            echo "- 📝 **Captions (VTT)**: ${VTT_URL}" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- 📝 **Captions (VTT)**: *(not available)*" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [ -f "${TRANSCRIPT_PATH:-/nope}" ]; then
            BYTES=$(wc -c < "${TRANSCRIPT_PATH}"); echo "- 📄 **Transcript HTML**: generated (\`${BYTES} bytes\`)" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- 📄 **Transcript HTML**: *(not generated)*" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [ -f "${ARTDIR}/${BASE}_replies.html" ]; then
            RSIZE=$(wc -c < "${ARTDIR}/${BASE}_replies.html"); echo "- 💬 **Replies HTML**: present (\`${RSIZE} bytes\`)" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- 💬 **Replies HTML**: *(not generated)*" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [ -f "${ARTDIR}/attendees.html" ]; then
            ASIZE=$(wc -c < "${ARTDIR}/attendees.html"); echo "- 👥 **Attendees HTML**: present (\`${ASIZE} bytes\`)" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- 👥 **Attendees HTML**: *(not generated)*" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "> Artifacts directory: \`${ARTDIR}\`" >> "$GITHUB_STEP_SUMMARY"
