name: Space Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: X or Twitter Space URL
        required: false
        type: string
        default: ""
      post_id:
        description: Existing WordPress post ID (optional)
        required: false
        type: string
        default: ""
      title:
        description: Fallback post title (optional)
        required: false
        type: string
        default: ""
      gcs_prefix:
        description: GCS prefix (default spaces/YYYY/MM)
        required: false
        type: string
        default: ""
      make_public:
        description: Make uploaded artifacts public
        required: false
        type: choice
        options: ["true","false"]
        default: "true"
      do_transcript:
        description: Use Deepgram if crawler captions unavailable
        required: false
        type: choice
        options: ["true","false"]
        default: "true"
      mode:
        description: Limit processing (''=full, transcript_only, attendees_only, vtt_only, links_only, ads_only, patch_all_from_mp3, delete_ads_version, watch)
        required: false
        type: choice
        options:
          - ""
          - transcript_only
          - attendees_only
          - vtt_only
          - links_only
          - ads_only
          - patch_all_from_mp3
          - delete_ads_version
          - watch
        default: ""
      existing_mp3_url:
        description: For partial modes; URL to existing base MP3
        required: false
        type: string
        default: ""
      inputs_json:
        description: JSON bag for extra toggles (enable_* / ads_urls / purple_tweet_url / audio_ads_url / watch_users / watch_duration_minutes)
        required: false
        type: string
        default: ""

permissions:
  contents: read
  packages: read

env:
  # ---- Secrets/vars expected (set in repo/org) ----
  GCP_SA_KEY:              ${{ secrets.GCP_SA_KEY       || vars.GCP_SA_KEY }}
  GCS_BUCKET:              ${{ secrets.GCS_BUCKET       || vars.GCS_BUCKET }}
  WP_BASE_URL:             ${{ secrets.WP_BASE_URL      || secrets.WP_URL || vars.WP_BASE_URL || vars.WP_URL }}
  WP_USER:                 ${{ secrets.WP_USER          || vars.WP_USER }}
  WP_APP_PASSWORD:         ${{ secrets.WP_APP_PASSWORD  || vars.WP_APP_PASSWORD }}
  DEEPGRAM_API_KEY:        ${{ secrets.DEEPGRAM_API_KEY || vars.DEEPGRAM_API_KEY }}
  TWITTER_AUTHORIZATION:   ${{ secrets.TWITTER_AUTHORIZATION || secrets.X_BEARER     || vars.TWITTER_AUTHORIZATION || vars.X_BEARER }}
  TWITTER_AUTH_TOKEN:      ${{ secrets.TWITTER_AUTH_TOKEN    || secrets.X_AUTH_TOKEN || vars.TWITTER_AUTH_TOKEN    || vars.X_AUTH_TOKEN }}
  TWITTER_CSRF_TOKEN:      ${{ secrets.TWITTER_CSRF_TOKEN    || secrets.X_CSRF       || vars.TWITTER_CSRF_TOKEN    || vars.X_CSRF }}
  # ---- Local work dirs ----
  WORKDIR: ${{ github.workspace }}/work
  ARTDIR:  ${{ github.workspace }}/out

jobs:
  process:
    name: Process Space
    runs-on: ubuntu-latest
    timeout-minutes: 180
    concurrency:
      group: ${{ format('space-worker-{0}-{1}', github.ref, github.event.inputs.post_id != '' && github.event.inputs.post_id || github.run_id) }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive effective inputs
        id: eff
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$WORKDIR" "$ARTDIR" "$ARTDIR/logs"
          # Save inputs_json to file for jq
          printf '%s' '${{ github.event.inputs.inputs_json }}' > "$WORKDIR/inputs.json"
          # Toggles default to true
          et="$(jq -r '.enable_transcript // "true"' "$WORKDIR/inputs.json" 2>/dev/null || echo true)"
          ea="$(jq -r '.enable_attendees  // "true"' "$WORKDIR/inputs.json" 2>/dev/null || echo true)"
          ev="$(jq -r '.enable_vtt        // "true"' "$WORKDIR/inputs.json" 2>/dev/null || echo true)"
          ed="$(jq -r '.enable_ads        // "true"' "$WORKDIR/inputs.json" 2>/dev/null || echo true)"
          echo "ENABLE_TRANSCRIPT=$et" >> "$GITHUB_ENV"
          echo "ENABLE_ATTENDEES=$ea"  >> "$GITHUB_ENV"
          echo "ENABLE_VTT=$ev"        >> "$GITHUB_ENV"
          echo "ENABLE_ADS=$ed"        >> "$GITHUB_ENV"
          # Mode / MP3 override
          echo "MODE=${{ github.event.inputs.mode }}" >> "$GITHUB_ENV"
          echo "EXISTING_MP3_URL=${{ github.event.inputs.existing_mp3_url }}" >> "$GITHUB_ENV"
          # Ads list
          jq -r '.ads_urls // ""' "$WORKDIR/inputs.json" 2>/dev/null | tr ',' '\n' | sed -E '/^\s*$/d' > "$WORKDIR/ads.list"
          echo "ADS_LIST=$WORKDIR/ads.list" >> "$GITHUB_ENV"
          # Purple tweet URL + Ads mp3 for deletion
          echo "PURPLE_TWEET_URL=$(jq -r '.purple_tweet_url // ""' "$WORKDIR/inputs.json" 2>/dev/null)" >> "$GITHUB_ENV"
          echo "AUDIO_ADS_URL=$(jq -r '.audio_ads_url // ""' "$WORKDIR/inputs.json" 2>/dev/null)"     >> "$GITHUB_ENV"
          # Watch controls (used when mode=watch)
          echo "WATCH_USERS=$(jq -r '.watch_users // ""' "$WORKDIR/inputs.json" 2>/dev/null)"             >> "$GITHUB_ENV"
          echo "WATCH_MIN=$(jq -r '.watch_duration_minutes // ""' "$WORKDIR/inputs.json" 2>/dev/null)"    >> "$GITHUB_ENV"
          # Optional radio polish controls (defaults on)
          rp="$(jq -r '.radio_enhance // "true"' "$WORKDIR/inputs.json" 2>/dev/null || echo true)"
          mm="$(jq -r '.mix_mono      // "true"' "$WORKDIR/inputs.json" 2>/dev/null || echo true)"
          echo "RADIO_ENHANCE=$rp"                                  >> "$GITHUB_ENV"
          echo "MIX_MONO=$mm"                                       >> "$GITHUB_ENV"
          echo "HPF=$(jq -r '.highpass_hz   // 80'    "$WORKDIR/inputs.json" 2>/dev/null)"      >> "$GITHUB_ENV"
          echo "LPF=$(jq -r '.lowpass_hz    // 13500' "$WORKDIR/inputs.json" 2>/dev/null)"      >> "$GITHUB_ENV"
          echo "COMP_THRESH=$(jq -r '.comp_thresh_db // -18'  "$WORKDIR/inputs.json" 2>/dev/null)" >> "$GITHUB_ENV"
          echo "COMP_RATIO=$(jq -r '.comp_ratio    // 3'     "$WORKDIR/inputs.json" 2>/dev/null)"  >> "$GITHUB_ENV"

      - name: Notify WP â€” queued
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ github.event.inputs.post_id }}" \
                       --arg status "queued" \
                       --arg msg "Workflow received and queued" \
                       --arg run "${{ github.run_id }}" \
                       --argjson progress 1 \
                       '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Install deps (ffmpeg / jq / python / yt-dlp)
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg jq python3 python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir yt-dlp

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}

      - name: Setup gcloud (gsutil)
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: gsutil

      - name: Validate config and prefixes
        id: cfg
        shell: bash
        run: |
          set -euxo pipefail
          test -n "${GCS_BUCKET}" || { echo "GCS_BUCKET missing"; exit 1; }
          mkdir -p "$WORKDIR" "$ARTDIR" "$ARTDIR/logs"
          PFX="$(echo "${{ github.event.inputs.gcs_prefix }}" | sed -E 's#^/*##; s#/*$##')"
          if [ -z "$PFX" ]; then PFX="spaces/$(date +%Y)/$(date +%m)"; fi
          echo "PREFIX=$PFX"                  >> "$GITHUB_ENV"
          echo "BUCKET_PREFIX=${PFX#spaces/}" >> "$GITHUB_ENV"

      - name: Derive Space ID and base filename
        id: ids
        shell: bash
        env:
          URL: ${{ github.event.inputs.space_url }}
        run: |
          set -euxo pipefail
          SID=""
          if [ -n "$URL" ]; then
            SID="$(echo "$URL" | sed -nE 's#^.*/i/spaces/([^/?#]+).*#\1#p')"
          fi
          [ -z "$SID" ] && SID="watch"
          BASE="space-$(date +%m-%d-%Y)-${SID}"
          echo "SPACE_ID=${SID}" >> "$GITHUB_ENV"
          echo "BASE=${BASE}"    >> "$GITHUB_ENV"
          echo "space_id=${SID}" >> "$GITHUB_OUTPUT"
          echo "base=${BASE}"    >> "$GITHUB_OUTPUT"

      - name: X preflight auth sanity check
        id: x_preflight
        shell: bash
        run: |
          set -euxo pipefail
          AUTH="${TWITTER_AUTHORIZATION:-}"
          AT="${TWITTER_AUTH_TOKEN:-}"
          CT="${TWITTER_CSRF_TOKEN:-}"
          if [ -n "$AUTH" ] && ! printf '%s' "$AUTH" | grep -q '^Bearer '; then AUTH=""; fi
          [ -n "$AUTH" ] && echo "::add-mask::${AUTH}"
          [ -n "$AT" ] && echo "::add-mask::${AT}"
          [ -n "$CT" ] && echo "::add-mask::${CT}"
          OK=0; REASON="no_creds"
          [ -n "$AT" ] && [ -n "$CT" ] && OK=1 && REASON="cookie_ok" || true
          [ -n "$AUTH" ] && OK=1 && REASON="${REASON}_bearer_present" || true
          echo "ok=${OK}"         >> "$GITHUB_OUTPUT"
          echo "reason=${REASON}" >> "$GITHUB_OUTPUT"
          [ -n "$AUTH" ] && echo "TWITTER_AUTHORIZATION=$AUTH" >> "$GITHUB_ENV"

      # ===========================
      #   AUDIO ACQUISITION
      # ===========================
      - name: Run crawler (id or watch users)
        id: crawl
        if: ${{ env.MODE != 'attendees_only' && env.MODE != 'vtt_only' && env.MODE != 'transcript_only' && env.MODE != 'ads_only' && env.MODE != 'links_only' && env.MODE != 'patch_all_from_mp3' && env.MODE != 'delete_ads_version' && steps.x_preflight.outputs.ok == '1' }}
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
          WATCH_USERS: ${{ env.WATCH_USERS }}
          WATCH_MIN: ${{ env.WATCH_MIN }}
        run: |
          set -euxo pipefail
          mkdir -p "${ARTDIR}" "${ARTDIR}/logs"
          docker pull ghcr.io/hitomarukonpaku/twspace-crawler:latest || true
          LOG_STD="${ARTDIR}/logs/crawler_${SID}.out.log"
          LOG_ERR="${ARTDIR}/logs/crawler_${SID}.err.log"
          set +e
          if [ "${{ github.event.inputs.mode }}" = "watch" ] && [ -n "${WATCH_USERS:-}" ]; then
            timeout "${WATCH_MIN:-120}m" docker run --rm \
              -e TWITTER_AUTHORIZATION \
              -e TWITTER_AUTH_TOKEN \
              -e TWITTER_CSRF_TOKEN \
              -v "${ARTDIR}:/app/download" \
              -v "${ARTDIR}/logs:/app/logs" \
              ghcr.io/hitomarukonpaku/twspace-crawler:latest \
              --user "${WATCH_USERS}" > >(tee -a "$LOG_STD") 2> >(tee -a "$LOG_ERR" >&2)
          else
            timeout 20m docker run --rm \
              -e TWITTER_AUTHORIZATION \
              -e TWITTER_AUTH_TOKEN \
              -e TWITTER_CSR_TOKEN \
              -v "${ARTDIR}:/app/download" \
              -v "${ARTDIR}/logs:/app/logs" \
              ghcr.io/hitomarukonpaku/twspace-crawler:latest \
              --id "${SID}" --force > >(tee -a "$LOG_STD") 2> >(tee -a "$LOG_ERR" >&2)
          fi
          RC=$?
          set -e
          echo "crawler_exit=${RC}"
          AUDIO_FILE="$(find "${ARTDIR}" -type f \( -iname '*.m4a' -o -iname '*.mp3' -o -iname '*.mp4' -o -iname '*.aac' -o -iname '*.webm' -o -iname '*.ogg' -o -iname '*.wav' -o -iname '*.ts' \) -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          if [ -n "${AUDIO_FILE:-}" ] && [ -f "${AUDIO_FILE}" ]; then
            echo "INPUT_FILE=${AUDIO_FILE}" >> "$GITHUB_ENV"
            echo "audio_file=${AUDIO_FILE}" >> "$GITHUB_OUTPUT"
          fi
          RAW="$(grep -hF 'getAudioSpaceById |' "$LOG_STD" "$LOG_ERR" | tail -n1 || true)"
          if [ -z "$RAW" ]; then
            RAW="$(grep -hF 'getAudioSpaceByRestId |' "$LOG_STD" "$LOG_ERR" | tail -n1 || true)"
          fi
          if [ -n "$RAW" ]; then
            printf '%s\n' "$RAW" > "${ARTDIR}/_as_line.txt"
            printf '%s\n' "$RAW" | awk -F'\\| ' '{print $NF}' > "${ARTDIR}/_as_line_after_pipe.txt" || true
            [ -s "${ARTDIR}/_as_line_after_pipe.txt" ] && cp "${ARTDIR}/_as_line_after_pipe.txt" "${ARTDIR}/_as_line.json" || true
          fi
          [ -s "${ARTDIR}/_as_line_after_pipe.txt" ] && echo "as_line=${ARTDIR}/_as_line_after_pipe.txt" >> "$GITHUB_OUTPUT" || true
          CRAWLER_VTT="$(find "${ARTDIR}" -type f \( -iname '*.vtt' -o -iname '*.webvtt' \) -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          if [ -n "${CRAWLER_VTT:-}" ] && [ -s "${CRAWLER_VTT}" ]; then
            cp "${CRAWLER_VTT}" "${ARTDIR}/${BASE}.vtt"
            echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV"
          else
            CC_JSONL="$(find "${ARTDIR}" -type f \( -iname '*cc.jsonl' -o -iname '*caption*.jsonl' \) -print | head -n1 || true)"
            if [ -n "${CC_JSONL:-}" ]; then
              docker run --rm -v "${ARTDIR}:/app/download" ghcr.io/hitomarukonpaku/twspace-crawler:latest cc e "/app/download${CC_JSONL#"${ARTDIR}"}" || true
            fi
          fi

      - name: Notify WP â€” processing audio
        if: ${{ env.MODE == '' && env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/worker-status" \
            -d "$(jq -n --arg pid "${{ github.event.inputs.post_id }}" \
                         --arg status "processing" \
                         --arg msg "Processing audio" \
                         --arg run "${{ github.run_id }}" --argjson progress 10 \
                         '{post_id: ($pid|tonumber), status:$status, message:$msg, run_id:$run, progress:$progress}')"

      - name: Fallback download via yt-dlp
        if: ${{ env.MODE == '' && (steps.crawl.outputs.audio_file == '' || steps.crawl.outcome != 'success') && github.event.inputs.existing_mp3_url == '' && github.event.inputs.space_url != '' }}
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        env:
          URL: ${{ github.event.inputs.space_url }}
        run: |
          set -euxo pipefail
          yt-dlp -o "%(title)s.%(ext)s" -f "bestaudio/best" "$URL"
          IN="$(ls -S | head -n1 || true)"
          test -f "$IN" || { echo "No file downloaded"; exit 1; }
          echo "INPUT_FILE=$PWD/$IN" >> "$GITHUB_ENV"

      - name: Use provided MP3 for partial modes
        if: ${{ (env.MODE == 'transcript_only' || env.MODE == 'vtt_only' || env.MODE == 'patch_all_from_mp3' || env.MODE == 'ads_only') && github.event.inputs.existing_mp3_url != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          curl -L "${{ github.event.inputs.existing_mp3_url }}" -o "${ARTDIR}/${BASE}.mp3"
          echo "MP3_PATH=${ARTDIR}/${BASE}.mp3" >> "$GITHUB_ENV"

      - name: Prep audio (trim + optional radio polish)
        if: ${{ env.MODE == '' && env.INPUT_FILE != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          IN="$INPUT_FILE"
          OUT="${WORKDIR}/pre_${{ github.run_id }}.wav"

          # Base: trim head/tail silence
          F="silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse,silenceremove=start_periods=1:start_silence=1:start_threshold=-45dB:detection=peak,areverse"

          # Optional radio polish: mono, high/low-pass, gentle compression
          if [ "${RADIO_ENHANCE}" = "true" ]; then
            if [ "${MIX_MONO}" = "true" ]; then
              F="${F},pan=mono|c0=0.5*FL+0.5*FR"
            fi
            F="${F},highpass=f=${HPF},lowpass=f=${LPF},acompressor=threshold=${COMP_THRESH}dB:ratio=${COMP_RATIO}:attack=5:release=80:makeup=6"
          fi

          ffmpeg -hide_banner -y -i "$IN" -af "$F" -ar 48000 -c:a pcm_s16le "$OUT"
          echo "AUDIO_IN=${OUT}" >> "$GITHUB_ENV"

      - name: Loudness normalize to MP3
        if: ${{ env.MODE == '' && env.AUDIO_IN != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          PASS1_JSON="${WORKDIR}/loudnorm1.json"
          ffmpeg -hide_banner -y -i "$AUDIO_IN" -af loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json -f null - 2>"${WORKDIR}/pass1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}/' "${WORKDIR}/pass1.log" > "$PASS1_JSON" || true
          if jq -e . "$PASS1_JSON" >/dev/null 2>&1; then
            I=$(jq -r '.input_i // "-16"'  "$PASS1_JSON"); TP=$(jq -r '.input_tp // "-1.5"' "$PASS1_JSON"); LRA=$(jq -r '.input_lra // "11"' "$PASS1_JSON"); TH=$(jq -r '.input_thresh // "-26"' "$PASS1_JSON")
            ffmpeg -hide_banner -y -i "$AUDIO_IN" -af "loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=$I:measured_TP=$TP:measured_LRA=$LRA:measured_thresh=$TH:linear=true" -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}.mp3"
          else
            ffmpeg -hide_banner -y -i "$AUDIO_IN" -af "loudnorm=I=-16:TP=-1.5:LRA=11" -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}.mp3"
          fi
          echo "MP3_PATH=${ARTDIR}/${BASE}.mp3" >> "$GITHUB_ENV"

      - name: Upload MP3 to GCS
        id: upload_mp3
        if: ${{ env.MODE == '' && env.MP3_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.mp3"
          PROXY="${RAW}"
          gsutil -m cp "${MP3_PATH}" "$DEST"
          if [ "${{ github.event.inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "audio_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "audio_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      # ===========================
      #   CAPTIONS / TRANSCRIPT
      # ===========================
      - name: Prefer crawler captions if present
        id: crawl_cc
        if: ${{ env.MODE != 'attendees_only' && env.ENABLE_VTT == 'true' }}
        shell: bash
        run: |
          set -euxo pipefail
          [ -s "${ARTDIR}/${BASE}.vtt" ] && echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV" || true

      - name: Convert crawler JSONL captions to VTT
        if: ${{ env.MODE != 'attendees_only' && env.ENABLE_VTT == 'true' && env.VTT_PATH == '' }}
        shell: bash
        run: |
          set -euxo pipefail
          CC_JSONL="$(find "${ARTDIR}" -type f \( -iname '*cc.jsonl' -o -iname '*caption*.jsonl' \) -print | head -n1 || true)"
          if [ -n "${CC_JSONL:-}" ] && [ -s "${CC_JSONL}" ]; then
            jq -s -r '
              def two(n): if n<10 then "0"+(n|tostring) else (n|tostring) end;
              def ms3(n): (1000 + (n%1000)|tostring)[1:4];
              def ts(ms):
                ( (ms/3600000)|floor ) as $h |
                ( (ms%3600000)/60000|floor ) as $m |
                ( (ms%60000)/1000|floor ) as $s |
                ( ms%1000 ) as $ms |
                ($h|tostring) + ":" + two($m) + ":" + two($s) + "." + ms3($ms);
              "WEBVTT", "",
              ( .[]
                | {s: (.startMs // .start_ms // .start // .offsetMs // 0),
                   d: (.durationMs // .duration_ms // .duration // .lenMs // 0),
                   t: (.text // .caption // .content // "")}
                | .e = (.s + .d)
                | select(.t != "")
                | (ts(.s) + " --> " + ts(.e)), (.t | gsub("\r";"")), ""
              )
            ' "$CC_JSONL" > "${ARTDIR}/${BASE}.vtt" || true
            [ -s "${ARTDIR}/${BASE}.vtt" ] && echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV" || true
          fi

      - name: Validate VTT (must contain header and cues)
        if: ${{ env.MODE != 'attendees_only' && env.ENABLE_VTT == 'true' && env.VTT_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          if [ ! -s "$VTT_PATH" ]; then
            echo "VTT empty; clearing"
            echo "VTT_PATH=" >> "$GITHUB_ENV"
            exit 0
          fi
          HDR="$(head -n1 "$VTT_PATH" || true)"
          CUES="$(grep -c -- '-->' "$VTT_PATH" || true)"
          if [ "${HDR:-}" != "WEBVTT" ] || [ "${CUES:-0}" -lt 1 ]; then
            echo "Invalid VTT; clearing"
            rm -f "$VTT_PATH" || true
            echo "VTT_PATH=" >> "$GITHUB_ENV"
          fi

      - name: VTT via Deepgram (fallback or vtt_only)
        id: deepgram
        if: ${{ env.ENABLE_VTT == 'true' && env.VTT_PATH == '' && env.DEEPGRAM_API_KEY != '' && ( (env.MODE == '' && env.MP3_PATH != '') || (env.MODE == 'vtt_only' && env.MP3_PATH != '') || (env.MODE == 'patch_all_from_mp3' && env.MP3_PATH != '') ) }}
        shell: bash
        run: |
          set -euxo pipefail
          curl -sS -X POST \
            -H "Authorization: Token ${DEEPGRAM_API_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${MP3_PATH}" \
            "https://api.deepgram.com/v1/listen?model=nova-2&smart_format=true&punctuate=true&format=vtt" \
            -o "${ARTDIR}/${BASE}.vtt" || true
          [ -s "${ARTDIR}/${BASE}.vtt" ] && echo "VTT_PATH=${ARTDIR}/${BASE}.vtt" >> "$GITHUB_ENV" || true

      - name: Validate Deepgram VTT
        if: ${{ env.ENABLE_VTT == 'true' && env.VTT_PATH != '' && (steps.deepgram.outcome == 'success' || steps.deepgram.outcome == 'skipped') }}
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "$VTT_PATH" ]; then
            HDR="$(head -n1 "$VTT_PATH" || true)"
            CUES="$(grep -c -- '-->' "$VTT_PATH" || true)"
            if [ "${HDR:-}" != "WEBVTT" || "${CUES:-0}" -lt 1 ]; then
              echo "Deepgram VTT invalid; clearing"
              rm -f "$VTT_PATH" || true
              echo "VTT_PATH=" >> "$GITHUB_ENV"
            fi
          fi

      # NEW: Get diarized JSON (utterances + paragraphs) from Deepgram for robust VTT + transcript
      - name: Deepgram JSON diarized (for clean VTT + transcript)
        id: dgjson
        if: ${{ (env.ENABLE_VTT == 'true' || env.ENABLE_TRANSCRIPT == 'true') && env.DEEPGRAM_API_KEY != '' && ( (env.MODE == '' && env.MP3_PATH != '') || env.MODE == 'vtt_only' || env.MODE == 'transcript_only' || env.MODE == 'patch_all_from_mp3' ) }}
        shell: bash
        run: |
          set -euxo pipefail
          J="${ARTDIR}/${BASE}.deepgram.json"
          curl -sS -X POST \
            -H "Authorization: Token ${DEEPGRAM_API_KEY}" \
            -H "Content-Type: audio/mpeg" \
            --data-binary @"${MP3_PATH}" \
            "https://api.deepgram.com/v1/listen?model=nova-2&smart_format=true&punctuate=true&diarize=true&paragraphs=true&utterances=true" \
            -o "$J" || true
          [ -s "$J" ] && echo "DG_JSON=$J" >> "$GITHUB_ENV" || true

      # NEW: Build WEBVTT from Deepgram JSON if VTT is still missing
      - name: Build VTT from Deepgram JSON (fallback fix)
        if: ${{ env.ENABLE_VTT == 'true' && env.VTT_PATH == '' && env.DG_JSON != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          OUT="${ARTDIR}/${BASE}.vtt"
          jq -r '
            def two(n): if n<10 then "0"+(n|tostring) else (n|tostring) end;
            def ms3(n): (1000 + (n % 1000 | floor)|tostring)[1:4];
            def ts(x):
              ( (x/3600)|floor ) as $h |
              ( ((x%3600)/60)|floor ) as $m |
              ( (x%60)|floor ) as $s |
              ( ((x*1000)|floor) % 1000 ) as $ms |
              ($h|tostring) + ":" + two($m) + ":" + two($s) + "." + ms3($ms);
            "WEBVTT", "",
            (
              if (.results.utterances|length > 0)
              then
                .results.utterances[]
                | {s:.start, e:.end, t:(.transcript // (.words|map(.punctuated_word // .word)|join(" ")))}
              else
                (.results.channels[0].alternatives[0].paragraphs.paragraphs // [])[]
                | .sentences[]
                | {s:.start, e:.end, t:.text}
              end
            )
            | select(.t != null and .t != "")
            | (ts(.s) + " --> " + ts(.e)), (.t), ""
          ' "$DG_JSON" > "$OUT"
          [ -s "$OUT" ] && echo "VTT_PATH=$OUT" >> "$GITHUB_ENV" || true

      - name: Build transcript text (from Deepgram JSON OR CC JSONL OR VTT)
        id: transcript
        if: ${{ env.ENABLE_TRANSCRIPT == 'true' && ( env.MODE != 'attendees_only' && env.MODE != 'links_only' && env.MODE != 'ads_only' && env.MODE != 'delete_ads_version' ) }}
        shell: bash
        run: |
          set -euxo pipefail
          OUT_TXT="${ARTDIR}/${BASE}.txt"
          rm -f "$OUT_TXT" || true

          # 1) Prefer diarized Deepgram JSON if present
          if [ -n "${DG_JSON:-}" ] && [ -s "${DG_JSON:-}" ]; then
            jq -r '
              def two(n): if n<10 then "0"+(n|tostring) else (n|tostring) end;
              def hhmmss(x):
                ( (x/3600)|floor ) as $h |
                ( ((x%3600)/60)|floor ) as $m |
                ( (x%60)|floor ) as $s |
                "[" + ($h|tostring) + ":" + two($m) + ":" + two($s) + "]";
              if (.results.utterances|length > 0) then
                .results.utterances[]
                | (hhmmss(.start) + " Speaker " + (.speaker|tostring) + ": "
                   + ( .transcript // (.words|map(.punctuated_word // .word)|join(" ")) ) )
              else
                (.results.channels[0].alternatives[0].paragraphs.paragraphs // [])[]
                | {
                    s: (.sentences[0].start),
                    speaker: (.speaker // 1),
                    t: (.sentences | map(.text) | join(" "))
                  }
                | (hhmmss(.s) + " Speaker " + (.speaker|tostring) + ": " + .t)
              end
            ' "$DG_JSON" > "$OUT_TXT" || true
          fi

          # 2) Otherwise, try CC JSONL from crawler (flattened text)
          if [ ! -s "$OUT_TXT" ]; then
            CC_JSONL="$(find "${ARTDIR}" -type f \( -iname '*cc.jsonl' -o -iname '*caption*.jsonl' \) -print | head -n1 || true)"
            if [ -n "${CC_JSONL:-}" ] && [ -s "${CC_JSONL}" ]; then
              jq -s -r '
                .[] | ( .text // .caption // .content // "" )
                | gsub("\r";"")
                | select(. != "")
              ' "$CC_JSONL" > "$OUT_TXT" || true
            fi
          fi

          # 3) Otherwise, derive from VTT (strip times)
          if [ ! -s "$OUT_TXT" ] && [ -n "${VTT_PATH:-}" ] && [ -s "${VTT_PATH}" ]; then
            awk 'BEGIN{skip=0} !/-->/ && $0!="WEBVTT" && $0!~/^[[:space:]]*NOTE/ && $0!~/^[0-9]+$/ {print}' "$VTT_PATH" \
              | sed '/^[[:space:]]*$/d' > "$OUT_TXT" || true
          fi

          # 4) Last resort â€” direct Deepgram TXT (only if explicitly allowed)
          if [ ! -s "$OUT_TXT" ] && [ -n "${MP3_PATH:-}" ] && [ -s "${MP3_PATH}" ] && [ "${{ github.event.inputs.do_transcript }}" = "true" ] && [ -n "${DEEPGRAM_API_KEY:-}" ]; then
            curl -sS -X POST \
              -H "Authorization: Token ${DEEPGRAM_API_KEY}" \
              -H "Content-Type: audio/mpeg" \
              --data-binary @"${MP3_PATH}" \
              "https://api.deepgram.com/v1/listen?model=nova-2&smart_format=true&punctuate=true&format=txt" \
              -o "$OUT_TXT" || true
          fi

          [ -s "$OUT_TXT" ] && echo "TRANSCRIPT_PATH=${OUT_TXT}" >> "$GITHUB_ENV" || echo "No transcript text generated."

      - name: Upload VTT to GCS
        id: upload_vtt
        if: ${{ env.ENABLE_VTT == 'true' && env.VTT_PATH != '' && env.MODE != 'attendees_only' && env.MODE != 'links_only' && env.MODE != 'ads_only' && env.MODE != 'delete_ads_version' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}.vtt"
          PROXY="${RAW}"
          gsutil -m cp "${VTT_PATH}" "$DEST"
          if [ "${{ github.event.inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "vtt_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "vtt_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      # ===========================
      #   ATTENDEES (from crawler)
      # ===========================
      - name: Build attendees JSON & HTML (from crawler)
        id: attendees
        if: ${{ env.ENABLE_ATTENDEES == 'true' && steps.crawl.outcome == 'success' && steps.crawl.outputs.as_line != '' && (env.MODE == '' || env.MODE == 'attendees_only' || env.MODE == 'patch_all_from_mp3') }}
        shell: bash
        env:
          CAND: ${{ steps.crawl.outputs.as_line }}
        run: |
          set -euxo pipefail
          OUT_JSON="${ARTDIR}/attendees.json"
          OUT_HTML="${ARTDIR}/attendees.html"
          jq -r '
            def mkp:
              { handle: (.twitter_screen_name // .user_results?.result?.legacy?.screen_name),
                name:   (.display_name       // .user_results?.result?.legacy?.name)
              }
              | select(.handle!=null and .handle!="")
              | . + { url: ("https://x.com/" + .handle) };
            (.audioSpace // .) as $a
            | ($a.metadata?.creator_results?.result?.legacy?) as $h
            | ($h.screen_name // empty) as $H
            | {
                host:    ( if $H != "" then [ {handle:$H, name:($h.name // ""), url:("https://x.com/" + $H)} ] else [] end ),
                cohosts: ( ($a.participants?.admins   // []) | map(mkp) | map(select(.handle != $H)) | unique_by(.handle) ),
                speakers:( ($a.participants?.speakers // []) | map(mkp) | unique_by(.handle) )
              }
          ' "${CAND}" > "$OUT_JSON" || true
          if [ -s "$OUT_JSON" ]; then
            jq -r '
              def li: "  <li><a href=\"" + (.url//"#") + "\">" + ((.name // "") + " (@" + (.handle // "") + ")") + "</a></li>";
              def section(title; items):
                if (items|length) > 0
                then "<h3>" + title + "</h3>\n<ul>\n" + (items|map(li)|join("\n")) + "\n</ul>\n"
                else ""
                end;
              . as $d
              | section("Host"; $d.host)
              + section( (if ($d.cohosts|length)==1 then "Co-host" else "Co-hosts" end); $d.cohosts)
              + section("Speakers"; $d.speakers)
            ' "$OUT_JSON" > "$OUT_HTML"
            if grep -qi '<li><a ' "$OUT_HTML"; then
              echo "ATTN_HTML=${OUT_HTML}" >> "$GITHUB_ENV"
              echo "ATTENDEES_OK=1"       >> "$GITHUB_ENV"
            fi
          fi

      # ===========================
      #   PURPLE PILL LINKS
      # ===========================
      - name: Extract Purple Pill links (replies)
        id: links
        if: ${{ env.PURPLE_TWEET_URL != '' && (env.MODE == '' || env.MODE == 'links_only' || env.MODE == 'patch_all_from_mp3') }}
        shell: bash
        env:
          TURL: ${{ env.PURPLE_TWEET_URL }}
        run: |
          set -euxo pipefail
          TID="$(printf '%s\n' "$TURL" | sed -nE 's#^.*/status/([0-9]+).*#\1#p')"
          if [ -z "$TID" ]; then
            echo "No tweet ID in $TURL"; exit 0
          fi
          OUT_JSON="${WORKDIR}/conv_${TID}.json"
          OUT_HTML="${ARTDIR}/${BASE}_links.html"
          HDRS=(-H "accept: application/json" -H "user-agent: SpaceWorker/1.0" -H "referer: https://x.com/")
          API="https://x.com/i/api/2/timeline/conversation/${TID}.json?tweet_mode=extended&count=200"
          if [ -n "${TWITTER_AUTH_TOKEN:-}" ] && [ -n "${TWITTER_CSRF_TOKEN:-}" ] && [ -n "${TWITTER_AUTHORIZATION:-}" ]; then
            curl -sS "${HDRS[@]}" \
              -H "x-csrf-token: ${TWITTER_CSRF_TOKEN}" \
              -H "authorization: ${TWITTER_AUTHORIZATION}" \
              -H "cookie: auth_token=${TWITTER_AUTH_TOKEN}; ct0=${TWITTER_CSRF_TOKEN}" \
              "$API" -o "$OUT_JSON" || true
          elif [ -n "${TWITTER_AUTHORIZATION:-}" ]; then
            GJS="$(curl -sS -X POST -H "authorization: ${TWITTER_AUTHORIZATION}" -H "content-type: application/json" https://api.twitter.com/1.1/guest/activate.json -d '{}' || true)"
            GTK="$(printf '%s' "$GJS" | jq -r '.guest_token // empty')"
            if [ -n "$GTK" ]; then
              curl -sS "${HDRS[@]}" \
                -H "authorization: ${TWITTER_AUTHORIZATION}" \
                -H "x-guest-token: ${GTK}" \
                "$API" -o "$OUT_JSON" || true
            fi
          fi
          if [ ! -s "$OUT_JSON" ]; then
            echo "No conversation JSON; cannot extract links."
            exit 0
          fi
          jq -r --arg rid "$TID" '
            (.globalObjects.tweets // {}) as $tw |
            $tw | to_entries[]
            | select(.value.id_str != $rid)
            | (.value.entities.urls[]?.expanded_url) // empty
          ' "$OUT_JSON" | awk 'NF' | sort -u > "${WORKDIR}/links.txt" || true
          if [ -s "${WORKDIR}/links.txt" ]; then
            {
              echo "<ul>"
              sed 's#^#  <li><a href="#; s#$#">#' "${WORKDIR}/links.txt" | paste -d '' - "${WORKDIR}/links.txt" | sed 's#$#</a></li>#'
              echo "</ul>"
            } > "$OUT_HTML"
            echo "LINKS_HTML=${OUT_HTML}" >> "$GITHUB_ENV"
          fi

      # ===========================
      #   ADS VERSION
      # ===========================
      - name: Download ad MP3s (if any)
        if: ${{ env.ENABLE_ADS == 'true' && (env.MODE == '' || env.MODE == 'ads_only' || env.MODE == 'patch_all_from_mp3') }}
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "${WORKDIR}/ads"
          n=0
          while IFS= read -r u; do
            [ -z "$u" ] && continue
            n=$((n+1))
            curl -L "$u" -o "${WORKDIR}/ads/ad_${n}.mp3" || true
          done < "${ADS_LIST}"
          echo "ADS_DIR=${WORKDIR}/ads" >> "$GITHUB_ENV"

      - name: Build ads version MP3 (pre-roll ads + base)
        if: ${{ env.ENABLE_ADS == 'true' && (env.MODE == '' || env.MODE == 'ads_only' || env.MODE == 'patch_all_from_mp3') && ( (env.MP3_PATH != '') || (env.MODE == '' && steps.upload_mp3.outcome == 'success') ) }}
        shell: bash
        run: |
          set -euxo pipefail
          if [ -z "${MP3_PATH:-}" ] || [ ! -s "${MP3_PATH:-}" ]; then
            MP3_PATH="${ARTDIR}/${BASE}.mp3"
            if [ ! -s "$MP3_PATH" ]; then
              echo "No base MP3 present; cannot build ads version"; exit 0
            fi
          fi

          # Require at least one ad file; otherwise skip creating an ads MP3
          AD_COUNT=$(ls -1 "${ADS_DIR}"/ad_*.mp3 2>/dev/null | wc -l | tr -d ' ')
          if [ "${AD_COUNT:-0}" -eq 0 ]; then
            echo "No ads found (and/or Ads disabled) â€” skipping ads version."
            exit 0
          fi

          MAP=""
          INDX=0
          for f in "${ADS_DIR}"/ad_*.mp3; do
            [ -f "$f" ] || continue
            INDX=$((INDX+1))
            MAP="${MAP} -i \"$f\""
          done
          INDX=$((INDX+1))
          MAP="${MAP} -i \"${MP3_PATH}\""
          # shellcheck disable=SC2086
          eval ffmpeg -hide_banner -y ${MAP} -filter_complex "concat=n=${INDX}:v=0:a=1" -ar 48000 -ac 2 -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}-ads.mp3"
          if [ -s "${ARTDIR}/${BASE}-ads.mp3" ]; then
            echo "MP3_ADS_PATH=${ARTDIR}/${BASE}-ads.mp3" >> "$GITHUB_ENV"
          fi

      - name: Re-normalize Ads MP3 to -16 LUFS
        if: ${{ env.ENABLE_ADS == 'true' && env.MP3_ADS_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          PASS1="${WORKDIR}/ln_ads1.json"
          ffmpeg -hide_banner -y -i "${MP3_ADS_PATH}" -af loudnorm=I=-16:TP=-1.5:LRA=11:print_format=json -f null - 2>"${WORKDIR}/ln_ads1.log" || true
          awk '/^{/{f=1} f{print} /}/{f=0}/' "${WORKDIR}/ln_ads1.log" > "$PASS1" || true
          if jq -e . "$PASS1" >/dev/null 2>&1; then
            I=$(jq -r '.input_i // "-16"'  "$PASS1"); TP=$(jq -r '.input_tp // "-1.5"' "$PASS1")
            LRA=$(jq -r '.input_lra // "11"' "$PASS1"); TH=$(jq -r '.input_thresh // "-26"' "$PASS1")
            ffmpeg -hide_banner -y -i "${MP3_ADS_PATH}" \
              -af "loudnorm=I=-16:TP=-1.5:LRA=11:measured_I=$I:measured_TP=$TP:measured_LRA=$LRA:measured_thresh=$TH:linear=true" \
              -c:a libmp3lame -b:a 160k "${ARTDIR}/${BASE}-ads.norm.mp3"
            mv "${ARTDIR}/${BASE}-ads.norm.mp3" "${ARTDIR}/${BASE}-ads.mp3"
          fi

      - name: Upload Ads MP3 to GCS
        id: upload_ads
        if: ${{ env.ENABLE_ADS == 'true' && env.MP3_ADS_PATH != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          DEST="gs://${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}-ads.mp3"
          RAW="https://storage.googleapis.com/${GCS_BUCKET}/${BUCKET_PREFIX}/${BASE}-ads.mp3"
          PROXY="${RAW}"
          gsutil -m cp "${MP3_ADS_PATH}" "$DEST"
          if [ "${{ github.event.inputs.make_public }}" = "true" ]; then
            (gsutil acl ch -u AllUsers:R "$DEST" || gsutil iam ch allUsers:objectViewer "gs://${GCS_BUCKET}") || true
          fi
          echo "audio_ads_raw=${RAW}"     >> "$GITHUB_OUTPUT"
          echo "audio_ads_proxy=${PROXY}" >> "$GITHUB_OUTPUT"

      - name: Delete Ads MP3 from GCS
        if: ${{ env.MODE == 'delete_ads_version' && env.AUDIO_ADS_URL != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          U="${AUDIO_ADS_URL}"
          if printf '%s' "$U" | grep -q '^gs://'; then
            DEST="$U"
          else
            B="$(printf '%s' "$U" | sed -nE 's#^https?://[^/]+/([^/]+)/(.+)$#\1#p')"
            K="$(printf '%s' "$U" | sed -nE 's#^https?://[^/]+/([^/]+)/(.+)$#\2#p')"
            if [ -n "$B" ] && [ -n "$K" ]; then DEST="gs://${B}/${K}"; fi
          fi
          if [ -n "${DEST:-}" ]; then
            gsutil rm -f "$DEST" || true
          else
            echo "Could not convert AUDIO_ADS_URL to a GCS path; skipping rm."
          fi

      # ===========================
      #   POST TO WORDPRESS
      # ===========================
      - name: Register assets in WP (finalize â€” full mode)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' && (steps.upload_mp3.outputs.audio_proxy != '' || steps.upload_mp3.outputs.audio_raw != '') }}
        shell: bash
        env:
          PID:  ${{ github.event.inputs.post_id }}
          AUD:  ${{ steps.upload_mp3.outputs.audio_proxy || steps.upload_mp3.outputs.audio_raw }}
          VTTU: ${{ steps.upload_vtt.outputs.vtt_proxy   || steps.upload_vtt.outputs.vtt_raw }}
          TTL:  ${{ github.event.inputs.title }}
        run: |
          set -euo pipefail
          AT_HTML=""
          if [ -n "${ATTN_HTML:-}" ] && [ -s "${ATTN_HTML:-}" ]; then AT_HTML="$(cat "${ATTN_HTML}")"; fi
          LINKS_HTML=""
          if [ -n "${LINKS_HTML:-}" ] && [ -s "${LINKS_HTML:-}" ]; then LINKS_HTML="$(cat "${LINKS_HTML}")"; fi
          BODY="$(jq -n \
            --arg gcs   "${AUD}" \
            --arg mime  "audio/mpeg" \
            --arg pid   "${PID}" \
            --arg ttl   "${TTL}" \
            --arg vtt   "${VTTU}" \
            --arg ath   "${AT_HTML}" \
            --arg lhtml "${LINKS_HTML}" \
            --arg aads  "${{ steps.upload_ads.outputs.audio_ads_proxy || steps.upload_ads.outputs.audio_ads_raw }}" \
            '{
              gcs_url: $gcs,
              mime:    $mime,
              post_id: ($pid|tonumber),
              title:   $ttl
            }
            + (if ($vtt|length)>0 then {vtt_url:$vtt} else {} end)
            + (if ($ath|length)>0 then {attendees_html:$ath} else {} end)
            + (if ($lhtml|length)>0 then {links_html:$lhtml} else {} end)
            + {artifacts:
                ( {}
                  + (if ($aads|length)>0 then {audio_ads_url:$aads} else {} end)
                  + {audio_noads_url:$gcs}
                )
              }' )"
          TR_PATH="${TRANSCRIPT_PATH:-}"
          if [ -n "$TR_PATH" ] && [ -s "$TR_PATH" ]; then
            jq -n --rawfile tr "$TR_PATH" --slurpfile base <(printf '%s' "$BODY") \
              '$base[0] + {transcript: $tr}' > "${WORKDIR}/wp_register_body.json"
          else
            printf '%s' "$BODY" > "${WORKDIR}/wp_register_body.json"
          fi
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/register" \
            -d "@${WORKDIR}/wp_register_body.json" | jq -r .

      - name: Patch WP â€” attendees/links/vtt/transcript/ads (partial modes)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' && ( env.MODE == 'attendees_only' || env.MODE == 'links_only' || env.MODE == 'vtt_only' || env.MODE == 'transcript_only' || env.MODE == 'ads_only' || env.MODE == 'patch_all_from_mp3' ) }}
        shell: bash
        env:
          PID:  ${{ github.event.inputs.post_id }}
        run: |
          set -euo pipefail
          AT_HTML=""
          if [ -n "${ATTN_HTML:-}" ] && [ -s "${ATTN_HTML:-}" ]; then AT_HTML="$(cat "${ATTN_HTML}")"; fi
          LINKS_HTML=""
          if [ -n "${LINKS_HTML:-}" ] && [ -s "${LINKS_HTML:-}" ]; then LINKS_HTML="$(cat "${LINKS_HTML}")"; fi
          jq -n \
            --arg pid   "${PID}" \
            --arg vtt   "${{ steps.upload_vtt.outputs.vtt_proxy || steps.upload_vtt.outputs.vtt_raw }}" \
            --arg ath   "${AT_HTML}" \
            --arg lhtml "${LINKS_HTML}" \
            --arg aads  "${{ steps.upload_ads.outputs.audio_ads_proxy || steps.upload_ads.outputs.audio_ads_raw }}" \
            --arg status "complete" \
            --argjson progress 100 \
            '{
              post_id: ($pid|tonumber),
              status: $status,
              progress: $progress
            }
            + (if ($vtt|length)>0 then {vtt_url:$vtt} else {} end)
            + (if ($ath|length)>0 then {attendees_html:$ath} else {} end)
            + (if ($lhtml|length)>0 then {links_html:$lhtml} else {} end)
            + (if ($aads|length)>0 then {audio_ads_url:$aads} else {} end)
          ' > "${WORKDIR}/wp_patch_body.json"
          if [ -n "${TRANSCRIPT_PATH:-}" ] && [ -s "${TRANSCRIPT_PATH:-}" ]; then
            jq -n --rawfile tr "${TRANSCRIPT_PATH}" --slurpfile base "${WORKDIR}/wp_patch_body.json" \
              '$base[0] + {transcript:$tr}' > "${WORKDIR}/wp_patch_body2.json"
            mv "${WORKDIR}/wp_patch_body2.json" "${WORKDIR}/wp_patch_body.json"
          fi
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" \
            -d "@${WORKDIR}/wp_patch_body.json" | jq -r .

      - name: Patch WP â€” delete ads (meta-only acknowledgement)
        if: ${{ env.WP_BASE_URL != '' && env.WP_USER != '' && env.WP_APP_PASSWORD != '' && github.event.inputs.post_id != '' && env.MODE == 'delete_ads_version' }}
        shell: bash
        env:
          PID:  ${{ github.event.inputs.post_id }}
        run: |
          set -euo pipefail
          curl -sS -u "${WP_USER}:${WP_APP_PASSWORD}" \
            -H "Content-Type: application/json" \
            -X POST "${WP_BASE_URL%/}/wp-json/ss3k/v1/patch-assets" \
            -d "$(jq -n --arg pid "${PID}" --arg status "complete" --argjson progress 100 '{post_id: ($pid|tonumber), status:$status, progress:$progress, message:"Ads version deleted on GCS (if present)."}')" \
            | jq -r .

      - name: Summary
        shell: bash
        env:
          SID: ${{ steps.ids.outputs.space_id }}
        run: |
          {
            echo "### Space Worker Summary"
            echo "- Space URL ${{ github.event.inputs.space_url }}"
            echo "- Space ID  ${SID}"
            echo "- Post ID   ${{ github.event.inputs.post_id }}"
            if [ -n "${{ steps.upload_mp3.outputs.audio_proxy }}" ]; then
              echo "- Audio     ${{ steps.upload_mp3.outputs.audio_proxy }}"
            elif [ -n "${{ steps.upload_mp3.outputs.audio_raw }}" ]; then
              echo "- Audio     ${{ steps.upload_mp3.outputs.audio_raw }}"
            else
              echo "- Audio     (none in this run)"
            fi
            if [ -n "${{ steps.upload_vtt.outputs.vtt_proxy }}" ]; then
              echo "- VTT       ${{ steps.upload_vtt.outputs.vtt_proxy }}"
            elif [ -n "${{ steps.upload_vtt.outputs.vtt_raw }}" ]; then
              echo "- VTT       ${{ steps.upload_vtt.outputs.vtt_raw }}"
            else
              echo "- VTT       (none)"
            fi
            if [ -n "${TRANSCRIPT_PATH:-}" ] && [ -s "${TRANSCRIPT_PATH:-}" ]; then
              echo "- Transcript text: present (diarized if JSON available)"
            else
              echo "- Transcript text: (none)"
            fi
            if [ "${ATTENDEES_OK:-0}" = "1" ]; then
              echo "- Attendees extracted"
            else
              echo "- Attendees not extracted"
            fi
            if [ -n "${{ steps.upload_ads.outputs.audio_ads_proxy }}" ]; then
              echo "- Ads MP3   ${{ steps.upload_ads.outputs.audio_ads_proxy }}"
            elif [ -n "${{ steps.upload_ads.outputs.audio_ads_raw }}" ]; then
              echo "- Ads MP3   ${{ steps.upload_ads.outputs.audio_ads_raw }}"
            else
              echo "- Ads MP3   (none)"
            fi
            if [ -n "${LINKS_HTML:-}" ]; then
              echo "- Links     extracted"
            else
              echo "- Links     (none)"
            fi
            echo "- Preflight ok=${{ steps.x_preflight.outputs.ok }} reason=${{ steps.x_preflight.outputs.reason }}"
            echo "- Mode      ${{ github.event.inputs.mode }}"
            if [ "${{ github.event.inputs.mode }}" = "watch" ]; then
              echo "- Watch users: ${WATCH_USERS:-} (for ${WATCH_MIN:-}m)"
            fi
            echo "- Toggles   transcript=${ENABLE_TRANSCRIPT} attendees=${ENABLE_ATTENDEES} vtt=${ENABLE_VTT} ads=${ENABLE_ADS}"
            echo "- Radio     enhance=${RADIO_ENHANCE} mono=${MIX_MONO} HPF=${HPF}Hz LPF=${LPF}Hz comp=${COMP_THRESH}dB/${COMP_RATIO}x"
          } >> "$GITHUB_STEP_SUMMARY"
