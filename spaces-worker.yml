name: Spaces Worker

on:
  workflow_dispatch:
    inputs:
      space_url:
        description: "X Space URL"
        required: true
      title:
        description: "Post title (optional)"
        required: false
        default: "Space"
      deepgram:
        description: "Transcribe with Deepgram? (0/1)"
        required: false
        default: "0"

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (empty)
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          python -m pip install --upgrade pip
          pip install yt-dlp requests

      - name: Download audio with yt-dlp
        env:
          SPACE_URL: ${{ github.event.inputs.space_url }}
        run: |
          # Save to out.m4a, extract best audio
          yt-dlp -x --audio-format m4a -o out.m4a "$SPACE_URL"
          ls -lh out.m4a

      - name: (Optional) Transcribe with Deepgram
        if: ${{ github.event.inputs.deepgram == '1' }}
        env:
          DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY }}
        run: |
          # Replace this placeholder with your real transcription step later.
          echo "Transcript placeholder" > transcript.txt
          printf "WEBVTT\n\n" > captions.vtt

      - name: Push to WordPress
        env:
          WP_BASE:   ${{ secrets.WP_BASE }}
          WP_USER:   ${{ secrets.WP_USER }}
          WP_APP_PW: ${{ secrets.WP_APP_PW }}
          TITLE:     ${{ github.event.inputs.title }}
          SPACE_URL: ${{ github.event.inputs.space_url }}
        run: |
          python - <<'PY'
import os, requests, mimetypes, pathlib, sys, json
WP=os.environ["WP_BASE"].rstrip("/")
AUTH=(os.environ["WP_USER"], os.environ["WP_APP_PW"])

def up(path):
    p=pathlib.Path(path)
    if not p.exists():
        return None, ""
    fn=p.name
    mt=mimetypes.guess_type(fn)[0] or "application/octet-stream"
    with open(path,"rb") as f:
        r=requests.post(f"{WP}/wp-json/wp/v2/media", auth=AUTH,
                        headers={
                          "Content-Disposition": f'attachment; filename="{fn}"',
                          "Content-Type": mt
                        }, data=f, timeout=300)
    r.raise_for_status()
    j=r.json()
    return j["id"], j["source_url"]

# Upload audio
aid, aurl = up("out.m4a")
if not aid:
    print("Audio upload failed", file=sys.stderr)
    sys.exit(1)

# Upload optional files
vtt_url = up("captions.vtt")[1]
txt = ""
if pathlib.Path("transcript.txt").exists():
    txt = pathlib.Path("transcript.txt").read_text(encoding="utf-8")

# Create Spaces post
title = os.environ.get("TITLE","Space") or "Space"
r = requests.post(f"{WP}/wp-json/wp/v2/spaces", auth=AUTH,
                  json={"status":"publish","title":title}, timeout=120)
r.raise_for_status()
pid = r.json()["id"]

# Set meta (your plugin reads these)
meta = {
  "_space_audio_attachment": aid,
  "_ss3k_vtt_url": vtt_url,
  "_ss3k_transcript": txt,
  "_ss3k_space_url": os.environ.get("SPACE_URL",""),
}
r = requests.post(f"{WP}/wp-json/wp/v2/spaces/{pid}", auth=AUTH,
                  json={"meta": meta}, timeout=120)
r.raise_for_status()
print(json.dumps({"post_id": pid, "audio_url": aurl, "vtt_url": vtt_url}))
PY
